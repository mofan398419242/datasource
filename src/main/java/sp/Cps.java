// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cps.proto

package sp;

public final class Cps {
  private Cps() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface PROXY_LOGOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required bytes logname = 1;
    /**
     * <code>required bytes logname = 1;</code>
     *
     * <pre>
     * 主帐号
     * </pre>
     */
    boolean hasLogname();
    /**
     * <code>required bytes logname = 1;</code>
     *
     * <pre>
     * 主帐号
     * </pre>
     */
    com.google.protobuf.ByteString getLogname();

    // required bytes sip = 2;
    /**
     * <code>required bytes sip = 2;</code>
     *
     * <pre>
     * 源IP, 2014-03-06: 兼容IPv6，故只能改为用字符串传送
     * </pre>
     */
    boolean hasSip();
    /**
     * <code>required bytes sip = 2;</code>
     *
     * <pre>
     * 源IP, 2014-03-06: 兼容IPv6，故只能改为用字符串传送
     * </pre>
     */
    com.google.protobuf.ByteString getSip();

    // required uint32 sport = 3;
    /**
     * <code>required uint32 sport = 3;</code>
     *
     * <pre>
     * 源端口
     * </pre>
     */
    boolean hasSport();
    /**
     * <code>required uint32 sport = 3;</code>
     *
     * <pre>
     * 源端口
     * </pre>
     */
    int getSport();

    // required bytes dip = 4;
    /**
     * <code>required bytes dip = 4;</code>
     *
     * <pre>
     * 目的IP, 2014-03-06: 兼容IPv6，故只能改为用字符串传送
     * </pre>
     */
    boolean hasDip();
    /**
     * <code>required bytes dip = 4;</code>
     *
     * <pre>
     * 目的IP, 2014-03-06: 兼容IPv6，故只能改为用字符串传送
     * </pre>
     */
    com.google.protobuf.ByteString getDip();

    // required uint32 dport = 5;
    /**
     * <code>required uint32 dport = 5;</code>
     *
     * <pre>
     * 目的端口
     * </pre>
     */
    boolean hasDport();
    /**
     * <code>required uint32 dport = 5;</code>
     *
     * <pre>
     * 目的端口
     * </pre>
     */
    int getDport();

    // required bytes clientip = 6;
    /**
     * <code>required bytes clientip = 6;</code>
     *
     * <pre>
     * 客户端真实IP, 2014-03-06: 兼容IPv6，故只能改为用字符串传送
     * </pre>
     */
    boolean hasClientip();
    /**
     * <code>required bytes clientip = 6;</code>
     *
     * <pre>
     * 客户端真实IP, 2014-03-06: 兼容IPv6，故只能改为用字符串传送
     * </pre>
     */
    com.google.protobuf.ByteString getClientip();

    // required int64 oper_sec = 7;
    /**
     * <code>required int64 oper_sec = 7;</code>
     *
     * <pre>
     * 操作时间，秒
     * </pre>
     */
    boolean hasOperSec();
    /**
     * <code>required int64 oper_sec = 7;</code>
     *
     * <pre>
     * 操作时间，秒
     * </pre>
     */
    long getOperSec();

    // optional int64 oper_msec = 8;
    /**
     * <code>optional int64 oper_msec = 8;</code>
     *
     * <pre>
     * 操作时间，毫秒
     * </pre>
     */
    boolean hasOperMsec();
    /**
     * <code>optional int64 oper_msec = 8;</code>
     *
     * <pre>
     * 操作时间，毫秒
     * </pre>
     */
    long getOperMsec();

    // optional bytes processname = 9;
    /**
     * <code>optional bytes processname = 9;</code>
     *
     * <pre>
     * 进程名称
     * </pre>
     */
    boolean hasProcessname();
    /**
     * <code>optional bytes processname = 9;</code>
     *
     * <pre>
     * 进程名称
     * </pre>
     */
    com.google.protobuf.ByteString getProcessname();

    // optional uint32 processid = 10;
    /**
     * <code>optional uint32 processid = 10;</code>
     *
     * <pre>
     * 进程ID
     * </pre>
     */
    boolean hasProcessid();
    /**
     * <code>optional uint32 processid = 10;</code>
     *
     * <pre>
     * 进程ID
     * </pre>
     */
    int getProcessid();

    // optional int32 reserved0 = 11;
    /**
     * <code>optional int32 reserved0 = 11;</code>
     */
    boolean hasReserved0();
    /**
     * <code>optional int32 reserved0 = 11;</code>
     */
    int getReserved0();

    // optional int32 reserved1 = 12;
    /**
     * <code>optional int32 reserved1 = 12;</code>
     */
    boolean hasReserved1();
    /**
     * <code>optional int32 reserved1 = 12;</code>
     */
    int getReserved1();

    // optional bytes reserved2 = 13;
    /**
     * <code>optional bytes reserved2 = 13;</code>
     */
    boolean hasReserved2();
    /**
     * <code>optional bytes reserved2 = 13;</code>
     */
    com.google.protobuf.ByteString getReserved2();

    // optional bytes reserved3 = 14;
    /**
     * <code>optional bytes reserved3 = 14;</code>
     */
    boolean hasReserved3();
    /**
     * <code>optional bytes reserved3 = 14;</code>
     */
    com.google.protobuf.ByteString getReserved3();

    // optional bytes reserved4 = 15;
    /**
     * <code>optional bytes reserved4 = 15;</code>
     */
    boolean hasReserved4();
    /**
     * <code>optional bytes reserved4 = 15;</code>
     */
    com.google.protobuf.ByteString getReserved4();

    // optional bytes proc_starttime = 16;
    /**
     * <code>optional bytes proc_starttime = 16;</code>
     *
     * <pre>
     * 进程启动时间
     * </pre>
     */
    boolean hasProcStarttime();
    /**
     * <code>optional bytes proc_starttime = 16;</code>
     *
     * <pre>
     * 进程启动时间
     * </pre>
     */
    com.google.protobuf.ByteString getProcStarttime();

    // required .sp.LOG_TYPE log_type = 17;
    /**
     * <code>required .sp.LOG_TYPE log_type = 17;</code>
     *
     * <pre>
     * 审计日志类型ID，可能的值：CPS_LOG
     * </pre>
     */
    boolean hasLogType();
    /**
     * <code>required .sp.LOG_TYPE log_type = 17;</code>
     *
     * <pre>
     * 审计日志类型ID，可能的值：CPS_LOG
     * </pre>
     */
    sp.AuditEnum.LOG_TYPE getLogType();
  }
  /**
   * Protobuf type {@code sp.PROXY_LOG}
   *
   * <pre>
   *** CPS上的代理抓取到的网络访问信息，表名：t_proxy_log，其logclass 为固定的值 LC_CPSPROXY
   * </pre>
   */
  public static final class PROXY_LOG extends
      com.google.protobuf.GeneratedMessage
      implements PROXY_LOGOrBuilder {
    // Use PROXY_LOG.newBuilder() to construct.
    private PROXY_LOG(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PROXY_LOG(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PROXY_LOG defaultInstance;
    public static PROXY_LOG getDefaultInstance() {
      return defaultInstance;
    }

    public PROXY_LOG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PROXY_LOG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              logname_ = input.readBytes();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              sip_ = input.readBytes();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              sport_ = input.readUInt32();
              break;
            }
            case 34: {
              bitField0_ |= 0x00000008;
              dip_ = input.readBytes();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              dport_ = input.readUInt32();
              break;
            }
            case 50: {
              bitField0_ |= 0x00000020;
              clientip_ = input.readBytes();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              operSec_ = input.readInt64();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              operMsec_ = input.readInt64();
              break;
            }
            case 74: {
              bitField0_ |= 0x00000100;
              processname_ = input.readBytes();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              processid_ = input.readUInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              reserved0_ = input.readInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              reserved1_ = input.readInt32();
              break;
            }
            case 106: {
              bitField0_ |= 0x00001000;
              reserved2_ = input.readBytes();
              break;
            }
            case 114: {
              bitField0_ |= 0x00002000;
              reserved3_ = input.readBytes();
              break;
            }
            case 122: {
              bitField0_ |= 0x00004000;
              reserved4_ = input.readBytes();
              break;
            }
            case 130: {
              bitField0_ |= 0x00008000;
              procStarttime_ = input.readBytes();
              break;
            }
            case 136: {
              int rawValue = input.readEnum();
              sp.AuditEnum.LOG_TYPE value = sp.AuditEnum.LOG_TYPE.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(17, rawValue);
              } else {
                bitField0_ |= 0x00010000;
                logType_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return Cps.internal_static_sp_PROXY_LOG_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Cps.internal_static_sp_PROXY_LOG_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              PROXY_LOG.class, Builder.class);
    }

    public static com.google.protobuf.Parser<PROXY_LOG> PARSER =
        new com.google.protobuf.AbstractParser<PROXY_LOG>() {
      public PROXY_LOG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PROXY_LOG(input, extensionRegistry);
      }
    };

    @Override
    public com.google.protobuf.Parser<PROXY_LOG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required bytes logname = 1;
    public static final int LOGNAME_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString logname_;
    /**
     * <code>required bytes logname = 1;</code>
     *
     * <pre>
     * 主帐号
     * </pre>
     */
    public boolean hasLogname() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required bytes logname = 1;</code>
     *
     * <pre>
     * 主帐号
     * </pre>
     */
    public com.google.protobuf.ByteString getLogname() {
      return logname_;
    }

    // required bytes sip = 2;
    public static final int SIP_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString sip_;
    /**
     * <code>required bytes sip = 2;</code>
     *
     * <pre>
     * 源IP, 2014-03-06: 兼容IPv6，故只能改为用字符串传送
     * </pre>
     */
    public boolean hasSip() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required bytes sip = 2;</code>
     *
     * <pre>
     * 源IP, 2014-03-06: 兼容IPv6，故只能改为用字符串传送
     * </pre>
     */
    public com.google.protobuf.ByteString getSip() {
      return sip_;
    }

    // required uint32 sport = 3;
    public static final int SPORT_FIELD_NUMBER = 3;
    private int sport_;
    /**
     * <code>required uint32 sport = 3;</code>
     *
     * <pre>
     * 源端口
     * </pre>
     */
    public boolean hasSport() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required uint32 sport = 3;</code>
     *
     * <pre>
     * 源端口
     * </pre>
     */
    public int getSport() {
      return sport_;
    }

    // required bytes dip = 4;
    public static final int DIP_FIELD_NUMBER = 4;
    private com.google.protobuf.ByteString dip_;
    /**
     * <code>required bytes dip = 4;</code>
     *
     * <pre>
     * 目的IP, 2014-03-06: 兼容IPv6，故只能改为用字符串传送
     * </pre>
     */
    public boolean hasDip() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required bytes dip = 4;</code>
     *
     * <pre>
     * 目的IP, 2014-03-06: 兼容IPv6，故只能改为用字符串传送
     * </pre>
     */
    public com.google.protobuf.ByteString getDip() {
      return dip_;
    }

    // required uint32 dport = 5;
    public static final int DPORT_FIELD_NUMBER = 5;
    private int dport_;
    /**
     * <code>required uint32 dport = 5;</code>
     *
     * <pre>
     * 目的端口
     * </pre>
     */
    public boolean hasDport() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required uint32 dport = 5;</code>
     *
     * <pre>
     * 目的端口
     * </pre>
     */
    public int getDport() {
      return dport_;
    }

    // required bytes clientip = 6;
    public static final int CLIENTIP_FIELD_NUMBER = 6;
    private com.google.protobuf.ByteString clientip_;
    /**
     * <code>required bytes clientip = 6;</code>
     *
     * <pre>
     * 客户端真实IP, 2014-03-06: 兼容IPv6，故只能改为用字符串传送
     * </pre>
     */
    public boolean hasClientip() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required bytes clientip = 6;</code>
     *
     * <pre>
     * 客户端真实IP, 2014-03-06: 兼容IPv6，故只能改为用字符串传送
     * </pre>
     */
    public com.google.protobuf.ByteString getClientip() {
      return clientip_;
    }

    // required int64 oper_sec = 7;
    public static final int OPER_SEC_FIELD_NUMBER = 7;
    private long operSec_;
    /**
     * <code>required int64 oper_sec = 7;</code>
     *
     * <pre>
     * 操作时间，秒
     * </pre>
     */
    public boolean hasOperSec() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required int64 oper_sec = 7;</code>
     *
     * <pre>
     * 操作时间，秒
     * </pre>
     */
    public long getOperSec() {
      return operSec_;
    }

    // optional int64 oper_msec = 8;
    public static final int OPER_MSEC_FIELD_NUMBER = 8;
    private long operMsec_;
    /**
     * <code>optional int64 oper_msec = 8;</code>
     *
     * <pre>
     * 操作时间，毫秒
     * </pre>
     */
    public boolean hasOperMsec() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int64 oper_msec = 8;</code>
     *
     * <pre>
     * 操作时间，毫秒
     * </pre>
     */
    public long getOperMsec() {
      return operMsec_;
    }

    // optional bytes processname = 9;
    public static final int PROCESSNAME_FIELD_NUMBER = 9;
    private com.google.protobuf.ByteString processname_;
    /**
     * <code>optional bytes processname = 9;</code>
     *
     * <pre>
     * 进程名称
     * </pre>
     */
    public boolean hasProcessname() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional bytes processname = 9;</code>
     *
     * <pre>
     * 进程名称
     * </pre>
     */
    public com.google.protobuf.ByteString getProcessname() {
      return processname_;
    }

    // optional uint32 processid = 10;
    public static final int PROCESSID_FIELD_NUMBER = 10;
    private int processid_;
    /**
     * <code>optional uint32 processid = 10;</code>
     *
     * <pre>
     * 进程ID
     * </pre>
     */
    public boolean hasProcessid() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional uint32 processid = 10;</code>
     *
     * <pre>
     * 进程ID
     * </pre>
     */
    public int getProcessid() {
      return processid_;
    }

    // optional int32 reserved0 = 11;
    public static final int RESERVED0_FIELD_NUMBER = 11;
    private int reserved0_;
    /**
     * <code>optional int32 reserved0 = 11;</code>
     */
    public boolean hasReserved0() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional int32 reserved0 = 11;</code>
     */
    public int getReserved0() {
      return reserved0_;
    }

    // optional int32 reserved1 = 12;
    public static final int RESERVED1_FIELD_NUMBER = 12;
    private int reserved1_;
    /**
     * <code>optional int32 reserved1 = 12;</code>
     */
    public boolean hasReserved1() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional int32 reserved1 = 12;</code>
     */
    public int getReserved1() {
      return reserved1_;
    }

    // optional bytes reserved2 = 13;
    public static final int RESERVED2_FIELD_NUMBER = 13;
    private com.google.protobuf.ByteString reserved2_;
    /**
     * <code>optional bytes reserved2 = 13;</code>
     */
    public boolean hasReserved2() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional bytes reserved2 = 13;</code>
     */
    public com.google.protobuf.ByteString getReserved2() {
      return reserved2_;
    }

    // optional bytes reserved3 = 14;
    public static final int RESERVED3_FIELD_NUMBER = 14;
    private com.google.protobuf.ByteString reserved3_;
    /**
     * <code>optional bytes reserved3 = 14;</code>
     */
    public boolean hasReserved3() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional bytes reserved3 = 14;</code>
     */
    public com.google.protobuf.ByteString getReserved3() {
      return reserved3_;
    }

    // optional bytes reserved4 = 15;
    public static final int RESERVED4_FIELD_NUMBER = 15;
    private com.google.protobuf.ByteString reserved4_;
    /**
     * <code>optional bytes reserved4 = 15;</code>
     */
    public boolean hasReserved4() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional bytes reserved4 = 15;</code>
     */
    public com.google.protobuf.ByteString getReserved4() {
      return reserved4_;
    }

    // optional bytes proc_starttime = 16;
    public static final int PROC_STARTTIME_FIELD_NUMBER = 16;
    private com.google.protobuf.ByteString procStarttime_;
    /**
     * <code>optional bytes proc_starttime = 16;</code>
     *
     * <pre>
     * 进程启动时间
     * </pre>
     */
    public boolean hasProcStarttime() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional bytes proc_starttime = 16;</code>
     *
     * <pre>
     * 进程启动时间
     * </pre>
     */
    public com.google.protobuf.ByteString getProcStarttime() {
      return procStarttime_;
    }

    // required .sp.LOG_TYPE log_type = 17;
    public static final int LOG_TYPE_FIELD_NUMBER = 17;
    private sp.AuditEnum.LOG_TYPE logType_;
    /**
     * <code>required .sp.LOG_TYPE log_type = 17;</code>
     *
     * <pre>
     * 审计日志类型ID，可能的值：CPS_LOG
     * </pre>
     */
    public boolean hasLogType() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>required .sp.LOG_TYPE log_type = 17;</code>
     *
     * <pre>
     * 审计日志类型ID，可能的值：CPS_LOG
     * </pre>
     */
    public sp.AuditEnum.LOG_TYPE getLogType() {
      return logType_;
    }

    private void initFields() {
      logname_ = com.google.protobuf.ByteString.EMPTY;
      sip_ = com.google.protobuf.ByteString.EMPTY;
      sport_ = 0;
      dip_ = com.google.protobuf.ByteString.EMPTY;
      dport_ = 0;
      clientip_ = com.google.protobuf.ByteString.EMPTY;
      operSec_ = 0L;
      operMsec_ = 0L;
      processname_ = com.google.protobuf.ByteString.EMPTY;
      processid_ = 0;
      reserved0_ = 0;
      reserved1_ = 0;
      reserved2_ = com.google.protobuf.ByteString.EMPTY;
      reserved3_ = com.google.protobuf.ByteString.EMPTY;
      reserved4_ = com.google.protobuf.ByteString.EMPTY;
      procStarttime_ = com.google.protobuf.ByteString.EMPTY;
      logType_ = sp.AuditEnum.LOG_TYPE.LOG_UNKNOWN;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasLogname()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSip()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSport()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDip()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDport()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasClientip()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasOperSec()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasLogType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, logname_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, sip_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, sport_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, dip_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, dport_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBytes(6, clientip_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt64(7, operSec_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt64(8, operMsec_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeBytes(9, processname_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeUInt32(10, processid_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(11, reserved0_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(12, reserved1_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeBytes(13, reserved2_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeBytes(14, reserved3_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeBytes(15, reserved4_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeBytes(16, procStarttime_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeEnum(17, logType_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, logname_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, sip_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, sport_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, dip_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, dport_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(6, clientip_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(7, operSec_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(8, operMsec_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(9, processname_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, processid_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(11, reserved0_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, reserved1_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(13, reserved2_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(14, reserved3_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(15, reserved4_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(16, procStarttime_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(17, logType_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static PROXY_LOG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static PROXY_LOG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static PROXY_LOG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static PROXY_LOG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static PROXY_LOG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static PROXY_LOG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static PROXY_LOG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static PROXY_LOG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static PROXY_LOG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static PROXY_LOG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(PROXY_LOG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code sp.PROXY_LOG}
     *
     * <pre>
     *** CPS上的代理抓取到的网络访问信息，表名：t_proxy_log，其logclass 为固定的值 LC_CPSPROXY
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements PROXY_LOGOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return Cps.internal_static_sp_PROXY_LOG_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return Cps.internal_static_sp_PROXY_LOG_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                PROXY_LOG.class, Builder.class);
      }

      // Construct using sp.Cps.PROXY_LOG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        logname_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        sip_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        sport_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        dip_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        dport_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        clientip_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000020);
        operSec_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000040);
        operMsec_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000080);
        processname_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000100);
        processid_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        reserved0_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        reserved1_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        reserved2_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00001000);
        reserved3_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00002000);
        reserved4_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00004000);
        procStarttime_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00008000);
        logType_ = sp.AuditEnum.LOG_TYPE.LOG_UNKNOWN;
        bitField0_ = (bitField0_ & ~0x00010000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return Cps.internal_static_sp_PROXY_LOG_descriptor;
      }

      public PROXY_LOG getDefaultInstanceForType() {
        return PROXY_LOG.getDefaultInstance();
      }

      public PROXY_LOG build() {
        PROXY_LOG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public PROXY_LOG buildPartial() {
        PROXY_LOG result = new PROXY_LOG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.logname_ = logname_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.sip_ = sip_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.sport_ = sport_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.dip_ = dip_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.dport_ = dport_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.clientip_ = clientip_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.operSec_ = operSec_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.operMsec_ = operMsec_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.processname_ = processname_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.processid_ = processid_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.reserved0_ = reserved0_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.reserved1_ = reserved1_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.reserved2_ = reserved2_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.reserved3_ = reserved3_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.reserved4_ = reserved4_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.procStarttime_ = procStarttime_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.logType_ = logType_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof PROXY_LOG) {
          return mergeFrom((PROXY_LOG)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(PROXY_LOG other) {
        if (other == PROXY_LOG.getDefaultInstance()) return this;
        if (other.hasLogname()) {
          setLogname(other.getLogname());
        }
        if (other.hasSip()) {
          setSip(other.getSip());
        }
        if (other.hasSport()) {
          setSport(other.getSport());
        }
        if (other.hasDip()) {
          setDip(other.getDip());
        }
        if (other.hasDport()) {
          setDport(other.getDport());
        }
        if (other.hasClientip()) {
          setClientip(other.getClientip());
        }
        if (other.hasOperSec()) {
          setOperSec(other.getOperSec());
        }
        if (other.hasOperMsec()) {
          setOperMsec(other.getOperMsec());
        }
        if (other.hasProcessname()) {
          setProcessname(other.getProcessname());
        }
        if (other.hasProcessid()) {
          setProcessid(other.getProcessid());
        }
        if (other.hasReserved0()) {
          setReserved0(other.getReserved0());
        }
        if (other.hasReserved1()) {
          setReserved1(other.getReserved1());
        }
        if (other.hasReserved2()) {
          setReserved2(other.getReserved2());
        }
        if (other.hasReserved3()) {
          setReserved3(other.getReserved3());
        }
        if (other.hasReserved4()) {
          setReserved4(other.getReserved4());
        }
        if (other.hasProcStarttime()) {
          setProcStarttime(other.getProcStarttime());
        }
        if (other.hasLogType()) {
          setLogType(other.getLogType());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasLogname()) {

          return false;
        }
        if (!hasSip()) {

          return false;
        }
        if (!hasSport()) {

          return false;
        }
        if (!hasDip()) {

          return false;
        }
        if (!hasDport()) {

          return false;
        }
        if (!hasClientip()) {

          return false;
        }
        if (!hasOperSec()) {

          return false;
        }
        if (!hasLogType()) {

          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        PROXY_LOG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (PROXY_LOG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required bytes logname = 1;
      private com.google.protobuf.ByteString logname_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>required bytes logname = 1;</code>
       *
       * <pre>
       * 主帐号
       * </pre>
       */
      public boolean hasLogname() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required bytes logname = 1;</code>
       *
       * <pre>
       * 主帐号
       * </pre>
       */
      public com.google.protobuf.ByteString getLogname() {
        return logname_;
      }
      /**
       * <code>required bytes logname = 1;</code>
       *
       * <pre>
       * 主帐号
       * </pre>
       */
      public Builder setLogname(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        logname_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bytes logname = 1;</code>
       *
       * <pre>
       * 主帐号
       * </pre>
       */
      public Builder clearLogname() {
        bitField0_ = (bitField0_ & ~0x00000001);
        logname_ = getDefaultInstance().getLogname();
        onChanged();
        return this;
      }

      // required bytes sip = 2;
      private com.google.protobuf.ByteString sip_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>required bytes sip = 2;</code>
       *
       * <pre>
       * 源IP, 2014-03-06: 兼容IPv6，故只能改为用字符串传送
       * </pre>
       */
      public boolean hasSip() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required bytes sip = 2;</code>
       *
       * <pre>
       * 源IP, 2014-03-06: 兼容IPv6，故只能改为用字符串传送
       * </pre>
       */
      public com.google.protobuf.ByteString getSip() {
        return sip_;
      }
      /**
       * <code>required bytes sip = 2;</code>
       *
       * <pre>
       * 源IP, 2014-03-06: 兼容IPv6，故只能改为用字符串传送
       * </pre>
       */
      public Builder setSip(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        sip_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bytes sip = 2;</code>
       *
       * <pre>
       * 源IP, 2014-03-06: 兼容IPv6，故只能改为用字符串传送
       * </pre>
       */
      public Builder clearSip() {
        bitField0_ = (bitField0_ & ~0x00000002);
        sip_ = getDefaultInstance().getSip();
        onChanged();
        return this;
      }

      // required uint32 sport = 3;
      private int sport_ ;
      /**
       * <code>required uint32 sport = 3;</code>
       *
       * <pre>
       * 源端口
       * </pre>
       */
      public boolean hasSport() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required uint32 sport = 3;</code>
       *
       * <pre>
       * 源端口
       * </pre>
       */
      public int getSport() {
        return sport_;
      }
      /**
       * <code>required uint32 sport = 3;</code>
       *
       * <pre>
       * 源端口
       * </pre>
       */
      public Builder setSport(int value) {
        bitField0_ |= 0x00000004;
        sport_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 sport = 3;</code>
       *
       * <pre>
       * 源端口
       * </pre>
       */
      public Builder clearSport() {
        bitField0_ = (bitField0_ & ~0x00000004);
        sport_ = 0;
        onChanged();
        return this;
      }

      // required bytes dip = 4;
      private com.google.protobuf.ByteString dip_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>required bytes dip = 4;</code>
       *
       * <pre>
       * 目的IP, 2014-03-06: 兼容IPv6，故只能改为用字符串传送
       * </pre>
       */
      public boolean hasDip() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required bytes dip = 4;</code>
       *
       * <pre>
       * 目的IP, 2014-03-06: 兼容IPv6，故只能改为用字符串传送
       * </pre>
       */
      public com.google.protobuf.ByteString getDip() {
        return dip_;
      }
      /**
       * <code>required bytes dip = 4;</code>
       *
       * <pre>
       * 目的IP, 2014-03-06: 兼容IPv6，故只能改为用字符串传送
       * </pre>
       */
      public Builder setDip(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        dip_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bytes dip = 4;</code>
       *
       * <pre>
       * 目的IP, 2014-03-06: 兼容IPv6，故只能改为用字符串传送
       * </pre>
       */
      public Builder clearDip() {
        bitField0_ = (bitField0_ & ~0x00000008);
        dip_ = getDefaultInstance().getDip();
        onChanged();
        return this;
      }

      // required uint32 dport = 5;
      private int dport_ ;
      /**
       * <code>required uint32 dport = 5;</code>
       *
       * <pre>
       * 目的端口
       * </pre>
       */
      public boolean hasDport() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required uint32 dport = 5;</code>
       *
       * <pre>
       * 目的端口
       * </pre>
       */
      public int getDport() {
        return dport_;
      }
      /**
       * <code>required uint32 dport = 5;</code>
       *
       * <pre>
       * 目的端口
       * </pre>
       */
      public Builder setDport(int value) {
        bitField0_ |= 0x00000010;
        dport_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 dport = 5;</code>
       *
       * <pre>
       * 目的端口
       * </pre>
       */
      public Builder clearDport() {
        bitField0_ = (bitField0_ & ~0x00000010);
        dport_ = 0;
        onChanged();
        return this;
      }

      // required bytes clientip = 6;
      private com.google.protobuf.ByteString clientip_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>required bytes clientip = 6;</code>
       *
       * <pre>
       * 客户端真实IP, 2014-03-06: 兼容IPv6，故只能改为用字符串传送
       * </pre>
       */
      public boolean hasClientip() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required bytes clientip = 6;</code>
       *
       * <pre>
       * 客户端真实IP, 2014-03-06: 兼容IPv6，故只能改为用字符串传送
       * </pre>
       */
      public com.google.protobuf.ByteString getClientip() {
        return clientip_;
      }
      /**
       * <code>required bytes clientip = 6;</code>
       *
       * <pre>
       * 客户端真实IP, 2014-03-06: 兼容IPv6，故只能改为用字符串传送
       * </pre>
       */
      public Builder setClientip(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        clientip_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bytes clientip = 6;</code>
       *
       * <pre>
       * 客户端真实IP, 2014-03-06: 兼容IPv6，故只能改为用字符串传送
       * </pre>
       */
      public Builder clearClientip() {
        bitField0_ = (bitField0_ & ~0x00000020);
        clientip_ = getDefaultInstance().getClientip();
        onChanged();
        return this;
      }

      // required int64 oper_sec = 7;
      private long operSec_ ;
      /**
       * <code>required int64 oper_sec = 7;</code>
       *
       * <pre>
       * 操作时间，秒
       * </pre>
       */
      public boolean hasOperSec() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required int64 oper_sec = 7;</code>
       *
       * <pre>
       * 操作时间，秒
       * </pre>
       */
      public long getOperSec() {
        return operSec_;
      }
      /**
       * <code>required int64 oper_sec = 7;</code>
       *
       * <pre>
       * 操作时间，秒
       * </pre>
       */
      public Builder setOperSec(long value) {
        bitField0_ |= 0x00000040;
        operSec_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int64 oper_sec = 7;</code>
       *
       * <pre>
       * 操作时间，秒
       * </pre>
       */
      public Builder clearOperSec() {
        bitField0_ = (bitField0_ & ~0x00000040);
        operSec_ = 0L;
        onChanged();
        return this;
      }

      // optional int64 oper_msec = 8;
      private long operMsec_ ;
      /**
       * <code>optional int64 oper_msec = 8;</code>
       *
       * <pre>
       * 操作时间，毫秒
       * </pre>
       */
      public boolean hasOperMsec() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int64 oper_msec = 8;</code>
       *
       * <pre>
       * 操作时间，毫秒
       * </pre>
       */
      public long getOperMsec() {
        return operMsec_;
      }
      /**
       * <code>optional int64 oper_msec = 8;</code>
       *
       * <pre>
       * 操作时间，毫秒
       * </pre>
       */
      public Builder setOperMsec(long value) {
        bitField0_ |= 0x00000080;
        operMsec_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 oper_msec = 8;</code>
       *
       * <pre>
       * 操作时间，毫秒
       * </pre>
       */
      public Builder clearOperMsec() {
        bitField0_ = (bitField0_ & ~0x00000080);
        operMsec_ = 0L;
        onChanged();
        return this;
      }

      // optional bytes processname = 9;
      private com.google.protobuf.ByteString processname_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes processname = 9;</code>
       *
       * <pre>
       * 进程名称
       * </pre>
       */
      public boolean hasProcessname() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional bytes processname = 9;</code>
       *
       * <pre>
       * 进程名称
       * </pre>
       */
      public com.google.protobuf.ByteString getProcessname() {
        return processname_;
      }
      /**
       * <code>optional bytes processname = 9;</code>
       *
       * <pre>
       * 进程名称
       * </pre>
       */
      public Builder setProcessname(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000100;
        processname_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes processname = 9;</code>
       *
       * <pre>
       * 进程名称
       * </pre>
       */
      public Builder clearProcessname() {
        bitField0_ = (bitField0_ & ~0x00000100);
        processname_ = getDefaultInstance().getProcessname();
        onChanged();
        return this;
      }

      // optional uint32 processid = 10;
      private int processid_ ;
      /**
       * <code>optional uint32 processid = 10;</code>
       *
       * <pre>
       * 进程ID
       * </pre>
       */
      public boolean hasProcessid() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional uint32 processid = 10;</code>
       *
       * <pre>
       * 进程ID
       * </pre>
       */
      public int getProcessid() {
        return processid_;
      }
      /**
       * <code>optional uint32 processid = 10;</code>
       *
       * <pre>
       * 进程ID
       * </pre>
       */
      public Builder setProcessid(int value) {
        bitField0_ |= 0x00000200;
        processid_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 processid = 10;</code>
       *
       * <pre>
       * 进程ID
       * </pre>
       */
      public Builder clearProcessid() {
        bitField0_ = (bitField0_ & ~0x00000200);
        processid_ = 0;
        onChanged();
        return this;
      }

      // optional int32 reserved0 = 11;
      private int reserved0_ ;
      /**
       * <code>optional int32 reserved0 = 11;</code>
       */
      public boolean hasReserved0() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional int32 reserved0 = 11;</code>
       */
      public int getReserved0() {
        return reserved0_;
      }
      /**
       * <code>optional int32 reserved0 = 11;</code>
       */
      public Builder setReserved0(int value) {
        bitField0_ |= 0x00000400;
        reserved0_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 reserved0 = 11;</code>
       */
      public Builder clearReserved0() {
        bitField0_ = (bitField0_ & ~0x00000400);
        reserved0_ = 0;
        onChanged();
        return this;
      }

      // optional int32 reserved1 = 12;
      private int reserved1_ ;
      /**
       * <code>optional int32 reserved1 = 12;</code>
       */
      public boolean hasReserved1() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional int32 reserved1 = 12;</code>
       */
      public int getReserved1() {
        return reserved1_;
      }
      /**
       * <code>optional int32 reserved1 = 12;</code>
       */
      public Builder setReserved1(int value) {
        bitField0_ |= 0x00000800;
        reserved1_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 reserved1 = 12;</code>
       */
      public Builder clearReserved1() {
        bitField0_ = (bitField0_ & ~0x00000800);
        reserved1_ = 0;
        onChanged();
        return this;
      }

      // optional bytes reserved2 = 13;
      private com.google.protobuf.ByteString reserved2_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes reserved2 = 13;</code>
       */
      public boolean hasReserved2() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional bytes reserved2 = 13;</code>
       */
      public com.google.protobuf.ByteString getReserved2() {
        return reserved2_;
      }
      /**
       * <code>optional bytes reserved2 = 13;</code>
       */
      public Builder setReserved2(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00001000;
        reserved2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes reserved2 = 13;</code>
       */
      public Builder clearReserved2() {
        bitField0_ = (bitField0_ & ~0x00001000);
        reserved2_ = getDefaultInstance().getReserved2();
        onChanged();
        return this;
      }

      // optional bytes reserved3 = 14;
      private com.google.protobuf.ByteString reserved3_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes reserved3 = 14;</code>
       */
      public boolean hasReserved3() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional bytes reserved3 = 14;</code>
       */
      public com.google.protobuf.ByteString getReserved3() {
        return reserved3_;
      }
      /**
       * <code>optional bytes reserved3 = 14;</code>
       */
      public Builder setReserved3(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00002000;
        reserved3_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes reserved3 = 14;</code>
       */
      public Builder clearReserved3() {
        bitField0_ = (bitField0_ & ~0x00002000);
        reserved3_ = getDefaultInstance().getReserved3();
        onChanged();
        return this;
      }

      // optional bytes reserved4 = 15;
      private com.google.protobuf.ByteString reserved4_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes reserved4 = 15;</code>
       */
      public boolean hasReserved4() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional bytes reserved4 = 15;</code>
       */
      public com.google.protobuf.ByteString getReserved4() {
        return reserved4_;
      }
      /**
       * <code>optional bytes reserved4 = 15;</code>
       */
      public Builder setReserved4(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00004000;
        reserved4_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes reserved4 = 15;</code>
       */
      public Builder clearReserved4() {
        bitField0_ = (bitField0_ & ~0x00004000);
        reserved4_ = getDefaultInstance().getReserved4();
        onChanged();
        return this;
      }

      // optional bytes proc_starttime = 16;
      private com.google.protobuf.ByteString procStarttime_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes proc_starttime = 16;</code>
       *
       * <pre>
       * 进程启动时间
       * </pre>
       */
      public boolean hasProcStarttime() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional bytes proc_starttime = 16;</code>
       *
       * <pre>
       * 进程启动时间
       * </pre>
       */
      public com.google.protobuf.ByteString getProcStarttime() {
        return procStarttime_;
      }
      /**
       * <code>optional bytes proc_starttime = 16;</code>
       *
       * <pre>
       * 进程启动时间
       * </pre>
       */
      public Builder setProcStarttime(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00008000;
        procStarttime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes proc_starttime = 16;</code>
       *
       * <pre>
       * 进程启动时间
       * </pre>
       */
      public Builder clearProcStarttime() {
        bitField0_ = (bitField0_ & ~0x00008000);
        procStarttime_ = getDefaultInstance().getProcStarttime();
        onChanged();
        return this;
      }

      // required .sp.LOG_TYPE log_type = 17;
      private sp.AuditEnum.LOG_TYPE logType_ = sp.AuditEnum.LOG_TYPE.LOG_UNKNOWN;
      /**
       * <code>required .sp.LOG_TYPE log_type = 17;</code>
       *
       * <pre>
       * 审计日志类型ID，可能的值：CPS_LOG
       * </pre>
       */
      public boolean hasLogType() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>required .sp.LOG_TYPE log_type = 17;</code>
       *
       * <pre>
       * 审计日志类型ID，可能的值：CPS_LOG
       * </pre>
       */
      public sp.AuditEnum.LOG_TYPE getLogType() {
        return logType_;
      }
      /**
       * <code>required .sp.LOG_TYPE log_type = 17;</code>
       *
       * <pre>
       * 审计日志类型ID，可能的值：CPS_LOG
       * </pre>
       */
      public Builder setLogType(sp.AuditEnum.LOG_TYPE value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00010000;
        logType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .sp.LOG_TYPE log_type = 17;</code>
       *
       * <pre>
       * 审计日志类型ID，可能的值：CPS_LOG
       * </pre>
       */
      public Builder clearLogType() {
        bitField0_ = (bitField0_ & ~0x00010000);
        logType_ = sp.AuditEnum.LOG_TYPE.LOG_UNKNOWN;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:sp.PROXY_LOG)
    }

    static {
      defaultInstance = new PROXY_LOG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:sp.PROXY_LOG)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_sp_PROXY_LOG_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_sp_PROXY_LOG_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    String[] descriptorData = {
      "\n\tcps.proto\022\002sp\032\020audit_enum.proto\"\312\002\n\tPR" +
      "OXY_LOG\022\017\n\007logname\030\001 \002(\014\022\013\n\003sip\030\002 \002(\014\022\r\n" +
      "\005sport\030\003 \002(\r\022\013\n\003dip\030\004 \002(\014\022\r\n\005dport\030\005 \002(\r" +
      "\022\020\n\010clientip\030\006 \002(\014\022\020\n\010oper_sec\030\007 \002(\003\022\021\n\t" +
      "oper_msec\030\010 \001(\003\022\023\n\013processname\030\t \001(\014\022\021\n\t" +
      "processid\030\n \001(\r\022\021\n\treserved0\030\013 \001(\005\022\021\n\tre" +
      "served1\030\014 \001(\005\022\021\n\treserved2\030\r \001(\014\022\021\n\trese" +
      "rved3\030\016 \001(\014\022\021\n\treserved4\030\017 \001(\014\022\026\n\016proc_s" +
      "tarttime\030\020 \001(\014\022\036\n\010log_type\030\021 \002(\0162\014.sp.LO" +
      "G_TYPE"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_sp_PROXY_LOG_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_sp_PROXY_LOG_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_sp_PROXY_LOG_descriptor,
              new String[] { "Logname", "Sip", "Sport", "Dip", "Dport", "Clientip", "OperSec", "OperMsec", "Processname", "Processid", "Reserved0", "Reserved1", "Reserved2", "Reserved3", "Reserved4", "ProcStarttime", "LogType", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          sp.AuditEnum.getDescriptor(),
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
