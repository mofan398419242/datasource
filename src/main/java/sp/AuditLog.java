// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: audit_log.proto

package sp;

public final class AuditLog {
    private AuditLog() {
    }

    public static void registerAllExtensions(
            com.google.protobuf.ExtensionRegistry registry) {
    }

    public interface T_ALARM_LOGOrBuilder
            extends com.google.protobuf.MessageOrBuilder {

        // optional int32 alarm_id = 1;

        /**
         * <code>optional int32 alarm_id = 1;</code>
         * <p>
         * <pre>
         * alarm method id
         * </pre>
         */
        boolean hasAlarmId();

        /**
         * <code>optional int32 alarm_id = 1;</code>
         * <p>
         * <pre>
         * alarm method id
         * </pre>
         */
        int getAlarmId();

        // optional bytes alarm_name = 2;

        /**
         * <code>optional bytes alarm_name = 2;</code>
         * <p>
         * <pre>
         * alarm method name
         * </pre>
         */
        boolean hasAlarmName();

        /**
         * <code>optional bytes alarm_name = 2;</code>
         * <p>
         * <pre>
         * alarm method name
         * </pre>
         */
        com.google.protobuf.ByteString getAlarmName();

        // optional bytes content = 3;

        /**
         * <code>optional bytes content = 3;</code>
         * <p>
         * <pre>
         * alarm content
         * </pre>
         */
        boolean hasContent();

        /**
         * <code>optional bytes content = 3;</code>
         * <p>
         * <pre>
         * alarm content
         * </pre>
         */
        com.google.protobuf.ByteString getContent();

        // optional int32 solution = 4;

        /**
         * <code>optional int32 solution = 4;</code>
         * <p>
         * <pre>
         * alarm solution way
         * </pre>
         */
        boolean hasSolution();

        /**
         * <code>optional int32 solution = 4;</code>
         * <p>
         * <pre>
         * alarm solution way
         * </pre>
         */
        int getSolution();

        // optional bytes mail = 5;

        /**
         * <code>optional bytes mail = 5;</code>
         */
        boolean hasMail();

        /**
         * <code>optional bytes mail = 5;</code>
         */
        com.google.protobuf.ByteString getMail();

        // optional bytes phone = 6;

        /**
         * <code>optional bytes phone = 6;</code>
         */
        boolean hasPhone();

        /**
         * <code>optional bytes phone = 6;</code>
         */
        com.google.protobuf.ByteString getPhone();

        // optional bytes syslog_ip = 7;

        /**
         * <code>optional bytes syslog_ip = 7;</code>
         */
        boolean hasSyslogIp();

        /**
         * <code>optional bytes syslog_ip = 7;</code>
         */
        com.google.protobuf.ByteString getSyslogIp();

        // optional bytes relay_ip = 8;

        /**
         * <code>optional bytes relay_ip = 8;</code>
         */
        boolean hasRelayIp();

        /**
         * <code>optional bytes relay_ip = 8;</code>
         */
        com.google.protobuf.ByteString getRelayIp();
    }

    /**
     * Protobuf type {@code sp.T_ALARM_LOG}
     */
    public static final class T_ALARM_LOG extends
            com.google.protobuf.GeneratedMessage
            implements T_ALARM_LOGOrBuilder {
        // Use T_ALARM_LOG.newBuilder() to construct.
        private T_ALARM_LOG(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private T_ALARM_LOG(boolean noInit) {
            this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private static final T_ALARM_LOG defaultInstance;

        public static T_ALARM_LOG getDefaultInstance() {
            return defaultInstance;
        }

        public T_ALARM_LOG getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }

        private T_ALARM_LOG(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {
                            bitField0_ |= 0x00000001;
                            alarmId_ = input.readInt32();
                            break;
                        }
                        case 18: {
                            bitField0_ |= 0x00000002;
                            alarmName_ = input.readBytes();
                            break;
                        }
                        case 26: {
                            bitField0_ |= 0x00000004;
                            content_ = input.readBytes();
                            break;
                        }
                        case 32: {
                            bitField0_ |= 0x00000008;
                            solution_ = input.readInt32();
                            break;
                        }
                        case 42: {
                            bitField0_ |= 0x00000010;
                            mail_ = input.readBytes();
                            break;
                        }
                        case 50: {
                            bitField0_ |= 0x00000020;
                            phone_ = input.readBytes();
                            break;
                        }
                        case 58: {
                            bitField0_ |= 0x00000040;
                            syslogIp_ = input.readBytes();
                            break;
                        }
                        case 66: {
                            bitField0_ |= 0x00000080;
                            relayIp_ = input.readBytes();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return sp.AuditLog.internal_static_sp_T_ALARM_LOG_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return sp.AuditLog.internal_static_sp_T_ALARM_LOG_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            sp.AuditLog.T_ALARM_LOG.class, sp.AuditLog.T_ALARM_LOG.Builder.class);
        }

        public static com.google.protobuf.Parser<T_ALARM_LOG> PARSER =
                new com.google.protobuf.AbstractParser<T_ALARM_LOG>() {
                    public T_ALARM_LOG parsePartialFrom(
                            com.google.protobuf.CodedInputStream input,
                            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                            throws com.google.protobuf.InvalidProtocolBufferException {
                        return new T_ALARM_LOG(input, extensionRegistry);
                    }
                };

        @java.lang.Override
        public com.google.protobuf.Parser<T_ALARM_LOG> getParserForType() {
            return PARSER;
        }

        private int bitField0_;
        // optional int32 alarm_id = 1;
        public static final int ALARM_ID_FIELD_NUMBER = 1;
        private int alarmId_;

        /**
         * <code>optional int32 alarm_id = 1;</code>
         * <p>
         * <pre>
         * alarm method id
         * </pre>
         */
        public boolean hasAlarmId() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>optional int32 alarm_id = 1;</code>
         * <p>
         * <pre>
         * alarm method id
         * </pre>
         */
        public int getAlarmId() {
            return alarmId_;
        }

        // optional bytes alarm_name = 2;
        public static final int ALARM_NAME_FIELD_NUMBER = 2;
        private com.google.protobuf.ByteString alarmName_;

        /**
         * <code>optional bytes alarm_name = 2;</code>
         * <p>
         * <pre>
         * alarm method name
         * </pre>
         */
        public boolean hasAlarmName() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>optional bytes alarm_name = 2;</code>
         * <p>
         * <pre>
         * alarm method name
         * </pre>
         */
        public com.google.protobuf.ByteString getAlarmName() {
            return alarmName_;
        }

        // optional bytes content = 3;
        public static final int CONTENT_FIELD_NUMBER = 3;
        private com.google.protobuf.ByteString content_;

        /**
         * <code>optional bytes content = 3;</code>
         * <p>
         * <pre>
         * alarm content
         * </pre>
         */
        public boolean hasContent() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }

        /**
         * <code>optional bytes content = 3;</code>
         * <p>
         * <pre>
         * alarm content
         * </pre>
         */
        public com.google.protobuf.ByteString getContent() {
            return content_;
        }

        // optional int32 solution = 4;
        public static final int SOLUTION_FIELD_NUMBER = 4;
        private int solution_;

        /**
         * <code>optional int32 solution = 4;</code>
         * <p>
         * <pre>
         * alarm solution way
         * </pre>
         */
        public boolean hasSolution() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
        }

        /**
         * <code>optional int32 solution = 4;</code>
         * <p>
         * <pre>
         * alarm solution way
         * </pre>
         */
        public int getSolution() {
            return solution_;
        }

        // optional bytes mail = 5;
        public static final int MAIL_FIELD_NUMBER = 5;
        private com.google.protobuf.ByteString mail_;

        /**
         * <code>optional bytes mail = 5;</code>
         */
        public boolean hasMail() {
            return ((bitField0_ & 0x00000010) == 0x00000010);
        }

        /**
         * <code>optional bytes mail = 5;</code>
         */
        public com.google.protobuf.ByteString getMail() {
            return mail_;
        }

        // optional bytes phone = 6;
        public static final int PHONE_FIELD_NUMBER = 6;
        private com.google.protobuf.ByteString phone_;

        /**
         * <code>optional bytes phone = 6;</code>
         */
        public boolean hasPhone() {
            return ((bitField0_ & 0x00000020) == 0x00000020);
        }

        /**
         * <code>optional bytes phone = 6;</code>
         */
        public com.google.protobuf.ByteString getPhone() {
            return phone_;
        }

        // optional bytes syslog_ip = 7;
        public static final int SYSLOG_IP_FIELD_NUMBER = 7;
        private com.google.protobuf.ByteString syslogIp_;

        /**
         * <code>optional bytes syslog_ip = 7;</code>
         */
        public boolean hasSyslogIp() {
            return ((bitField0_ & 0x00000040) == 0x00000040);
        }

        /**
         * <code>optional bytes syslog_ip = 7;</code>
         */
        public com.google.protobuf.ByteString getSyslogIp() {
            return syslogIp_;
        }

        // optional bytes relay_ip = 8;
        public static final int RELAY_IP_FIELD_NUMBER = 8;
        private com.google.protobuf.ByteString relayIp_;

        /**
         * <code>optional bytes relay_ip = 8;</code>
         */
        public boolean hasRelayIp() {
            return ((bitField0_ & 0x00000080) == 0x00000080);
        }

        /**
         * <code>optional bytes relay_ip = 8;</code>
         */
        public com.google.protobuf.ByteString getRelayIp() {
            return relayIp_;
        }

        private void initFields() {
            alarmId_ = 0;
            alarmName_ = com.google.protobuf.ByteString.EMPTY;
            content_ = com.google.protobuf.ByteString.EMPTY;
            solution_ = 0;
            mail_ = com.google.protobuf.ByteString.EMPTY;
            phone_ = com.google.protobuf.ByteString.EMPTY;
            syslogIp_ = com.google.protobuf.ByteString.EMPTY;
            relayIp_ = com.google.protobuf.ByteString.EMPTY;
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized != -1) return isInitialized == 1;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeInt32(1, alarmId_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeBytes(2, alarmName_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeBytes(3, content_);
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                output.writeInt32(4, solution_);
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                output.writeBytes(5, mail_);
            }
            if (((bitField0_ & 0x00000020) == 0x00000020)) {
                output.writeBytes(6, phone_);
            }
            if (((bitField0_ & 0x00000040) == 0x00000040)) {
                output.writeBytes(7, syslogIp_);
            }
            if (((bitField0_ & 0x00000080) == 0x00000080)) {
                output.writeBytes(8, relayIp_);
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(1, alarmId_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(2, alarmName_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(3, content_);
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(4, solution_);
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(5, mail_);
            }
            if (((bitField0_ & 0x00000020) == 0x00000020)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(6, phone_);
            }
            if (((bitField0_ & 0x00000040) == 0x00000040)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(7, syslogIp_);
            }
            if (((bitField0_ & 0x00000080) == 0x00000080)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(8, relayIp_);
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        protected java.lang.Object writeReplace()
                throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static sp.AuditLog.T_ALARM_LOG parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static sp.AuditLog.T_ALARM_LOG parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static sp.AuditLog.T_ALARM_LOG parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static sp.AuditLog.T_ALARM_LOG parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static sp.AuditLog.T_ALARM_LOG parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static sp.AuditLog.T_ALARM_LOG parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static sp.AuditLog.T_ALARM_LOG parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static sp.AuditLog.T_ALARM_LOG parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static sp.AuditLog.T_ALARM_LOG parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static sp.AuditLog.T_ALARM_LOG parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(sp.AuditLog.T_ALARM_LOG prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code sp.T_ALARM_LOG}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessage.Builder<Builder>
                implements sp.AuditLog.T_ALARM_LOGOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return sp.AuditLog.internal_static_sp_T_ALARM_LOG_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return sp.AuditLog.internal_static_sp_T_ALARM_LOG_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                sp.AuditLog.T_ALARM_LOG.class, sp.AuditLog.T_ALARM_LOG.Builder.class);
            }

            // Construct using sp.AuditLog.T_ALARM_LOG.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                alarmId_ = 0;
                bitField0_ = (bitField0_ & ~0x00000001);
                alarmName_ = com.google.protobuf.ByteString.EMPTY;
                bitField0_ = (bitField0_ & ~0x00000002);
                content_ = com.google.protobuf.ByteString.EMPTY;
                bitField0_ = (bitField0_ & ~0x00000004);
                solution_ = 0;
                bitField0_ = (bitField0_ & ~0x00000008);
                mail_ = com.google.protobuf.ByteString.EMPTY;
                bitField0_ = (bitField0_ & ~0x00000010);
                phone_ = com.google.protobuf.ByteString.EMPTY;
                bitField0_ = (bitField0_ & ~0x00000020);
                syslogIp_ = com.google.protobuf.ByteString.EMPTY;
                bitField0_ = (bitField0_ & ~0x00000040);
                relayIp_ = com.google.protobuf.ByteString.EMPTY;
                bitField0_ = (bitField0_ & ~0x00000080);
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return sp.AuditLog.internal_static_sp_T_ALARM_LOG_descriptor;
            }

            public sp.AuditLog.T_ALARM_LOG getDefaultInstanceForType() {
                return sp.AuditLog.T_ALARM_LOG.getDefaultInstance();
            }

            public sp.AuditLog.T_ALARM_LOG build() {
                sp.AuditLog.T_ALARM_LOG result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public sp.AuditLog.T_ALARM_LOG buildPartial() {
                sp.AuditLog.T_ALARM_LOG result = new sp.AuditLog.T_ALARM_LOG(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.alarmId_ = alarmId_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                result.alarmName_ = alarmName_;
                if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                    to_bitField0_ |= 0x00000004;
                }
                result.content_ = content_;
                if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
                    to_bitField0_ |= 0x00000008;
                }
                result.solution_ = solution_;
                if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
                    to_bitField0_ |= 0x00000010;
                }
                result.mail_ = mail_;
                if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
                    to_bitField0_ |= 0x00000020;
                }
                result.phone_ = phone_;
                if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
                    to_bitField0_ |= 0x00000040;
                }
                result.syslogIp_ = syslogIp_;
                if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
                    to_bitField0_ |= 0x00000080;
                }
                result.relayIp_ = relayIp_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof sp.AuditLog.T_ALARM_LOG) {
                    return mergeFrom((sp.AuditLog.T_ALARM_LOG) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(sp.AuditLog.T_ALARM_LOG other) {
                if (other == sp.AuditLog.T_ALARM_LOG.getDefaultInstance()) return this;
                if (other.hasAlarmId()) {
                    setAlarmId(other.getAlarmId());
                }
                if (other.hasAlarmName()) {
                    setAlarmName(other.getAlarmName());
                }
                if (other.hasContent()) {
                    setContent(other.getContent());
                }
                if (other.hasSolution()) {
                    setSolution(other.getSolution());
                }
                if (other.hasMail()) {
                    setMail(other.getMail());
                }
                if (other.hasPhone()) {
                    setPhone(other.getPhone());
                }
                if (other.hasSyslogIp()) {
                    setSyslogIp(other.getSyslogIp());
                }
                if (other.hasRelayIp()) {
                    setRelayIp(other.getRelayIp());
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                sp.AuditLog.T_ALARM_LOG parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (sp.AuditLog.T_ALARM_LOG) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            // optional int32 alarm_id = 1;
            private int alarmId_;

            /**
             * <code>optional int32 alarm_id = 1;</code>
             * <p>
             * <pre>
             * alarm method id
             * </pre>
             */
            public boolean hasAlarmId() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>optional int32 alarm_id = 1;</code>
             * <p>
             * <pre>
             * alarm method id
             * </pre>
             */
            public int getAlarmId() {
                return alarmId_;
            }

            /**
             * <code>optional int32 alarm_id = 1;</code>
             * <p>
             * <pre>
             * alarm method id
             * </pre>
             */
            public Builder setAlarmId(int value) {
                bitField0_ |= 0x00000001;
                alarmId_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 alarm_id = 1;</code>
             * <p>
             * <pre>
             * alarm method id
             * </pre>
             */
            public Builder clearAlarmId() {
                bitField0_ = (bitField0_ & ~0x00000001);
                alarmId_ = 0;
                onChanged();
                return this;
            }

            // optional bytes alarm_name = 2;
            private com.google.protobuf.ByteString alarmName_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes alarm_name = 2;</code>
             * <p>
             * <pre>
             * alarm method name
             * </pre>
             */
            public boolean hasAlarmName() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>optional bytes alarm_name = 2;</code>
             * <p>
             * <pre>
             * alarm method name
             * </pre>
             */
            public com.google.protobuf.ByteString getAlarmName() {
                return alarmName_;
            }

            /**
             * <code>optional bytes alarm_name = 2;</code>
             * <p>
             * <pre>
             * alarm method name
             * </pre>
             */
            public Builder setAlarmName(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000002;
                alarmName_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes alarm_name = 2;</code>
             * <p>
             * <pre>
             * alarm method name
             * </pre>
             */
            public Builder clearAlarmName() {
                bitField0_ = (bitField0_ & ~0x00000002);
                alarmName_ = getDefaultInstance().getAlarmName();
                onChanged();
                return this;
            }

            // optional bytes content = 3;
            private com.google.protobuf.ByteString content_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes content = 3;</code>
             * <p>
             * <pre>
             * alarm content
             * </pre>
             */
            public boolean hasContent() {
                return ((bitField0_ & 0x00000004) == 0x00000004);
            }

            /**
             * <code>optional bytes content = 3;</code>
             * <p>
             * <pre>
             * alarm content
             * </pre>
             */
            public com.google.protobuf.ByteString getContent() {
                return content_;
            }

            /**
             * <code>optional bytes content = 3;</code>
             * <p>
             * <pre>
             * alarm content
             * </pre>
             */
            public Builder setContent(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000004;
                content_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes content = 3;</code>
             * <p>
             * <pre>
             * alarm content
             * </pre>
             */
            public Builder clearContent() {
                bitField0_ = (bitField0_ & ~0x00000004);
                content_ = getDefaultInstance().getContent();
                onChanged();
                return this;
            }

            // optional int32 solution = 4;
            private int solution_;

            /**
             * <code>optional int32 solution = 4;</code>
             * <p>
             * <pre>
             * alarm solution way
             * </pre>
             */
            public boolean hasSolution() {
                return ((bitField0_ & 0x00000008) == 0x00000008);
            }

            /**
             * <code>optional int32 solution = 4;</code>
             * <p>
             * <pre>
             * alarm solution way
             * </pre>
             */
            public int getSolution() {
                return solution_;
            }

            /**
             * <code>optional int32 solution = 4;</code>
             * <p>
             * <pre>
             * alarm solution way
             * </pre>
             */
            public Builder setSolution(int value) {
                bitField0_ |= 0x00000008;
                solution_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 solution = 4;</code>
             * <p>
             * <pre>
             * alarm solution way
             * </pre>
             */
            public Builder clearSolution() {
                bitField0_ = (bitField0_ & ~0x00000008);
                solution_ = 0;
                onChanged();
                return this;
            }

            // optional bytes mail = 5;
            private com.google.protobuf.ByteString mail_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes mail = 5;</code>
             */
            public boolean hasMail() {
                return ((bitField0_ & 0x00000010) == 0x00000010);
            }

            /**
             * <code>optional bytes mail = 5;</code>
             */
            public com.google.protobuf.ByteString getMail() {
                return mail_;
            }

            /**
             * <code>optional bytes mail = 5;</code>
             */
            public Builder setMail(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000010;
                mail_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes mail = 5;</code>
             */
            public Builder clearMail() {
                bitField0_ = (bitField0_ & ~0x00000010);
                mail_ = getDefaultInstance().getMail();
                onChanged();
                return this;
            }

            // optional bytes phone = 6;
            private com.google.protobuf.ByteString phone_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes phone = 6;</code>
             */
            public boolean hasPhone() {
                return ((bitField0_ & 0x00000020) == 0x00000020);
            }

            /**
             * <code>optional bytes phone = 6;</code>
             */
            public com.google.protobuf.ByteString getPhone() {
                return phone_;
            }

            /**
             * <code>optional bytes phone = 6;</code>
             */
            public Builder setPhone(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000020;
                phone_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes phone = 6;</code>
             */
            public Builder clearPhone() {
                bitField0_ = (bitField0_ & ~0x00000020);
                phone_ = getDefaultInstance().getPhone();
                onChanged();
                return this;
            }

            // optional bytes syslog_ip = 7;
            private com.google.protobuf.ByteString syslogIp_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes syslog_ip = 7;</code>
             */
            public boolean hasSyslogIp() {
                return ((bitField0_ & 0x00000040) == 0x00000040);
            }

            /**
             * <code>optional bytes syslog_ip = 7;</code>
             */
            public com.google.protobuf.ByteString getSyslogIp() {
                return syslogIp_;
            }

            /**
             * <code>optional bytes syslog_ip = 7;</code>
             */
            public Builder setSyslogIp(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000040;
                syslogIp_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes syslog_ip = 7;</code>
             */
            public Builder clearSyslogIp() {
                bitField0_ = (bitField0_ & ~0x00000040);
                syslogIp_ = getDefaultInstance().getSyslogIp();
                onChanged();
                return this;
            }

            // optional bytes relay_ip = 8;
            private com.google.protobuf.ByteString relayIp_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes relay_ip = 8;</code>
             */
            public boolean hasRelayIp() {
                return ((bitField0_ & 0x00000080) == 0x00000080);
            }

            /**
             * <code>optional bytes relay_ip = 8;</code>
             */
            public com.google.protobuf.ByteString getRelayIp() {
                return relayIp_;
            }

            /**
             * <code>optional bytes relay_ip = 8;</code>
             */
            public Builder setRelayIp(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000080;
                relayIp_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes relay_ip = 8;</code>
             */
            public Builder clearRelayIp() {
                bitField0_ = (bitField0_ & ~0x00000080);
                relayIp_ = getDefaultInstance().getRelayIp();
                onChanged();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:sp.T_ALARM_LOG)
        }

        static {
            defaultInstance = new T_ALARM_LOG(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:sp.T_ALARM_LOG)
    }

    public interface T_AUDIT_LOGOrBuilder
            extends com.google.protobuf.MessageOrBuilder {

        // required bytes sid = 1;

        /**
         * <code>required bytes sid = 1;</code>
         * <p>
         * <pre>
         * 每条日志的UUID，主键，由引擎或4A产生
         * </pre>
         */
        boolean hasSid();

        /**
         * <code>required bytes sid = 1;</code>
         * <p>
         * <pre>
         * 每条日志的UUID，主键，由引擎或4A产生
         * </pre>
         */
        com.google.protobuf.ByteString getSid();

        // optional .sp.T_ALARM_LOG alarm = 2;

        /**
         * <code>optional .sp.T_ALARM_LOG alarm = 2;</code>
         * <p>
         * <pre>
         * 告警信息，ABA告警时补全
         * </pre>
         */
        boolean hasAlarm();

        /**
         * <code>optional .sp.T_ALARM_LOG alarm = 2;</code>
         * <p>
         * <pre>
         * 告警信息，ABA告警时补全
         * </pre>
         */
        sp.AuditLog.T_ALARM_LOG getAlarm();

        /**
         * <code>optional .sp.T_ALARM_LOG alarm = 2;</code>
         * <p>
         * <pre>
         * 告警信息，ABA告警时补全
         * </pre>
         */
        sp.AuditLog.T_ALARM_LOGOrBuilder getAlarmOrBuilder();

        // optional int32 mark = 8;

        /**
         * <code>optional int32 mark = 8;</code>
         * <p>
         * <pre>
         * 是否合法，特指合法绕行或非法绕行，特用于 ABA
         * </pre>
         */
        boolean hasMark();

        /**
         * <code>optional int32 mark = 8;</code>
         * <p>
         * <pre>
         * 是否合法，特指合法绕行或非法绕行，特用于 ABA
         * </pre>
         */
        int getMark();

        // optional uint32 seq = 9;

        /**
         * <code>optional uint32 seq = 9;</code>
         * <p>
         * <pre>
         * 执行顺序，与 t_oper 表中的 seq 进行对应，用作倒推查询
         * </pre>
         */
        boolean hasSeq();

        /**
         * <code>optional uint32 seq = 9;</code>
         * <p>
         * <pre>
         * 执行顺序，与 t_oper 表中的 seq 进行对应，用作倒推查询
         * </pre>
         */
        int getSeq();

        // optional bytes sessionid = 10;

        /**
         * <code>optional bytes sessionid = 10;</code>
         * <p>
         * <pre>
         * 用户会话ID，指登录4A时产生的会话
         * </pre>
         */
        boolean hasSessionid();

        /**
         * <code>optional bytes sessionid = 10;</code>
         * <p>
         * <pre>
         * 用户会话ID，指登录4A时产生的会话
         * </pre>
         */
        com.google.protobuf.ByteString getSessionid();

        // optional int32 ana_policy_id = 11;

        /**
         * <code>optional int32 ana_policy_id = 11;</code>
         * <p>
         * <pre>
         * 分析策略ID，经过ABA分析策略处理之后，才会有该值，特用于 ABA
         * </pre>
         */
        boolean hasAnaPolicyId();

        /**
         * <code>optional int32 ana_policy_id = 11;</code>
         * <p>
         * <pre>
         * 分析策略ID，经过ABA分析策略处理之后，才会有该值，特用于 ABA
         * </pre>
         */
        int getAnaPolicyId();

        // required .sp.LOG_TYPE log_type = 12;

        /**
         * <code>required .sp.LOG_TYPE log_type = 12;</code>
         * <p>
         * <pre>
         * 审计日志类型ID，可能取值：LOGON、LOGOFF、FILL_LOG、USER_OPER_LOG、JDBC_LOG、NBA_OPER等
         * </pre>
         */
        boolean hasLogType();

        /**
         * <code>required .sp.LOG_TYPE log_type = 12;</code>
         * <p>
         * <pre>
         * 审计日志类型ID，可能取值：LOGON、LOGOFF、FILL_LOG、USER_OPER_LOG、JDBC_LOG、NBA_OPER等
         * </pre>
         */
        sp.AuditEnum.LOG_TYPE getLogType();

        // optional int32 audit_logtypeid = 13;

        /**
         * <code>optional int32 audit_logtypeid = 13;</code>
         * <p>
         * <pre>
         * 应用ID
         * </pre>
         */
        boolean hasAuditLogtypeid();

        /**
         * <code>optional int32 audit_logtypeid = 13;</code>
         * <p>
         * <pre>
         * 应用ID
         * </pre>
         */
        int getAuditLogtypeid();

        // optional bytes audit_logtypename = 14;

        /**
         * <code>optional bytes audit_logtypename = 14;</code>
         * <p>
         * <pre>
         * 应用名称
         * </pre>
         */
        boolean hasAuditLogtypename();

        /**
         * <code>optional bytes audit_logtypename = 14;</code>
         * <p>
         * <pre>
         * 应用名称
         * </pre>
         */
        com.google.protobuf.ByteString getAuditLogtypename();

        // optional int32 ast_id = 15;

        /**
         * <code>optional int32 ast_id = 15;</code>
         * <p>
         * <pre>
         * 资产ID
         * </pre>
         */
        boolean hasAstId();

        /**
         * <code>optional int32 ast_id = 15;</code>
         * <p>
         * <pre>
         * 资产ID
         * </pre>
         */
        int getAstId();

        // optional bytes ast_ip = 16;

        /**
         * <code>optional bytes ast_ip = 16;</code>
         * <p>
         * <pre>
         * 资产IP，必须转化为整数后再进行传送，避免非法的IP地址格式
         * </pre>
         */
        boolean hasAstIp();

        /**
         * <code>optional bytes ast_ip = 16;</code>
         * <p>
         * <pre>
         * 资产IP，必须转化为整数后再进行传送，避免非法的IP地址格式
         * </pre>
         */
        com.google.protobuf.ByteString getAstIp();

        // optional bytes ast_name = 17;

        /**
         * <code>optional bytes ast_name = 17;</code>
         * <p>
         * <pre>
         * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
         * </pre>
         */
        boolean hasAstName();

        /**
         * <code>optional bytes ast_name = 17;</code>
         * <p>
         * <pre>
         * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
         * </pre>
         */
        com.google.protobuf.ByteString getAstName();

        // optional bytes ast_region_code = 18;

        /**
         * <code>optional bytes ast_region_code = 18;</code>
         * <p>
         * <pre>
         * 资产地域编码
         * </pre>
         */
        boolean hasAstRegionCode();

        /**
         * <code>optional bytes ast_region_code = 18;</code>
         * <p>
         * <pre>
         * 资产地域编码
         * </pre>
         */
        com.google.protobuf.ByteString getAstRegionCode();

        // optional bytes ast_region_name = 19;

        /**
         * <code>optional bytes ast_region_name = 19;</code>
         * <p>
         * <pre>
         * 资产地域名称
         * </pre>
         */
        boolean hasAstRegionName();

        /**
         * <code>optional bytes ast_region_name = 19;</code>
         * <p>
         * <pre>
         * 资产地域名称
         * </pre>
         */
        com.google.protobuf.ByteString getAstRegionName();

        // optional int32 hgid = 20;

        /**
         * <code>optional int32 hgid = 20;</code>
         * <p>
         * <pre>
         * 资源组ID；重要，在审计分级管理中起决定性作用
         * </pre>
         */
        boolean hasHgid();

        /**
         * <code>optional int32 hgid = 20;</code>
         * <p>
         * <pre>
         * 资源组ID；重要，在审计分级管理中起决定性作用
         * </pre>
         */
        int getHgid();

        // optional bytes hgname = 21;

        /**
         * <code>optional bytes hgname = 21;</code>
         * <p>
         * <pre>
         * 资源组名称
         * </pre>
         */
        boolean hasHgname();

        /**
         * <code>optional bytes hgname = 21;</code>
         * <p>
         * <pre>
         * 资源组名称
         * </pre>
         */
        com.google.protobuf.ByteString getHgname();

        // optional bytes progkey = 22;

        /**
         * <code>optional bytes progkey = 22;</code>
         * <p>
         * <pre>
         * 所属IT系统
         * </pre>
         */
        boolean hasProgkey();

        /**
         * <code>optional bytes progkey = 22;</code>
         * <p>
         * <pre>
         * 所属IT系统
         * </pre>
         */
        com.google.protobuf.ByteString getProgkey();

        // optional int32 ast_type_id = 23;

        /**
         * <code>optional int32 ast_type_id = 23;</code>
         * <p>
         * <pre>
         * 资产类型ID
         * </pre>
         */
        boolean hasAstTypeId();

        /**
         * <code>optional int32 ast_type_id = 23;</code>
         * <p>
         * <pre>
         * 资产类型ID
         * </pre>
         */
        int getAstTypeId();

        // optional bytes ast_type_code = 24;

        /**
         * <code>optional bytes ast_type_code = 24;</code>
         * <p>
         * <pre>
         * 资产类型编码
         * </pre>
         */
        boolean hasAstTypeCode();

        /**
         * <code>optional bytes ast_type_code = 24;</code>
         * <p>
         * <pre>
         * 资产类型编码
         * </pre>
         */
        com.google.protobuf.ByteString getAstTypeCode();

        // optional bytes ast_type_name = 25;

        /**
         * <code>optional bytes ast_type_name = 25;</code>
         * <p>
         * <pre>
         * 资产类型名称
         * </pre>
         */
        boolean hasAstTypeName();

        /**
         * <code>optional bytes ast_type_name = 25;</code>
         * <p>
         * <pre>
         * 资产类型名称
         * </pre>
         */
        com.google.protobuf.ByteString getAstTypeName();

        // optional bytes ast_admin = 26;

        /**
         * <code>optional bytes ast_admin = 26;</code>
         * <p>
         * <pre>
         * 资产管理人员
         * </pre>
         */
        boolean hasAstAdmin();

        /**
         * <code>optional bytes ast_admin = 26;</code>
         * <p>
         * <pre>
         * 资产管理人员
         * </pre>
         */
        com.google.protobuf.ByteString getAstAdmin();

        // optional int32 key_ast = 27;

        /**
         * <code>optional int32 key_ast = 27;</code>
         * <p>
         * <pre>
         * 资产重要程度（是否关键资产）
         * </pre>
         */
        boolean hasKeyAst();

        /**
         * <code>optional int32 key_ast = 27;</code>
         * <p>
         * <pre>
         * 资产重要程度（是否关键资产）
         * </pre>
         */
        int getKeyAst();

        // optional int32 engine_id = 28;

        /**
         * <code>optional int32 engine_id = 28;</code>
         * <p>
         * <pre>
         * 审计引擎ID
         * </pre>
         */
        boolean hasEngineId();

        /**
         * <code>optional int32 engine_id = 28;</code>
         * <p>
         * <pre>
         * 审计引擎ID
         * </pre>
         */
        int getEngineId();

        // optional .sp.COMPONENT_TYPE engine_type = 29;

        /**
         * <code>optional .sp.COMPONENT_TYPE engine_type = 29;</code>
         * <p>
         * <pre>
         * 引擎类型
         * </pre>
         */
        boolean hasEngineType();

        /**
         * <code>optional .sp.COMPONENT_TYPE engine_type = 29;</code>
         * <p>
         * <pre>
         * 引擎类型
         * </pre>
         */
        sp.AuditEnum.COMPONENT_TYPE getEngineType();

        // optional bytes engine_ip = 30;

        /**
         * <code>optional bytes engine_ip = 30;</code>
         * <p>
         * <pre>
         * 引擎IP
         * </pre>
         */
        boolean hasEngineIp();

        /**
         * <code>optional bytes engine_ip = 30;</code>
         * <p>
         * <pre>
         * 引擎IP
         * </pre>
         */
        com.google.protobuf.ByteString getEngineIp();

        // optional bytes engine_type_name = 31;

        /**
         * <code>optional bytes engine_type_name = 31;</code>
         * <p>
         * <pre>
         * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
         * </pre>
         */
        boolean hasEngineTypeName();

        /**
         * <code>optional bytes engine_type_name = 31;</code>
         * <p>
         * <pre>
         * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
         * </pre>
         */
        com.google.protobuf.ByteString getEngineTypeName();

        // optional bytes log_source_ip = 32;

        /**
         * <code>optional bytes log_source_ip = 32;</code>
         * <p>
         * <pre>
         * 日志来源IP，4A 3.3、3.4版本中，金库日志使用该字段
         * </pre>
         */
        boolean hasLogSourceIp();

        /**
         * <code>optional bytes log_source_ip = 32;</code>
         * <p>
         * <pre>
         * 日志来源IP，4A 3.3、3.4版本中，金库日志使用该字段
         * </pre>
         */
        com.google.protobuf.ByteString getLogSourceIp();

        // optional int32 userid = 33;

        /**
         * <code>optional int32 userid = 33;</code>
         * <p>
         * <pre>
         * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
         * </pre>
         */
        boolean hasUserid();

        /**
         * <code>optional int32 userid = 33;</code>
         * <p>
         * <pre>
         * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
         * </pre>
         */
        int getUserid();

        // optional bytes logname = 34;

        /**
         * <code>optional bytes logname = 34;</code>
         * <p>
         * <pre>
         * 主帐号
         * </pre>
         */
        boolean hasLogname();

        /**
         * <code>optional bytes logname = 34;</code>
         * <p>
         * <pre>
         * 主帐号
         * </pre>
         */
        com.google.protobuf.ByteString getLogname();

        // optional bytes uname = 35;

        /**
         * <code>optional bytes uname = 35;</code>
         * <p>
         * <pre>
         * 用户姓名
         * </pre>
         */
        boolean hasUname();

        /**
         * <code>optional bytes uname = 35;</code>
         * <p>
         * <pre>
         * 用户姓名
         * </pre>
         */
        com.google.protobuf.ByteString getUname();

        // optional int32 ouid = 36;

        /**
         * <code>optional int32 ouid = 36;</code>
         * <p>
         * <pre>
         * 组织机构ID；重要，在审计分级管理中起决定性作用
         * </pre>
         */
        boolean hasOuid();

        /**
         * <code>optional int32 ouid = 36;</code>
         * <p>
         * <pre>
         * 组织机构ID；重要，在审计分级管理中起决定性作用
         * </pre>
         */
        int getOuid();

        // optional bytes ouname = 37;

        /**
         * <code>optional bytes ouname = 37;</code>
         * <p>
         * <pre>
         * 组织机构名称
         * </pre>
         */
        boolean hasOuname();

        /**
         * <code>optional bytes ouname = 37;</code>
         * <p>
         * <pre>
         * 组织机构名称
         * </pre>
         */
        com.google.protobuf.ByteString getOuname();

        // optional int32 logname_type_id = 38;

        /**
         * <code>optional int32 logname_type_id = 38;</code>
         * <p>
         * <pre>
         * 主帐号类型ID
         * </pre>
         */
        boolean hasLognameTypeId();

        /**
         * <code>optional int32 logname_type_id = 38;</code>
         * <p>
         * <pre>
         * 主帐号类型ID
         * </pre>
         */
        int getLognameTypeId();

        // optional bytes logname_type = 39;

        /**
         * <code>optional bytes logname_type = 39;</code>
         * <p>
         * <pre>
         * 主帐号类型，如：营业员、客服坐席、渠道、大客户经理等
         * </pre>
         */
        boolean hasLognameType();

        /**
         * <code>optional bytes logname_type = 39;</code>
         * <p>
         * <pre>
         * 主帐号类型，如：营业员、客服坐席、渠道、大客户经理等
         * </pre>
         */
        com.google.protobuf.ByteString getLognameType();

        // optional bytes logname_region_code = 40;

        /**
         * <code>optional bytes logname_region_code = 40;</code>
         * <p>
         * <pre>
         * 主帐号地域编码
         * </pre>
         */
        boolean hasLognameRegionCode();

        /**
         * <code>optional bytes logname_region_code = 40;</code>
         * <p>
         * <pre>
         * 主帐号地域编码
         * </pre>
         */
        com.google.protobuf.ByteString getLognameRegionCode();

        // optional bytes logname_region = 41;

        /**
         * <code>optional bytes logname_region = 41;</code>
         * <p>
         * <pre>
         * 主帐号地域
         * </pre>
         */
        boolean hasLognameRegion();

        /**
         * <code>optional bytes logname_region = 41;</code>
         * <p>
         * <pre>
         * 主帐号地域
         * </pre>
         */
        com.google.protobuf.ByteString getLognameRegion();

        // optional int32 logname_status = 42;

        /**
         * <code>optional int32 logname_status = 42;</code>
         * <p>
         * <pre>
         * 主帐号状态：正常/锁定/删除
         * </pre>
         */
        boolean hasLognameStatus();

        /**
         * <code>optional int32 logname_status = 42;</code>
         * <p>
         * <pre>
         * 主帐号状态：正常/锁定/删除
         * </pre>
         */
        int getLognameStatus();

        // optional int32 treasury_log_type = 43;

        /**
         * <code>optional int32 treasury_log_type = 43;</code>
         * <p>
         * <pre>
         * 金库日志类型:1-金库操作申请日志
         * </pre>
         */
        boolean hasTreasuryLogType();

        /**
         * <code>optional int32 treasury_log_type = 43;</code>
         * <p>
         * <pre>
         * 金库日志类型:1-金库操作申请日志
         * </pre>
         */
        int getTreasuryLogType();

        // optional int32 co_userid = 44;

        /**
         * <code>optional int32 co_userid = 44;</code>
         * <p>
         * <pre>
         * 2-金库授权审批日志
         * 3-金库动态码确认日志
         * 4-金库操作日志
         * 5-金库应急切换日志
         * 6-金库自身管理日志
         * 7-金库信息关联日志  提供给山西boss系统使用
         * </pre>
         */
        boolean hasCoUserid();

        /**
         * <code>optional int32 co_userid = 44;</code>
         * <p>
         * <pre>
         * 2-金库授权审批日志
         * 3-金库动态码确认日志
         * 4-金库操作日志
         * 5-金库应急切换日志
         * 6-金库自身管理日志
         * 7-金库信息关联日志  提供给山西boss系统使用
         * </pre>
         */
        int getCoUserid();

        // optional bytes co_user_logname = 45;

        /**
         * <code>optional bytes co_user_logname = 45;</code>
         * <p>
         * <pre>
         * 协同操作人主帐号
         * </pre>
         */
        boolean hasCoUserLogname();

        /**
         * <code>optional bytes co_user_logname = 45;</code>
         * <p>
         * <pre>
         * 协同操作人主帐号
         * </pre>
         */
        com.google.protobuf.ByteString getCoUserLogname();

        // optional bytes co_user_name = 46;

        /**
         * <code>optional bytes co_user_name = 46;</code>
         * <p>
         * <pre>
         * 协同操作人姓名
         * </pre>
         */
        boolean hasCoUserName();

        /**
         * <code>optional bytes co_user_name = 46;</code>
         * <p>
         * <pre>
         * 协同操作人姓名
         * </pre>
         */
        com.google.protobuf.ByteString getCoUserName();

        // optional int32 co_user_org_id = 47;

        /**
         * <code>optional int32 co_user_org_id = 47;</code>
         * <p>
         * <pre>
         * 协同操作人组织机构ID
         * </pre>
         */
        boolean hasCoUserOrgId();

        /**
         * <code>optional int32 co_user_org_id = 47;</code>
         * <p>
         * <pre>
         * 协同操作人组织机构ID
         * </pre>
         */
        int getCoUserOrgId();

        // optional bytes co_user_org_name = 48;

        /**
         * <code>optional bytes co_user_org_name = 48;</code>
         * <p>
         * <pre>
         * 协同操作人组织机构名称
         * </pre>
         */
        boolean hasCoUserOrgName();

        /**
         * <code>optional bytes co_user_org_name = 48;</code>
         * <p>
         * <pre>
         * 协同操作人组织机构名称
         * </pre>
         */
        com.google.protobuf.ByteString getCoUserOrgName();

        // optional bytes co_user_mobile = 49;

        /**
         * <code>optional bytes co_user_mobile = 49;</code>
         * <p>
         * <pre>
         * 协同操作人手机号码
         * </pre>
         */
        boolean hasCoUserMobile();

        /**
         * <code>optional bytes co_user_mobile = 49;</code>
         * <p>
         * <pre>
         * 协同操作人手机号码
         * </pre>
         */
        com.google.protobuf.ByteString getCoUserMobile();

        // optional int32 treasury_scene_type = 50;

        /**
         * <code>optional int32 treasury_scene_type = 50;</code>
         * <p>
         * <pre>
         * 金库场景类型:1:VPN登陆场景
         * </pre>
         */
        boolean hasTreasurySceneType();

        /**
         * <code>optional int32 treasury_scene_type = 50;</code>
         * <p>
         * <pre>
         * 金库场景类型:1:VPN登陆场景
         * </pre>
         */
        int getTreasurySceneType();

        // optional bytes treasury_scene_id = 51;

        /**
         * <code>optional bytes treasury_scene_id = 51;</code>
         * <p>
         * <pre>
         * 2:内网登陆场景
         * 3:单点登陆场景
         * 4:高风险操作场景
         * 5:4A操作类场景
         * </pre>
         */
        boolean hasTreasurySceneId();

        /**
         * <code>optional bytes treasury_scene_id = 51;</code>
         * <p>
         * <pre>
         * 2:内网登陆场景
         * 3:单点登陆场景
         * 4:高风险操作场景
         * 5:4A操作类场景
         * </pre>
         */
        com.google.protobuf.ByteString getTreasurySceneId();

        // optional bytes treasury_scene_name = 52;

        /**
         * <code>optional bytes treasury_scene_name = 52;</code>
         * <p>
         * <pre>
         * 金库场景名称
         * </pre>
         */
        boolean hasTreasurySceneName();

        /**
         * <code>optional bytes treasury_scene_name = 52;</code>
         * <p>
         * <pre>
         * 金库场景名称
         * </pre>
         */
        com.google.protobuf.ByteString getTreasurySceneName();

        // optional int32 treasury_auth_type = 53;

        /**
         * <code>optional int32 treasury_auth_type = 53;</code>
         * <p>
         * <pre>
         * 金库授权方式: 1:远程授权 2:现场授权 3:工单授权
         * </pre>
         */
        boolean hasTreasuryAuthType();

        /**
         * <code>optional int32 treasury_auth_type = 53;</code>
         * <p>
         * <pre>
         * 金库授权方式: 1:远程授权 2:现场授权 3:工单授权
         * </pre>
         */
        int getTreasuryAuthType();

        // optional bytes access_type = 54;

        /**
         * <code>optional bytes access_type = 54;</code>
         * <p>
         * <pre>
         * 金库访问方式
         * </pre>
         */
        boolean hasAccessType();

        /**
         * <code>optional bytes access_type = 54;</code>
         * <p>
         * <pre>
         * 金库访问方式
         * </pre>
         */
        com.google.protobuf.ByteString getAccessType();

        // optional bytes apply_time_slot = 55;

        /**
         * <code>optional bytes apply_time_slot = 55;</code>
         * <p>
         * <pre>
         * 金库申请使用时间段
         * </pre>
         */
        boolean hasApplyTimeSlot();

        /**
         * <code>optional bytes apply_time_slot = 55;</code>
         * <p>
         * <pre>
         * 金库申请使用时间段
         * </pre>
         */
        com.google.protobuf.ByteString getApplyTimeSlot();

        // optional int32 treasury_status = 56;

        /**
         * <code>optional int32 treasury_status = 56;</code>
         * <p>
         * <pre>
         * 金库状态: 1:正常 0:应急 2：已授权 3：未知
         * </pre>
         */
        boolean hasTreasuryStatus();

        /**
         * <code>optional int32 treasury_status = 56;</code>
         * <p>
         * <pre>
         * 金库状态: 1:正常 0:应急 2：已授权 3：未知
         * </pre>
         */
        int getTreasuryStatus();

        // optional bytes special_service_num = 57;

        /**
         * <code>optional bytes special_service_num = 57;</code>
         * <p>
         * <pre>
         * 金库特服码
         * </pre>
         */
        boolean hasSpecialServiceNum();

        /**
         * <code>optional bytes special_service_num = 57;</code>
         * <p>
         * <pre>
         * 金库特服码
         * </pre>
         */
        com.google.protobuf.ByteString getSpecialServiceNum();

        // optional bytes auth_result = 58;

        /**
         * <code>optional bytes auth_result = 58;</code>
         * <p>
         * <pre>
         * 金库授权结果
         * </pre>
         */
        boolean hasAuthResult();

        /**
         * <code>optional bytes auth_result = 58;</code>
         * <p>
         * <pre>
         * 金库授权结果
         * </pre>
         */
        com.google.protobuf.ByteString getAuthResult();

        // optional bytes sms_content = 59;

        /**
         * <code>optional bytes sms_content = 59;</code>
         * <p>
         * <pre>
         * 金库短信内容
         * </pre>
         */
        boolean hasSmsContent();

        /**
         * <code>optional bytes sms_content = 59;</code>
         * <p>
         * <pre>
         * 金库短信内容
         * </pre>
         */
        com.google.protobuf.ByteString getSmsContent();

        // optional int32 account_id = 60;

        /**
         * <code>optional int32 account_id = 60;</code>
         * <p>
         * <pre>
         * 从帐号ID
         * </pre>
         */
        boolean hasAccountId();

        /**
         * <code>optional int32 account_id = 60;</code>
         * <p>
         * <pre>
         * 从帐号ID
         * </pre>
         */
        int getAccountId();

        // optional bytes account = 61;

        /**
         * <code>optional bytes account = 61;</code>
         * <p>
         * <pre>
         * 从帐号
         * </pre>
         */
        boolean hasAccount();

        /**
         * <code>optional bytes account = 61;</code>
         * <p>
         * <pre>
         * 从帐号
         * </pre>
         */
        com.google.protobuf.ByteString getAccount();

        // optional bytes app_ouname = 62;

        /**
         * <code>optional bytes app_ouname = 62;</code>
         * <p>
         * <pre>
         * 从帐号组织
         * </pre>
         */
        boolean hasAppOuname();

        /**
         * <code>optional bytes app_ouname = 62;</code>
         * <p>
         * <pre>
         * 从帐号组织
         * </pre>
         */
        com.google.protobuf.ByteString getAppOuname();

        // optional int32 account_type_id = 63;

        /**
         * <code>optional int32 account_type_id = 63;</code>
         * <p>
         * <pre>
         * 从帐号类型ID
         * </pre>
         */
        boolean hasAccountTypeId();

        /**
         * <code>optional int32 account_type_id = 63;</code>
         * <p>
         * <pre>
         * 从帐号类型ID
         * </pre>
         */
        int getAccountTypeId();

        // optional bytes account_type_name = 64;

        /**
         * <code>optional bytes account_type_name = 64;</code>
         * <p>
         * <pre>
         * 从帐号类型名称
         * </pre>
         */
        boolean hasAccountTypeName();

        /**
         * <code>optional bytes account_type_name = 64;</code>
         * <p>
         * <pre>
         * 从帐号类型名称
         * </pre>
         */
        com.google.protobuf.ByteString getAccountTypeName();

        // optional bytes account_region_code = 65;

        /**
         * <code>optional bytes account_region_code = 65;</code>
         * <p>
         * <pre>
         * 从帐号地域编码
         * </pre>
         */
        boolean hasAccountRegionCode();

        /**
         * <code>optional bytes account_region_code = 65;</code>
         * <p>
         * <pre>
         * 从帐号地域编码
         * </pre>
         */
        com.google.protobuf.ByteString getAccountRegionCode();

        // optional bytes account_region = 66;

        /**
         * <code>optional bytes account_region = 66;</code>
         * <p>
         * <pre>
         * 从帐号地域
         * </pre>
         */
        boolean hasAccountRegion();

        /**
         * <code>optional bytes account_region = 66;</code>
         * <p>
         * <pre>
         * 从帐号地域
         * </pre>
         */
        com.google.protobuf.ByteString getAccountRegion();

        // optional int32 account_status = 67;

        /**
         * <code>optional int32 account_status = 67;</code>
         * <p>
         * <pre>
         * 从帐号状态
         * </pre>
         */
        boolean hasAccountStatus();

        /**
         * <code>optional int32 account_status = 67;</code>
         * <p>
         * <pre>
         * 从帐号状态
         * </pre>
         */
        int getAccountStatus();

        // required uint64 logtime_sec = 68;

        /**
         * <code>required uint64 logtime_sec = 68;</code>
         * <p>
         * <pre>
         * 操作时间：秒
         * </pre>
         */
        boolean hasLogtimeSec();

        /**
         * <code>required uint64 logtime_sec = 68;</code>
         * <p>
         * <pre>
         * 操作时间：秒
         * </pre>
         */
        long getLogtimeSec();

        // optional uint64 logtime_msec = 69;

        /**
         * <code>optional uint64 logtime_msec = 69;</code>
         * <p>
         * <pre>
         * 操作时间：毫秒
         * </pre>
         */
        boolean hasLogtimeMsec();

        /**
         * <code>optional uint64 logtime_msec = 69;</code>
         * <p>
         * <pre>
         * 操作时间：毫秒
         * </pre>
         */
        long getLogtimeMsec();

        // optional bytes endtime = 70;

        /**
         * <code>optional bytes endtime = 70;</code>
         * <p>
         * <pre>
         * 结束时间
         * </pre>
         */
        boolean hasEndtime();

        /**
         * <code>optional bytes endtime = 70;</code>
         * <p>
         * <pre>
         * 结束时间
         * </pre>
         */
        com.google.protobuf.ByteString getEndtime();

        // optional uint64 gather_sec = 71;

        /**
         * <code>optional uint64 gather_sec = 71;</code>
         * <p>
         * <pre>
         * 采集时间：秒
         * </pre>
         */
        boolean hasGatherSec();

        /**
         * <code>optional uint64 gather_sec = 71;</code>
         * <p>
         * <pre>
         * 采集时间：秒
         * </pre>
         */
        long getGatherSec();

        // optional uint64 gather_msec = 72;

        /**
         * <code>optional uint64 gather_msec = 72;</code>
         * <p>
         * <pre>
         * 采集时间：毫秒
         * </pre>
         */
        boolean hasGatherMsec();

        /**
         * <code>optional uint64 gather_msec = 72;</code>
         * <p>
         * <pre>
         * 采集时间：毫秒
         * </pre>
         */
        long getGatherMsec();

        // optional bytes sip = 73;

        /**
         * <code>optional bytes sip = 73;</code>
         * <p>
         * <pre>
         * 源IP，必须转化为整数后再进行传送，避免非法的IP地址格式
         * </pre>
         */
        boolean hasSip();

        /**
         * <code>optional bytes sip = 73;</code>
         * <p>
         * <pre>
         * 源IP，必须转化为整数后再进行传送，避免非法的IP地址格式
         * </pre>
         */
        com.google.protobuf.ByteString getSip();

        // optional bytes smac = 74;

        /**
         * <code>optional bytes smac = 74;</code>
         * <p>
         * <pre>
         * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
         * </pre>
         */
        boolean hasSmac();

        /**
         * <code>optional bytes smac = 74;</code>
         * <p>
         * <pre>
         * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
         * </pre>
         */
        com.google.protobuf.ByteString getSmac();

        // optional uint32 sport = 75;

        /**
         * <code>optional uint32 sport = 75;</code>
         * <p>
         * <pre>
         * 源端口
         * </pre>
         */
        boolean hasSport();

        /**
         * <code>optional uint32 sport = 75;</code>
         * <p>
         * <pre>
         * 源端口
         * </pre>
         */
        int getSport();

        // optional bytes dip = 76;

        /**
         * <code>optional bytes dip = 76;</code>
         * <p>
         * <pre>
         * 目的IP，必须转化为整数后再进行传送，避免非法的IP地址格式
         * </pre>
         */
        boolean hasDip();

        /**
         * <code>optional bytes dip = 76;</code>
         * <p>
         * <pre>
         * 目的IP，必须转化为整数后再进行传送，避免非法的IP地址格式
         * </pre>
         */
        com.google.protobuf.ByteString getDip();

        // optional bytes dmac = 77;

        /**
         * <code>optional bytes dmac = 77;</code>
         * <p>
         * <pre>
         * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
         * </pre>
         */
        boolean hasDmac();

        /**
         * <code>optional bytes dmac = 77;</code>
         * <p>
         * <pre>
         * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
         * </pre>
         */
        com.google.protobuf.ByteString getDmac();

        // optional uint32 dport = 78;

        /**
         * <code>optional uint32 dport = 78;</code>
         * <p>
         * <pre>
         * 目的端口
         * </pre>
         */
        boolean hasDport();

        /**
         * <code>optional uint32 dport = 78;</code>
         * <p>
         * <pre>
         * 目的端口
         * </pre>
         */
        int getDport();

        // optional int32 eventid = 79;

        /**
         * <code>optional int32 eventid = 79;</code>
         * <p>
         * <pre>
         * 事件ID，原有版本中有用，现不用
         * </pre>
         */
        boolean hasEventid();

        /**
         * <code>optional int32 eventid = 79;</code>
         * <p>
         * <pre>
         * 事件ID，原有版本中有用，现不用
         * </pre>
         */
        int getEventid();

        // optional .sp.RISK_LEVEL risk_level = 80;

        /**
         * <code>optional .sp.RISK_LEVEL risk_level = 80;</code>
         * <p>
         * <pre>
         * 事件级别：标准化之后，每个操作均有一个级别
         * </pre>
         */
        boolean hasRiskLevel();

        /**
         * <code>optional .sp.RISK_LEVEL risk_level = 80;</code>
         * <p>
         * <pre>
         * 事件级别：标准化之后，每个操作均有一个级别
         * </pre>
         */
        sp.AuditEnum.RISK_LEVEL getRiskLevel();

        // optional bytes operate = 81;

        /**
         * <code>optional bytes operate = 81;</code>
         * <p>
         * <pre>
         * 操作
         * </pre>
         */
        boolean hasOperate();

        /**
         * <code>optional bytes operate = 81;</code>
         * <p>
         * <pre>
         * 操作
         * </pre>
         */
        com.google.protobuf.ByteString getOperate();

        // optional bytes obj_id = 82;

        /**
         * <code>optional bytes obj_id = 82;</code>
         * <p>
         * <pre>
         * 操作对象ID，一个UUID值，IAM日志中用
         * </pre>
         */
        boolean hasObjId();

        /**
         * <code>optional bytes obj_id = 82;</code>
         * <p>
         * <pre>
         * 操作对象ID，一个UUID值，IAM日志中用
         * </pre>
         */
        com.google.protobuf.ByteString getObjId();

        // optional bytes obj = 83;

        /**
         * <code>optional bytes obj = 83;</code>
         * <p>
         * <pre>
         * 操作对象
         * </pre>
         */
        boolean hasObj();

        /**
         * <code>optional bytes obj = 83;</code>
         * <p>
         * <pre>
         * 操作对象
         * </pre>
         */
        com.google.protobuf.ByteString getObj();

        // optional bytes obj_parent_id = 84;

        /**
         * <code>optional bytes obj_parent_id = 84;</code>
         * <p>
         * <pre>
         * 操作对象父ID，IAM日志中用
         * </pre>
         */
        boolean hasObjParentId();

        /**
         * <code>optional bytes obj_parent_id = 84;</code>
         * <p>
         * <pre>
         * 操作对象父ID，IAM日志中用
         * </pre>
         */
        com.google.protobuf.ByteString getObjParentId();

        // optional bytes obj_parent_name = 85;

        /**
         * <code>optional bytes obj_parent_name = 85;</code>
         * <p>
         * <pre>
         * 操作对象父名称，IAM日志中用
         * </pre>
         */
        boolean hasObjParentName();

        /**
         * <code>optional bytes obj_parent_name = 85;</code>
         * <p>
         * <pre>
         * 操作对象父名称，IAM日志中用
         * </pre>
         */
        com.google.protobuf.ByteString getObjParentName();

        // optional bytes objectstation_code = 86;

        /**
         * <code>optional bytes objectstation_code = 86;</code>
         * <p>
         * <pre>
         * 操作对象岗位ID，IAM日志中用  原来为INT型?
         * </pre>
         */
        boolean hasObjectstationCode();

        /**
         * <code>optional bytes objectstation_code = 86;</code>
         * <p>
         * <pre>
         * 操作对象岗位ID，IAM日志中用  原来为INT型?
         * </pre>
         */
        com.google.protobuf.ByteString getObjectstationCode();

        // optional bytes objectstation_name = 87;

        /**
         * <code>optional bytes objectstation_name = 87;</code>
         * <p>
         * <pre>
         * 操作对象岗位，IAM日志中用
         * </pre>
         */
        boolean hasObjectstationName();

        /**
         * <code>optional bytes objectstation_name = 87;</code>
         * <p>
         * <pre>
         * 操作对象岗位，IAM日志中用
         * </pre>
         */
        com.google.protobuf.ByteString getObjectstationName();

        // optional bytes result = 88;

        /**
         * <code>optional bytes result = 88;</code>
         * <p>
         * <pre>
         * 操作结果
         * </pre>
         */
        boolean hasResult();

        /**
         * <code>optional bytes result = 88;</code>
         * <p>
         * <pre>
         * 操作结果
         * </pre>
         */
        com.google.protobuf.ByteString getResult();

        // optional int32 retcode = 89;

        /**
         * <code>optional int32 retcode = 89;</code>
         * <p>
         * <pre>
         * 操作返回值
         * </pre>
         */
        boolean hasRetcode();

        /**
         * <code>optional int32 retcode = 89;</code>
         * <p>
         * <pre>
         * 操作返回值
         * </pre>
         */
        int getRetcode();

        // optional bytes processname = 90;

        /**
         * <code>optional bytes processname = 90;</code>
         * <p>
         * <pre>
         * 进程名
         * </pre>
         */
        boolean hasProcessname();

        /**
         * <code>optional bytes processname = 90;</code>
         * <p>
         * <pre>
         * 进程名
         * </pre>
         */
        com.google.protobuf.ByteString getProcessname();

        // optional bytes workinfo = 91;

        /**
         * <code>optional bytes workinfo = 91;</code>
         * <p>
         * <pre>
         * 工单信息
         * </pre>
         */
        boolean hasWorkinfo();

        /**
         * <code>optional bytes workinfo = 91;</code>
         * <p>
         * <pre>
         * 工单信息
         * </pre>
         */
        com.google.protobuf.ByteString getWorkinfo();

        // optional bytes logreason = 92;

        /**
         * <code>optional bytes logreason = 92;</code>
         * <p>
         * <pre>
         * 操作原因
         * </pre>
         */
        boolean hasLogreason();

        /**
         * <code>optional bytes logreason = 92;</code>
         * <p>
         * <pre>
         * 操作原因
         * </pre>
         */
        com.google.protobuf.ByteString getLogreason();

        // optional bytes vdata = 93;

        /**
         * <code>optional bytes vdata = 93;</code>
         * <p>
         * <pre>
         * 原始日志
         * </pre>
         */
        boolean hasVdata();

        /**
         * <code>optional bytes vdata = 93;</code>
         * <p>
         * <pre>
         * 原始日志
         * </pre>
         */
        com.google.protobuf.ByteString getVdata();

        // optional int32 facility = 94;

        /**
         * <code>optional int32 facility = 94;</code>
         * <p>
         * <pre>
         * 原始日志类型
         * </pre>
         */
        boolean hasFacility();

        /**
         * <code>optional int32 facility = 94;</code>
         * <p>
         * <pre>
         * 原始日志类型
         * </pre>
         */
        int getFacility();

        // optional int32 severity = 95;

        /**
         * <code>optional int32 severity = 95;</code>
         * <p>
         * <pre>
         * 原始日志级别
         * </pre>
         */
        boolean hasSeverity();

        /**
         * <code>optional int32 severity = 95;</code>
         * <p>
         * <pre>
         * 原始日志级别
         * </pre>
         */
        int getSeverity();

        // optional bytes memo = 96;

        /**
         * <code>optional bytes memo = 96;</code>
         * <p>
         * <pre>
         * 描述
         * </pre>
         */
        boolean hasMemo();

        /**
         * <code>optional bytes memo = 96;</code>
         * <p>
         * <pre>
         * 描述
         * </pre>
         */
        com.google.protobuf.ByteString getMemo();

        // optional bytes hbasession = 97;

        /**
         * <code>optional bytes hbasession = 97;</code>
         * <p>
         * <pre>
         * 原始日志(金库)会话ID
         * </pre>
         */
        boolean hasHbasession();

        /**
         * <code>optional bytes hbasession = 97;</code>
         * <p>
         * <pre>
         * 原始日志(金库)会话ID
         * </pre>
         */
        com.google.protobuf.ByteString getHbasession();

        // optional int32 op_type_id = 98;

        /**
         * <code>optional int32 op_type_id = 98;</code>
         * <p>
         * <pre>
         * 操作类型ID
         * </pre>
         */
        boolean hasOpTypeId();

        /**
         * <code>optional int32 op_type_id = 98;</code>
         * <p>
         * <pre>
         * 操作类型ID
         * </pre>
         */
        int getOpTypeId();

        // optional bytes op_type = 99;

        /**
         * <code>optional bytes op_type = 99;</code>
         * <p>
         * <pre>
         * 操作类型
         * </pre>
         */
        boolean hasOpType();

        /**
         * <code>optional bytes op_type = 99;</code>
         * <p>
         * <pre>
         * 操作类型
         * </pre>
         */
        com.google.protobuf.ByteString getOpType();

        // optional int32 op_class_id = 100;

        /**
         * <code>optional int32 op_class_id = 100;</code>
         * <p>
         * <pre>
         * 操作子类ID
         * </pre>
         */
        boolean hasOpClassId();

        /**
         * <code>optional int32 op_class_id = 100;</code>
         * <p>
         * <pre>
         * 操作子类ID
         * </pre>
         */
        int getOpClassId();

        // optional bytes op_class = 101;

        /**
         * <code>optional bytes op_class = 101;</code>
         * <p>
         * <pre>
         * 操作子类
         * </pre>
         */
        boolean hasOpClass();

        /**
         * <code>optional bytes op_class = 101;</code>
         * <p>
         * <pre>
         * 操作子类
         * </pre>
         */
        com.google.protobuf.ByteString getOpClass();

        // optional int32 op_item_id = 102;

        /**
         * <code>optional int32 op_item_id = 102;</code>
         * <p>
         * <pre>
         * 操作细项ID
         * </pre>
         */
        boolean hasOpItemId();

        /**
         * <code>optional int32 op_item_id = 102;</code>
         * <p>
         * <pre>
         * 操作细项ID
         * </pre>
         */
        int getOpItemId();

        // optional bytes op_item = 103;

        /**
         * <code>optional bytes op_item = 103;</code>
         * <p>
         * <pre>
         * 操作细项
         * </pre>
         */
        boolean hasOpItem();

        /**
         * <code>optional bytes op_item = 103;</code>
         * <p>
         * <pre>
         * 操作细项
         * </pre>
         */
        com.google.protobuf.ByteString getOpItem();

        // optional bytes op_code = 104;

        /**
         * <code>optional bytes op_code = 104;</code>
         * <p>
         * <pre>
         * 操作编码
         * </pre>
         */
        boolean hasOpCode();

        /**
         * <code>optional bytes op_code = 104;</code>
         * <p>
         * <pre>
         * 操作编码
         * </pre>
         */
        com.google.protobuf.ByteString getOpCode();

        // optional int32 op_key_id = 105;

        /**
         * <code>optional int32 op_key_id = 105;</code>
         * <p>
         * <pre>
         * 操作关键字ID（标准化策略ID）
         * </pre>
         */
        boolean hasOpKeyId();

        /**
         * <code>optional int32 op_key_id = 105;</code>
         * <p>
         * <pre>
         * 操作关键字ID（标准化策略ID）
         * </pre>
         */
        int getOpKeyId();

        // optional bytes op_key = 106;

        /**
         * <code>optional bytes op_key = 106;</code>
         * <p>
         * <pre>
         * 操作关键字（标准化策略正则表达式）
         * </pre>
         */
        boolean hasOpKey();

        /**
         * <code>optional bytes op_key = 106;</code>
         * <p>
         * <pre>
         * 操作关键字（标准化策略正则表达式）
         * </pre>
         */
        com.google.protobuf.ByteString getOpKey();

        // optional bytes operatetypeid = 107;

        /**
         * <code>optional bytes operatetypeid = 107;</code>
         * <p>
         * <pre>
         * 原始操作类型（应用系统日志扩展）
         * </pre>
         */
        boolean hasOperatetypeid();

        /**
         * <code>optional bytes operatetypeid = 107;</code>
         * <p>
         * <pre>
         * 原始操作类型（应用系统日志扩展）
         * </pre>
         */
        com.google.protobuf.ByteString getOperatetypeid();

        // optional bytes operatetypename = 108;

        /**
         * <code>optional bytes operatetypename = 108;</code>
         * <p>
         * <pre>
         * 原始操作名称（应用系统日志扩展）
         * </pre>
         */
        boolean hasOperatetypename();

        /**
         * <code>optional bytes operatetypename = 108;</code>
         * <p>
         * <pre>
         * 原始操作名称（应用系统日志扩展）
         * </pre>
         */
        com.google.protobuf.ByteString getOperatetypename();

        // optional bytes authtype = 109;

        /**
         * <code>optional bytes authtype = 109;</code>
         * <p>
         * <pre>
         * 认证类型（应用系统日志扩展）
         * </pre>
         */
        boolean hasAuthtype();

        /**
         * <code>optional bytes authtype = 109;</code>
         * <p>
         * <pre>
         * 认证类型（应用系统日志扩展）
         * </pre>
         */
        com.google.protobuf.ByteString getAuthtype();

        // optional bytes logid = 110;

        /**
         * <code>optional bytes logid = 110;</code>
         * <p>
         * <pre>
         * 原始日志ID（应用系统日志扩展）
         * </pre>
         */
        boolean hasLogid();

        /**
         * <code>optional bytes logid = 110;</code>
         * <p>
         * <pre>
         * 原始日志ID（应用系统日志扩展）
         * </pre>
         */
        com.google.protobuf.ByteString getLogid();

        // optional bytes orgname = 111;

        /**
         * <code>optional bytes orgname = 111;</code>
         * <p>
         * <pre>
         * 原始日志组织名称（应用系统日志扩展）
         * </pre>
         */
        boolean hasOrgname();

        /**
         * <code>optional bytes orgname = 111;</code>
         * <p>
         * <pre>
         * 原始日志组织名称（应用系统日志扩展）
         * </pre>
         */
        com.google.protobuf.ByteString getOrgname();

        // optional bytes recdefid = 112;

        /**
         * <code>optional bytes recdefid = 112;</code>
         * <p>
         * <pre>
         * 受理类型（应用系统日志扩展）
         * </pre>
         */
        boolean hasRecdefid();

        /**
         * <code>optional bytes recdefid = 112;</code>
         * <p>
         * <pre>
         * 受理类型（应用系统日志扩展）
         * </pre>
         */
        com.google.protobuf.ByteString getRecdefid();

        // optional bytes recdedate = 113;

        /**
         * <code>optional bytes recdedate = 113;</code>
         * <p>
         * <pre>
         * 受理时间（应用系统日志扩展）
         * </pre>
         */
        boolean hasRecdedate();

        /**
         * <code>optional bytes recdedate = 113;</code>
         * <p>
         * <pre>
         * 受理时间（应用系统日志扩展）
         * </pre>
         */
        com.google.protobuf.ByteString getRecdedate();

        // optional bytes formnum = 114;

        /**
         * <code>optional bytes formnum = 114;</code>
         * <p>
         * <pre>
         * 流水号（应用系统日志扩展）
         * </pre>
         */
        boolean hasFormnum();

        /**
         * <code>optional bytes formnum = 114;</code>
         * <p>
         * <pre>
         * 流水号（应用系统日志扩展）
         * </pre>
         */
        com.google.protobuf.ByteString getFormnum();

        // optional bytes jobcount = 115;

        /**
         * <code>optional bytes jobcount = 115;</code>
         * <p>
         * <pre>
         * 数量（应用系统日志扩展）
         * </pre>
         */
        boolean hasJobcount();

        /**
         * <code>optional bytes jobcount = 115;</code>
         * <p>
         * <pre>
         * 数量（应用系统日志扩展）
         * </pre>
         */
        com.google.protobuf.ByteString getJobcount();

        // optional bytes okcount = 116;

        /**
         * <code>optional bytes okcount = 116;</code>
         * <p>
         * <pre>
         * 成功条数（应用系统日志扩展）
         * </pre>
         */
        boolean hasOkcount();

        /**
         * <code>optional bytes okcount = 116;</code>
         * <p>
         * <pre>
         * 成功条数（应用系统日志扩展）
         * </pre>
         */
        com.google.protobuf.ByteString getOkcount();

        // optional bytes failcount = 117;

        /**
         * <code>optional bytes failcount = 117;</code>
         * <p>
         * <pre>
         * 失败条数（应用系统日志扩展）
         * </pre>
         */
        boolean hasFailcount();

        /**
         * <code>optional bytes failcount = 117;</code>
         * <p>
         * <pre>
         * 失败条数（应用系统日志扩展）
         * </pre>
         */
        com.google.protobuf.ByteString getFailcount();

        // optional bytes servnumber = 118;

        /**
         * <code>optional bytes servnumber = 118;</code>
         * <p>
         * <pre>
         * 受理代码（应用系统日志扩展）
         * </pre>
         */
        boolean hasServnumber();

        /**
         * <code>optional bytes servnumber = 118;</code>
         * <p>
         * <pre>
         * 受理代码（应用系统日志扩展）
         * </pre>
         */
        com.google.protobuf.ByteString getServnumber();

        // optional bytes recname = 119;

        /**
         * <code>optional bytes recname = 119;</code>
         * <p>
         * <pre>
         * 业务名称（应用系统日志扩展）
         * </pre>
         */
        boolean hasRecname();

        /**
         * <code>optional bytes recname = 119;</code>
         * <p>
         * <pre>
         * 业务名称（应用系统日志扩展）
         * </pre>
         */
        com.google.protobuf.ByteString getRecname();

        // optional bytes status = 120;

        /**
         * <code>optional bytes status = 120;</code>
         * <p>
         * <pre>
         * 状态（应用系统日志扩展）
         * </pre>
         */
        boolean hasStatus();

        /**
         * <code>optional bytes status = 120;</code>
         * <p>
         * <pre>
         * 状态（应用系统日志扩展）
         * </pre>
         */
        com.google.protobuf.ByteString getStatus();

        // optional bytes filluuid = 121;

        /**
         * <code>optional bytes filluuid = 121;</code>
         * <p>
         * <pre>
         * 4A代填UUID，，IAM日志中用
         * </pre>
         */
        boolean hasFilluuid();

        /**
         * <code>optional bytes filluuid = 121;</code>
         * <p>
         * <pre>
         * 4A代填UUID，，IAM日志中用
         * </pre>
         */
        com.google.protobuf.ByteString getFilluuid();

        // optional bytes reserved0 = 122;

        /**
         * <code>optional bytes reserved0 = 122;</code>
         */
        boolean hasReserved0();

        /**
         * <code>optional bytes reserved0 = 122;</code>
         */
        com.google.protobuf.ByteString getReserved0();

        // optional bytes reserved1 = 123;

        /**
         * <code>optional bytes reserved1 = 123;</code>
         */
        boolean hasReserved1();

        /**
         * <code>optional bytes reserved1 = 123;</code>
         */
        com.google.protobuf.ByteString getReserved1();

        // optional bytes reserved2 = 124;

        /**
         * <code>optional bytes reserved2 = 124;</code>
         */
        boolean hasReserved2();

        /**
         * <code>optional bytes reserved2 = 124;</code>
         */
        com.google.protobuf.ByteString getReserved2();

        // optional bytes reserved3 = 125;

        /**
         * <code>optional bytes reserved3 = 125;</code>
         */
        boolean hasReserved3();

        /**
         * <code>optional bytes reserved3 = 125;</code>
         */
        com.google.protobuf.ByteString getReserved3();

        // optional bytes reserved4 = 126;

        /**
         * <code>optional bytes reserved4 = 126;</code>
         * <p>
         * <pre>
         * 2014-02-27新增：告警申诉原因（申诉人填写）
         * </pre>
         */
        boolean hasReserved4();

        /**
         * <code>optional bytes reserved4 = 126;</code>
         * <p>
         * <pre>
         * 2014-02-27新增：告警申诉原因（申诉人填写）
         * </pre>
         */
        com.google.protobuf.ByteString getReserved4();

        // optional bytes reserved5 = 127;

        /**
         * <code>optional bytes reserved5 = 127;</code>
         * <p>
         * <pre>
         * 2014-02-27新增：告警审计管理员理由（申诉失败，用户会看原因）
         * </pre>
         */
        boolean hasReserved5();

        /**
         * <code>optional bytes reserved5 = 127;</code>
         * <p>
         * <pre>
         * 2014-02-27新增：告警审计管理员理由（申诉失败，用户会看原因）
         * </pre>
         */
        com.google.protobuf.ByteString getReserved5();

        // optional bytes reserved6 = 128;

        /**
         * <code>optional bytes reserved6 = 128;</code>
         * <p>
         * <pre>
         * 2014-04-14新增：告警申诉时间
         * </pre>
         */
        boolean hasReserved6();

        /**
         * <code>optional bytes reserved6 = 128;</code>
         * <p>
         * <pre>
         * 2014-04-14新增：告警申诉时间
         * </pre>
         */
        com.google.protobuf.ByteString getReserved6();

        // optional bytes reserved7 = 129;

        /**
         * <code>optional bytes reserved7 = 129;</code>
         * <p>
         * <pre>
         * 2014-04-14新增：告警申诉处理时间
         * </pre>
         */
        boolean hasReserved7();

        /**
         * <code>optional bytes reserved7 = 129;</code>
         * <p>
         * <pre>
         * 2014-04-14新增：告警申诉处理时间
         * </pre>
         */
        com.google.protobuf.ByteString getReserved7();

        // optional bytes reserved8 = 130;

        /**
         * <code>optional bytes reserved8 = 130;</code>
         */
        boolean hasReserved8();

        /**
         * <code>optional bytes reserved8 = 130;</code>
         */
        com.google.protobuf.ByteString getReserved8();

        // optional bytes reserved9 = 131;

        /**
         * <code>optional bytes reserved9 = 131;</code>
         */
        boolean hasReserved9();

        /**
         * <code>optional bytes reserved9 = 131;</code>
         */
        com.google.protobuf.ByteString getReserved9();

        // optional bytes res_key = 132;

        /**
         * <code>optional bytes res_key = 132;</code>
         * <p>
         * <pre>
         * 资源KEY，UUID
         * </pre>
         */
        boolean hasResKey();

        /**
         * <code>optional bytes res_key = 132;</code>
         * <p>
         * <pre>
         * 资源KEY，UUID
         * </pre>
         */
        com.google.protobuf.ByteString getResKey();

        // optional bytes logtable = 133;

        /**
         * <code>optional bytes logtable = 133;</code>
         * <p>
         * <pre>
         * 专题数据分拣时，对应的专题表名
         * </pre>
         */
        boolean hasLogtable();

        /**
         * <code>optional bytes logtable = 133;</code>
         * <p>
         * <pre>
         * 专题数据分拣时，对应的专题表名
         * </pre>
         */
        com.google.protobuf.ByteString getLogtable();

        // optional int32 functionid = 134;

        /**
         * <code>optional int32 functionid = 134;</code>
         * <p>
         * <pre>
         * 功能ID，特用于IAM日志
         * </pre>
         */
        boolean hasFunctionid();

        /**
         * <code>optional int32 functionid = 134;</code>
         * <p>
         * <pre>
         * 功能ID，特用于IAM日志
         * </pre>
         */
        int getFunctionid();

        // optional bytes functionname = 135;

        /**
         * <code>optional bytes functionname = 135;</code>
         * <p>
         * <pre>
         * 功能名称，特用于IAM日志
         * </pre>
         */
        boolean hasFunctionname();

        /**
         * <code>optional bytes functionname = 135;</code>
         * <p>
         * <pre>
         * 功能名称，特用于IAM日志
         * </pre>
         */
        com.google.protobuf.ByteString getFunctionname();

        // optional int32 direction = 136;

        /**
         * <code>optional int32 direction = 136;</code>
         * <p>
         * <pre>
         * 上下行标识，特用于NBA、GBA操作日志
         * </pre>
         */
        boolean hasDirection();

        /**
         * <code>optional int32 direction = 136;</code>
         * <p>
         * <pre>
         * 上下行标识，特用于NBA、GBA操作日志
         * </pre>
         */
        int getDirection();

        // optional int32 nreserved0 = 137;

        /**
         * <code>optional int32 nreserved0 = 137;</code>
         */
        boolean hasNreserved0();

        /**
         * <code>optional int32 nreserved0 = 137;</code>
         */
        int getNreserved0();

        // optional int32 nreserved1 = 138;

        /**
         * <code>optional int32 nreserved1 = 138;</code>
         * <p>
         * <pre>
         * 缓存NBA会话状态
         * </pre>
         */
        boolean hasNreserved1();

        /**
         * <code>optional int32 nreserved1 = 138;</code>
         * <p>
         * <pre>
         * 缓存NBA会话状态
         * </pre>
         */
        int getNreserved1();

        // optional int32 nreserved2 = 139;

        /**
         * <code>optional int32 nreserved2 = 139;</code>
         * <p>
         * <pre>
         * 2014-02-27新增：告警申诉状态（需要有未申诉、处理中、申诉失败标识，申诉人可改变此状态）
         * </pre>
         */
        boolean hasNreserved2();

        /**
         * <code>optional int32 nreserved2 = 139;</code>
         * <p>
         * <pre>
         * 2014-02-27新增：告警申诉状态（需要有未申诉、处理中、申诉失败标识，申诉人可改变此状态）
         * </pre>
         */
        int getNreserved2();

        // optional int32 nreserved3 = 140;

        /**
         * <code>optional int32 nreserved3 = 140;</code>
         * <p>
         * <pre>
         *
         * </pre>
         */
        boolean hasNreserved3();

        /**
         * <code>optional int32 nreserved3 = 140;</code>
         * <p>
         * <pre>
         *
         * </pre>
         */
        int getNreserved3();

        // optional int32 nreserved4 = 141;

        /**
         * <code>optional int32 nreserved4 = 141;</code>
         */
        boolean hasNreserved4();

        /**
         * <code>optional int32 nreserved4 = 141;</code>
         */
        int getNreserved4();

        // optional .sp.ANA_POLICY_TYPE ana_policy_type = 142;

        /**
         * <code>optional .sp.ANA_POLICY_TYPE ana_policy_type = 142;</code>
         * <p>
         * <pre>
         * 分析策略类型ID，经过ABA分析策略处理之后，才会有该值，特用于 ABA
         * </pre>
         */
        boolean hasAnaPolicyType();

        /**
         * <code>optional .sp.ANA_POLICY_TYPE ana_policy_type = 142;</code>
         * <p>
         * <pre>
         * 分析策略类型ID，经过ABA分析策略处理之后，才会有该值，特用于 ABA
         * </pre>
         */
        sp.AuditEnum.ANA_POLICY_TYPE getAnaPolicyType();

        // optional bytes ana_policy_name = 143;

        /**
         * <code>optional bytes ana_policy_name = 143;</code>
         * <p>
         * <pre>
         * 分析策略名称，经过ABA分析策略处理之后，才会有该值，特用于 ABA
         * </pre>
         */
        boolean hasAnaPolicyName();

        /**
         * <code>optional bytes ana_policy_name = 143;</code>
         * <p>
         * <pre>
         * 分析策略名称，经过ABA分析策略处理之后，才会有该值，特用于 ABA
         * </pre>
         */
        com.google.protobuf.ByteString getAnaPolicyName();

        // optional int32 boss_trea_scene_type = 144;

        /**
         * <code>optional int32 boss_trea_scene_type = 144;</code>
         * <p>
         * <pre>
         * 业支专用金库场景类型ID
         * </pre>
         */
        boolean hasBossTreaSceneType();

        /**
         * <code>optional int32 boss_trea_scene_type = 144;</code>
         * <p>
         * <pre>
         * 业支专用金库场景类型ID
         * </pre>
         */
        int getBossTreaSceneType();

        // optional bytes boss_trea_scene_name = 145;

        /**
         * <code>optional bytes boss_trea_scene_name = 145;</code>
         * <p>
         * <pre>
         * 业支专用金库场景类型名称
         * </pre>
         */
        boolean hasBossTreaSceneName();

        /**
         * <code>optional bytes boss_trea_scene_name = 145;</code>
         * <p>
         * <pre>
         * 业支专用金库场景类型名称
         * </pre>
         */
        com.google.protobuf.ByteString getBossTreaSceneName();

        // optional bytes clientip = 146;

        /**
         * <code>optional bytes clientip = 146;</code>
         * <p>
         * <pre>
         * 客户端IP，补全后的客户端真实源IP
         * </pre>
         */
        boolean hasClientip();

        /**
         * <code>optional bytes clientip = 146;</code>
         * <p>
         * <pre>
         * 客户端IP，补全后的客户端真实源IP
         * </pre>
         */
        com.google.protobuf.ByteString getClientip();

        // optional uint32 processid = 147;

        /**
         * <code>optional uint32 processid = 147;</code>
         * <p>
         * <pre>
         * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
         * </pre>
         */
        boolean hasProcessid();

        /**
         * <code>optional uint32 processid = 147;</code>
         * <p>
         * <pre>
         * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
         * </pre>
         */
        int getProcessid();

        // optional bytes proc_starttime = 148;

        /**
         * <code>optional bytes proc_starttime = 148;</code>
         * <p>
         * <pre>
         * 进程启动时间
         * </pre>
         */
        boolean hasProcStarttime();

        /**
         * <code>optional bytes proc_starttime = 148;</code>
         * <p>
         * <pre>
         * 进程启动时间
         * </pre>
         */
        com.google.protobuf.ByteString getProcStarttime();

        // optional uint32 duration = 149;

        /**
         * <code>optional uint32 duration = 149;</code>
         * <p>
         * <pre>
         * 持续时长
         * </pre>
         */
        boolean hasDuration();

        /**
         * <code>optional uint32 duration = 149;</code>
         * <p>
         * <pre>
         * 持续时长
         * </pre>
         */
        int getDuration();

        // optional int32 protocol = 150;

        /**
         * <code>optional int32 protocol = 150;</code>
         * <p>
         * <pre>
         * 协议
         * </pre>
         */
        boolean hasProtocol();

        /**
         * <code>optional int32 protocol = 150;</code>
         * <p>
         * <pre>
         * 协议
         * </pre>
         */
        int getProtocol();

        // optional uint32 serv_port = 151;

        /**
         * <code>optional uint32 serv_port = 151;</code>
         * <p>
         * <pre>
         * 服务端口
         * </pre>
         */
        boolean hasServPort();

        /**
         * <code>optional uint32 serv_port = 151;</code>
         * <p>
         * <pre>
         * 服务端口
         * </pre>
         */
        int getServPort();

        // optional float flownum = 152;

        /**
         * <code>optional float flownum = 152;</code>
         * <p>
         * <pre>
         * 流量
         * </pre>
         */
        boolean hasFlownum();

        /**
         * <code>optional float flownum = 152;</code>
         * <p>
         * <pre>
         * 流量
         * </pre>
         */
        float getFlownum();

        // optional uint32 recnum = 153;

        /**
         * <code>optional uint32 recnum = 153;</code>
         * <p>
         * <pre>
         * 操作记录数
         * </pre>
         */
        boolean hasRecnum();

        /**
         * <code>optional uint32 recnum = 153;</code>
         * <p>
         * <pre>
         * 操作记录数
         * </pre>
         */
        int getRecnum();

        // optional bytes clientinfo = 154;

        /**
         * <code>optional bytes clientinfo = 154;</code>
         * <p>
         * <pre>
         * 客户端信息
         * </pre>
         */
        boolean hasClientinfo();

        /**
         * <code>optional bytes clientinfo = 154;</code>
         * <p>
         * <pre>
         * 客户端信息
         * </pre>
         */
        com.google.protobuf.ByteString getClientinfo();

        // optional bytes serverinfo = 155;

        /**
         * <code>optional bytes serverinfo = 155;</code>
         * <p>
         * <pre>
         * 服务端信息
         * </pre>
         */
        boolean hasServerinfo();

        /**
         * <code>optional bytes serverinfo = 155;</code>
         * <p>
         * <pre>
         * 服务端信息
         * </pre>
         */
        com.google.protobuf.ByteString getServerinfo();

        // optional int32 logclass = 156;

        /**
         * <code>optional int32 logclass = 156;</code>
         * <p>
         * <pre>
         * 日志种类
         * </pre>
         */
        boolean hasLogclass();

        /**
         * <code>optional int32 logclass = 156;</code>
         * <p>
         * <pre>
         * 日志种类
         * </pre>
         */
        int getLogclass();

        // optional int32 gbasport = 157;

        /**
         * <code>optional int32 gbasport = 157;</code>
         * <p>
         * <pre>
         * GBA连接设备时使用的源端口，内部使用
         * </pre>
         */
        boolean hasGbasport();

        /**
         * <code>optional int32 gbasport = 157;</code>
         * <p>
         * <pre>
         * GBA连接设备时使用的源端口，内部使用
         * </pre>
         */
        int getGbasport();

        // optional bytes iba_fillmemo = 158;

        /**
         * <code>optional bytes iba_fillmemo = 158;</code>
         * <p>
         * <pre>
         * IBA补全依据(内部使用)
         * </pre>
         */
        boolean hasIbaFillmemo();

        /**
         * <code>optional bytes iba_fillmemo = 158;</code>
         * <p>
         * <pre>
         * IBA补全依据(内部使用)
         * </pre>
         */
        com.google.protobuf.ByteString getIbaFillmemo();
    }

    /**
     * Protobuf type {@code sp.T_AUDIT_LOG}
     */
    public static final class T_AUDIT_LOG extends
            com.google.protobuf.GeneratedMessage
            implements T_AUDIT_LOGOrBuilder {
        // Use T_AUDIT_LOG.newBuilder() to construct.
        private T_AUDIT_LOG(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private T_AUDIT_LOG(boolean noInit) {
            this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private static final T_AUDIT_LOG defaultInstance;

        public static T_AUDIT_LOG getDefaultInstance() {
            return defaultInstance;
        }

        public T_AUDIT_LOG getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }

        private T_AUDIT_LOG(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            int mutable_bitField1_ = 0;
            int mutable_bitField2_ = 0;
            int mutable_bitField3_ = 0;
            int mutable_bitField4_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            bitField0_ |= 0x00000001;
                            sid_ = input.readBytes();
                            break;
                        }
                        case 18: {
                            sp.AuditLog.T_ALARM_LOG.Builder subBuilder = null;
                            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                                subBuilder = alarm_.toBuilder();
                            }
                            alarm_ = input.readMessage(sp.AuditLog.T_ALARM_LOG.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(alarm_);
                                alarm_ = subBuilder.buildPartial();
                            }
                            bitField0_ |= 0x00000002;
                            break;
                        }
                        case 64: {
                            bitField0_ |= 0x00000004;
                            mark_ = input.readInt32();
                            break;
                        }
                        case 72: {
                            bitField0_ |= 0x00000008;
                            seq_ = input.readUInt32();
                            break;
                        }
                        case 82: {
                            bitField0_ |= 0x00000010;
                            sessionid_ = input.readBytes();
                            break;
                        }
                        case 88: {
                            bitField0_ |= 0x00000020;
                            anaPolicyId_ = input.readInt32();
                            break;
                        }
                        case 96: {
                            int rawValue = input.readEnum();
                            sp.AuditEnum.LOG_TYPE value = sp.AuditEnum.LOG_TYPE.valueOf(rawValue);
                            if (value == null) {
                                unknownFields.mergeVarintField(12, rawValue);
                            } else {
                                bitField0_ |= 0x00000040;
                                logType_ = value;
                            }
                            break;
                        }
                        case 104: {
                            bitField0_ |= 0x00000080;
                            auditLogtypeid_ = input.readInt32();
                            break;
                        }
                        case 114: {
                            bitField0_ |= 0x00000100;
                            auditLogtypename_ = input.readBytes();
                            break;
                        }
                        case 120: {
                            bitField0_ |= 0x00000200;
                            astId_ = input.readInt32();
                            break;
                        }
                        case 130: {
                            bitField0_ |= 0x00000400;
                            astIp_ = input.readBytes();
                            break;
                        }
                        case 138: {
                            bitField0_ |= 0x00000800;
                            astName_ = input.readBytes();
                            break;
                        }
                        case 146: {
                            bitField0_ |= 0x00001000;
                            astRegionCode_ = input.readBytes();
                            break;
                        }
                        case 154: {
                            bitField0_ |= 0x00002000;
                            astRegionName_ = input.readBytes();
                            break;
                        }
                        case 160: {
                            bitField0_ |= 0x00004000;
                            hgid_ = input.readInt32();
                            break;
                        }
                        case 170: {
                            bitField0_ |= 0x00008000;
                            hgname_ = input.readBytes();
                            break;
                        }
                        case 178: {
                            bitField0_ |= 0x00010000;
                            progkey_ = input.readBytes();
                            break;
                        }
                        case 184: {
                            bitField0_ |= 0x00020000;
                            astTypeId_ = input.readInt32();
                            break;
                        }
                        case 194: {
                            bitField0_ |= 0x00040000;
                            astTypeCode_ = input.readBytes();
                            break;
                        }
                        case 202: {
                            bitField0_ |= 0x00080000;
                            astTypeName_ = input.readBytes();
                            break;
                        }
                        case 210: {
                            bitField0_ |= 0x00100000;
                            astAdmin_ = input.readBytes();
                            break;
                        }
                        case 216: {
                            bitField0_ |= 0x00200000;
                            keyAst_ = input.readInt32();
                            break;
                        }
                        case 224: {
                            bitField0_ |= 0x00400000;
                            engineId_ = input.readInt32();
                            break;
                        }
                        case 232: {
                            int rawValue = input.readEnum();
                            sp.AuditEnum.COMPONENT_TYPE value = sp.AuditEnum.COMPONENT_TYPE.valueOf(rawValue);
                            if (value == null) {
                                unknownFields.mergeVarintField(29, rawValue);
                            } else {
                                bitField0_ |= 0x00800000;
                                engineType_ = value;
                            }
                            break;
                        }
                        case 242: {
                            bitField0_ |= 0x01000000;
                            engineIp_ = input.readBytes();
                            break;
                        }
                        case 250: {
                            bitField0_ |= 0x02000000;
                            engineTypeName_ = input.readBytes();
                            break;
                        }
                        case 258: {
                            bitField0_ |= 0x04000000;
                            logSourceIp_ = input.readBytes();
                            break;
                        }
                        case 264: {
                            bitField0_ |= 0x08000000;
                            userid_ = input.readInt32();
                            break;
                        }
                        case 274: {
                            bitField0_ |= 0x10000000;
                            logname_ = input.readBytes();
                            break;
                        }
                        case 282: {
                            bitField0_ |= 0x20000000;
                            uname_ = input.readBytes();
                            break;
                        }
                        case 288: {
                            bitField0_ |= 0x40000000;
                            ouid_ = input.readInt32();
                            break;
                        }
                        case 298: {
                            bitField0_ |= 0x80000000;
                            ouname_ = input.readBytes();
                            break;
                        }
                        case 304: {
                            bitField1_ |= 0x00000001;
                            lognameTypeId_ = input.readInt32();
                            break;
                        }
                        case 314: {
                            bitField1_ |= 0x00000002;
                            lognameType_ = input.readBytes();
                            break;
                        }
                        case 322: {
                            bitField1_ |= 0x00000004;
                            lognameRegionCode_ = input.readBytes();
                            break;
                        }
                        case 330: {
                            bitField1_ |= 0x00000008;
                            lognameRegion_ = input.readBytes();
                            break;
                        }
                        case 336: {
                            bitField1_ |= 0x00000010;
                            lognameStatus_ = input.readInt32();
                            break;
                        }
                        case 344: {
                            bitField1_ |= 0x00000020;
                            treasuryLogType_ = input.readInt32();
                            break;
                        }
                        case 352: {
                            bitField1_ |= 0x00000040;
                            coUserid_ = input.readInt32();
                            break;
                        }
                        case 362: {
                            bitField1_ |= 0x00000080;
                            coUserLogname_ = input.readBytes();
                            break;
                        }
                        case 370: {
                            bitField1_ |= 0x00000100;
                            coUserName_ = input.readBytes();
                            break;
                        }
                        case 376: {
                            bitField1_ |= 0x00000200;
                            coUserOrgId_ = input.readInt32();
                            break;
                        }
                        case 386: {
                            bitField1_ |= 0x00000400;
                            coUserOrgName_ = input.readBytes();
                            break;
                        }
                        case 394: {
                            bitField1_ |= 0x00000800;
                            coUserMobile_ = input.readBytes();
                            break;
                        }
                        case 400: {
                            bitField1_ |= 0x00001000;
                            treasurySceneType_ = input.readInt32();
                            break;
                        }
                        case 410: {
                            bitField1_ |= 0x00002000;
                            treasurySceneId_ = input.readBytes();
                            break;
                        }
                        case 418: {
                            bitField1_ |= 0x00004000;
                            treasurySceneName_ = input.readBytes();
                            break;
                        }
                        case 424: {
                            bitField1_ |= 0x00008000;
                            treasuryAuthType_ = input.readInt32();
                            break;
                        }
                        case 434: {
                            bitField1_ |= 0x00010000;
                            accessType_ = input.readBytes();
                            break;
                        }
                        case 442: {
                            bitField1_ |= 0x00020000;
                            applyTimeSlot_ = input.readBytes();
                            break;
                        }
                        case 448: {
                            bitField1_ |= 0x00040000;
                            treasuryStatus_ = input.readInt32();
                            break;
                        }
                        case 458: {
                            bitField1_ |= 0x00080000;
                            specialServiceNum_ = input.readBytes();
                            break;
                        }
                        case 466: {
                            bitField1_ |= 0x00100000;
                            authResult_ = input.readBytes();
                            break;
                        }
                        case 474: {
                            bitField1_ |= 0x00200000;
                            smsContent_ = input.readBytes();
                            break;
                        }
                        case 480: {
                            bitField1_ |= 0x00400000;
                            accountId_ = input.readInt32();
                            break;
                        }
                        case 490: {
                            bitField1_ |= 0x00800000;
                            account_ = input.readBytes();
                            break;
                        }
                        case 498: {
                            bitField1_ |= 0x01000000;
                            appOuname_ = input.readBytes();
                            break;
                        }
                        case 504: {
                            bitField1_ |= 0x02000000;
                            accountTypeId_ = input.readInt32();
                            break;
                        }
                        case 514: {
                            bitField1_ |= 0x04000000;
                            accountTypeName_ = input.readBytes();
                            break;
                        }
                        case 522: {
                            bitField1_ |= 0x08000000;
                            accountRegionCode_ = input.readBytes();
                            break;
                        }
                        case 530: {
                            bitField1_ |= 0x10000000;
                            accountRegion_ = input.readBytes();
                            break;
                        }
                        case 536: {
                            bitField1_ |= 0x20000000;
                            accountStatus_ = input.readInt32();
                            break;
                        }
                        case 544: {
                            bitField1_ |= 0x40000000;
                            logtimeSec_ = input.readUInt64();
                            break;
                        }
                        case 552: {
                            bitField1_ |= 0x80000000;
                            logtimeMsec_ = input.readUInt64();
                            break;
                        }
                        case 562: {
                            bitField2_ |= 0x00000001;
                            endtime_ = input.readBytes();
                            break;
                        }
                        case 568: {
                            bitField2_ |= 0x00000002;
                            gatherSec_ = input.readUInt64();
                            break;
                        }
                        case 576: {
                            bitField2_ |= 0x00000004;
                            gatherMsec_ = input.readUInt64();
                            break;
                        }
                        case 586: {
                            bitField2_ |= 0x00000008;
                            sip_ = input.readBytes();
                            break;
                        }
                        case 594: {
                            bitField2_ |= 0x00000010;
                            smac_ = input.readBytes();
                            break;
                        }
                        case 600: {
                            bitField2_ |= 0x00000020;
                            sport_ = input.readUInt32();
                            break;
                        }
                        case 610: {
                            bitField2_ |= 0x00000040;
                            dip_ = input.readBytes();
                            break;
                        }
                        case 618: {
                            bitField2_ |= 0x00000080;
                            dmac_ = input.readBytes();
                            break;
                        }
                        case 624: {
                            bitField2_ |= 0x00000100;
                            dport_ = input.readUInt32();
                            break;
                        }
                        case 632: {
                            bitField2_ |= 0x00000200;
                            eventid_ = input.readInt32();
                            break;
                        }
                        case 640: {
                            int rawValue = input.readEnum();
                            sp.AuditEnum.RISK_LEVEL value = sp.AuditEnum.RISK_LEVEL.valueOf(rawValue);
                            if (value == null) {
                                unknownFields.mergeVarintField(80, rawValue);
                            } else {
                                bitField2_ |= 0x00000400;
                                riskLevel_ = value;
                            }
                            break;
                        }
                        case 650: {
                            bitField2_ |= 0x00000800;
                            operate_ = input.readBytes();
                            break;
                        }
                        case 658: {
                            bitField2_ |= 0x00001000;
                            objId_ = input.readBytes();
                            break;
                        }
                        case 666: {
                            bitField2_ |= 0x00002000;
                            obj_ = input.readBytes();
                            break;
                        }
                        case 674: {
                            bitField2_ |= 0x00004000;
                            objParentId_ = input.readBytes();
                            break;
                        }
                        case 682: {
                            bitField2_ |= 0x00008000;
                            objParentName_ = input.readBytes();
                            break;
                        }
                        case 690: {
                            bitField2_ |= 0x00010000;
                            objectstationCode_ = input.readBytes();
                            break;
                        }
                        case 698: {
                            bitField2_ |= 0x00020000;
                            objectstationName_ = input.readBytes();
                            break;
                        }
                        case 706: {
                            bitField2_ |= 0x00040000;
                            result_ = input.readBytes();
                            break;
                        }
                        case 712: {
                            bitField2_ |= 0x00080000;
                            retcode_ = input.readInt32();
                            break;
                        }
                        case 722: {
                            bitField2_ |= 0x00100000;
                            processname_ = input.readBytes();
                            break;
                        }
                        case 730: {
                            bitField2_ |= 0x00200000;
                            workinfo_ = input.readBytes();
                            break;
                        }
                        case 738: {
                            bitField2_ |= 0x00400000;
                            logreason_ = input.readBytes();
                            break;
                        }
                        case 746: {
                            bitField2_ |= 0x00800000;
                            vdata_ = input.readBytes();
                            break;
                        }
                        case 752: {
                            bitField2_ |= 0x01000000;
                            facility_ = input.readInt32();
                            break;
                        }
                        case 760: {
                            bitField2_ |= 0x02000000;
                            severity_ = input.readInt32();
                            break;
                        }
                        case 770: {
                            bitField2_ |= 0x04000000;
                            memo_ = input.readBytes();
                            break;
                        }
                        case 778: {
                            bitField2_ |= 0x08000000;
                            hbasession_ = input.readBytes();
                            break;
                        }
                        case 784: {
                            bitField2_ |= 0x10000000;
                            opTypeId_ = input.readInt32();
                            break;
                        }
                        case 794: {
                            bitField2_ |= 0x20000000;
                            opType_ = input.readBytes();
                            break;
                        }
                        case 800: {
                            bitField2_ |= 0x40000000;
                            opClassId_ = input.readInt32();
                            break;
                        }
                        case 810: {
                            bitField2_ |= 0x80000000;
                            opClass_ = input.readBytes();
                            break;
                        }
                        case 816: {
                            bitField3_ |= 0x00000001;
                            opItemId_ = input.readInt32();
                            break;
                        }
                        case 826: {
                            bitField3_ |= 0x00000002;
                            opItem_ = input.readBytes();
                            break;
                        }
                        case 834: {
                            bitField3_ |= 0x00000004;
                            opCode_ = input.readBytes();
                            break;
                        }
                        case 840: {
                            bitField3_ |= 0x00000008;
                            opKeyId_ = input.readInt32();
                            break;
                        }
                        case 850: {
                            bitField3_ |= 0x00000010;
                            opKey_ = input.readBytes();
                            break;
                        }
                        case 858: {
                            bitField3_ |= 0x00000020;
                            operatetypeid_ = input.readBytes();
                            break;
                        }
                        case 866: {
                            bitField3_ |= 0x00000040;
                            operatetypename_ = input.readBytes();
                            break;
                        }
                        case 874: {
                            bitField3_ |= 0x00000080;
                            authtype_ = input.readBytes();
                            break;
                        }
                        case 882: {
                            bitField3_ |= 0x00000100;
                            logid_ = input.readBytes();
                            break;
                        }
                        case 890: {
                            bitField3_ |= 0x00000200;
                            orgname_ = input.readBytes();
                            break;
                        }
                        case 898: {
                            bitField3_ |= 0x00000400;
                            recdefid_ = input.readBytes();
                            break;
                        }
                        case 906: {
                            bitField3_ |= 0x00000800;
                            recdedate_ = input.readBytes();
                            break;
                        }
                        case 914: {
                            bitField3_ |= 0x00001000;
                            formnum_ = input.readBytes();
                            break;
                        }
                        case 922: {
                            bitField3_ |= 0x00002000;
                            jobcount_ = input.readBytes();
                            break;
                        }
                        case 930: {
                            bitField3_ |= 0x00004000;
                            okcount_ = input.readBytes();
                            break;
                        }
                        case 938: {
                            bitField3_ |= 0x00008000;
                            failcount_ = input.readBytes();
                            break;
                        }
                        case 946: {
                            bitField3_ |= 0x00010000;
                            servnumber_ = input.readBytes();
                            break;
                        }
                        case 954: {
                            bitField3_ |= 0x00020000;
                            recname_ = input.readBytes();
                            break;
                        }
                        case 962: {
                            bitField3_ |= 0x00040000;
                            status_ = input.readBytes();
                            break;
                        }
                        case 970: {
                            bitField3_ |= 0x00080000;
                            filluuid_ = input.readBytes();
                            break;
                        }
                        case 978: {
                            bitField3_ |= 0x00100000;
                            reserved0_ = input.readBytes();
                            break;
                        }
                        case 986: {
                            bitField3_ |= 0x00200000;
                            reserved1_ = input.readBytes();
                            break;
                        }
                        case 994: {
                            bitField3_ |= 0x00400000;
                            reserved2_ = input.readBytes();
                            break;
                        }
                        case 1002: {
                            bitField3_ |= 0x00800000;
                            reserved3_ = input.readBytes();
                            break;
                        }
                        case 1010: {
                            bitField3_ |= 0x01000000;
                            reserved4_ = input.readBytes();
                            break;
                        }
                        case 1018: {
                            bitField3_ |= 0x02000000;
                            reserved5_ = input.readBytes();
                            break;
                        }
                        case 1026: {
                            bitField3_ |= 0x04000000;
                            reserved6_ = input.readBytes();
                            break;
                        }
                        case 1034: {
                            bitField3_ |= 0x08000000;
                            reserved7_ = input.readBytes();
                            break;
                        }
                        case 1042: {
                            bitField3_ |= 0x10000000;
                            reserved8_ = input.readBytes();
                            break;
                        }
                        case 1050: {
                            bitField3_ |= 0x20000000;
                            reserved9_ = input.readBytes();
                            break;
                        }
                        case 1058: {
                            bitField3_ |= 0x40000000;
                            resKey_ = input.readBytes();
                            break;
                        }
                        case 1066: {
                            bitField3_ |= 0x80000000;
                            logtable_ = input.readBytes();
                            break;
                        }
                        case 1072: {
                            bitField4_ |= 0x00000001;
                            functionid_ = input.readInt32();
                            break;
                        }
                        case 1082: {
                            bitField4_ |= 0x00000002;
                            functionname_ = input.readBytes();
                            break;
                        }
                        case 1088: {
                            bitField4_ |= 0x00000004;
                            direction_ = input.readInt32();
                            break;
                        }
                        case 1096: {
                            bitField4_ |= 0x00000008;
                            nreserved0_ = input.readInt32();
                            break;
                        }
                        case 1104: {
                            bitField4_ |= 0x00000010;
                            nreserved1_ = input.readInt32();
                            break;
                        }
                        case 1112: {
                            bitField4_ |= 0x00000020;
                            nreserved2_ = input.readInt32();
                            break;
                        }
                        case 1120: {
                            bitField4_ |= 0x00000040;
                            nreserved3_ = input.readInt32();
                            break;
                        }
                        case 1128: {
                            bitField4_ |= 0x00000080;
                            nreserved4_ = input.readInt32();
                            break;
                        }
                        case 1136: {
                            int rawValue = input.readEnum();
                            sp.AuditEnum.ANA_POLICY_TYPE value = sp.AuditEnum.ANA_POLICY_TYPE.valueOf(rawValue);
                            if (value == null) {
                                unknownFields.mergeVarintField(142, rawValue);
                            } else {
                                bitField4_ |= 0x00000100;
                                anaPolicyType_ = value;
                            }
                            break;
                        }
                        case 1146: {
                            bitField4_ |= 0x00000200;
                            anaPolicyName_ = input.readBytes();
                            break;
                        }
                        case 1152: {
                            bitField4_ |= 0x00000400;
                            bossTreaSceneType_ = input.readInt32();
                            break;
                        }
                        case 1162: {
                            bitField4_ |= 0x00000800;
                            bossTreaSceneName_ = input.readBytes();
                            break;
                        }
                        case 1170: {
                            bitField4_ |= 0x00001000;
                            clientip_ = input.readBytes();
                            break;
                        }
                        case 1176: {
                            bitField4_ |= 0x00002000;
                            processid_ = input.readUInt32();
                            break;
                        }
                        case 1186: {
                            bitField4_ |= 0x00004000;
                            procStarttime_ = input.readBytes();
                            break;
                        }
                        case 1192: {
                            bitField4_ |= 0x00008000;
                            duration_ = input.readUInt32();
                            break;
                        }
                        case 1200: {
                            bitField4_ |= 0x00010000;
                            protocol_ = input.readInt32();
                            break;
                        }
                        case 1208: {
                            bitField4_ |= 0x00020000;
                            servPort_ = input.readUInt32();
                            break;
                        }
                        case 1221: {
                            bitField4_ |= 0x00040000;
                            flownum_ = input.readFloat();
                            break;
                        }
                        case 1224: {
                            bitField4_ |= 0x00080000;
                            recnum_ = input.readUInt32();
                            break;
                        }
                        case 1234: {
                            bitField4_ |= 0x00100000;
                            clientinfo_ = input.readBytes();
                            break;
                        }
                        case 1242: {
                            bitField4_ |= 0x00200000;
                            serverinfo_ = input.readBytes();
                            break;
                        }
                        case 1248: {
                            bitField4_ |= 0x00400000;
                            logclass_ = input.readInt32();
                            break;
                        }
                        case 1256: {
                            bitField4_ |= 0x00800000;
                            gbasport_ = input.readInt32();
                            break;
                        }
                        case 1266: {
                            bitField4_ |= 0x01000000;
                            ibaFillmemo_ = input.readBytes();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return sp.AuditLog.internal_static_sp_T_AUDIT_LOG_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return sp.AuditLog.internal_static_sp_T_AUDIT_LOG_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            sp.AuditLog.T_AUDIT_LOG.class, sp.AuditLog.T_AUDIT_LOG.Builder.class);
        }

        public static com.google.protobuf.Parser<T_AUDIT_LOG> PARSER =
                new com.google.protobuf.AbstractParser<T_AUDIT_LOG>() {
                    public T_AUDIT_LOG parsePartialFrom(
                            com.google.protobuf.CodedInputStream input,
                            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                            throws com.google.protobuf.InvalidProtocolBufferException {
                        return new T_AUDIT_LOG(input, extensionRegistry);
                    }
                };

        @java.lang.Override
        public com.google.protobuf.Parser<T_AUDIT_LOG> getParserForType() {
            return PARSER;
        }

        private int bitField0_;
        private int bitField1_;
        private int bitField2_;
        private int bitField3_;
        private int bitField4_;
        // required bytes sid = 1;
        public static final int SID_FIELD_NUMBER = 1;
        private com.google.protobuf.ByteString sid_;

        /**
         * <code>required bytes sid = 1;</code>
         * <p>
         * <pre>
         * 每条日志的UUID，主键，由引擎或4A产生
         * </pre>
         */
        public boolean hasSid() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>required bytes sid = 1;</code>
         * <p>
         * <pre>
         * 每条日志的UUID，主键，由引擎或4A产生
         * </pre>
         */
        public com.google.protobuf.ByteString getSid() {
            return sid_;
        }

        // optional .sp.T_ALARM_LOG alarm = 2;
        public static final int ALARM_FIELD_NUMBER = 2;
        private sp.AuditLog.T_ALARM_LOG alarm_;

        /**
         * <code>optional .sp.T_ALARM_LOG alarm = 2;</code>
         * <p>
         * <pre>
         * 告警信息，ABA告警时补全
         * </pre>
         */
        public boolean hasAlarm() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>optional .sp.T_ALARM_LOG alarm = 2;</code>
         * <p>
         * <pre>
         * 告警信息，ABA告警时补全
         * </pre>
         */
        public sp.AuditLog.T_ALARM_LOG getAlarm() {
            return alarm_;
        }

        /**
         * <code>optional .sp.T_ALARM_LOG alarm = 2;</code>
         * <p>
         * <pre>
         * 告警信息，ABA告警时补全
         * </pre>
         */
        public sp.AuditLog.T_ALARM_LOGOrBuilder getAlarmOrBuilder() {
            return alarm_;
        }

        // optional int32 mark = 8;
        public static final int MARK_FIELD_NUMBER = 8;
        private int mark_;

        /**
         * <code>optional int32 mark = 8;</code>
         * <p>
         * <pre>
         * 是否合法，特指合法绕行或非法绕行，特用于 ABA
         * </pre>
         */
        public boolean hasMark() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }

        /**
         * <code>optional int32 mark = 8;</code>
         * <p>
         * <pre>
         * 是否合法，特指合法绕行或非法绕行，特用于 ABA
         * </pre>
         */
        public int getMark() {
            return mark_;
        }

        // optional uint32 seq = 9;
        public static final int SEQ_FIELD_NUMBER = 9;
        private int seq_;

        /**
         * <code>optional uint32 seq = 9;</code>
         * <p>
         * <pre>
         * 执行顺序，与 t_oper 表中的 seq 进行对应，用作倒推查询
         * </pre>
         */
        public boolean hasSeq() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
        }

        /**
         * <code>optional uint32 seq = 9;</code>
         * <p>
         * <pre>
         * 执行顺序，与 t_oper 表中的 seq 进行对应，用作倒推查询
         * </pre>
         */
        public int getSeq() {
            return seq_;
        }

        // optional bytes sessionid = 10;
        public static final int SESSIONID_FIELD_NUMBER = 10;
        private com.google.protobuf.ByteString sessionid_;

        /**
         * <code>optional bytes sessionid = 10;</code>
         * <p>
         * <pre>
         * 用户会话ID，指登录4A时产生的会话
         * </pre>
         */
        public boolean hasSessionid() {
            return ((bitField0_ & 0x00000010) == 0x00000010);
        }

        /**
         * <code>optional bytes sessionid = 10;</code>
         * <p>
         * <pre>
         * 用户会话ID，指登录4A时产生的会话
         * </pre>
         */
        public com.google.protobuf.ByteString getSessionid() {
            return sessionid_;
        }

        // optional int32 ana_policy_id = 11;
        public static final int ANA_POLICY_ID_FIELD_NUMBER = 11;
        private int anaPolicyId_;

        /**
         * <code>optional int32 ana_policy_id = 11;</code>
         * <p>
         * <pre>
         * 分析策略ID，经过ABA分析策略处理之后，才会有该值，特用于 ABA
         * </pre>
         */
        public boolean hasAnaPolicyId() {
            return ((bitField0_ & 0x00000020) == 0x00000020);
        }

        /**
         * <code>optional int32 ana_policy_id = 11;</code>
         * <p>
         * <pre>
         * 分析策略ID，经过ABA分析策略处理之后，才会有该值，特用于 ABA
         * </pre>
         */
        public int getAnaPolicyId() {
            return anaPolicyId_;
        }

        // required .sp.LOG_TYPE log_type = 12;
        public static final int LOG_TYPE_FIELD_NUMBER = 12;
        private sp.AuditEnum.LOG_TYPE logType_;

        /**
         * <code>required .sp.LOG_TYPE log_type = 12;</code>
         * <p>
         * <pre>
         * 审计日志类型ID，可能取值：LOGON、LOGOFF、FILL_LOG、USER_OPER_LOG、JDBC_LOG、NBA_OPER等
         * </pre>
         */
        public boolean hasLogType() {
            return ((bitField0_ & 0x00000040) == 0x00000040);
        }

        /**
         * <code>required .sp.LOG_TYPE log_type = 12;</code>
         * <p>
         * <pre>
         * 审计日志类型ID，可能取值：LOGON、LOGOFF、FILL_LOG、USER_OPER_LOG、JDBC_LOG、NBA_OPER等
         * </pre>
         */
        public sp.AuditEnum.LOG_TYPE getLogType() {
            return logType_;
        }

        // optional int32 audit_logtypeid = 13;
        public static final int AUDIT_LOGTYPEID_FIELD_NUMBER = 13;
        private int auditLogtypeid_;

        /**
         * <code>optional int32 audit_logtypeid = 13;</code>
         * <p>
         * <pre>
         * 应用ID
         * </pre>
         */
        public boolean hasAuditLogtypeid() {
            return ((bitField0_ & 0x00000080) == 0x00000080);
        }

        /**
         * <code>optional int32 audit_logtypeid = 13;</code>
         * <p>
         * <pre>
         * 应用ID
         * </pre>
         */
        public int getAuditLogtypeid() {
            return auditLogtypeid_;
        }

        // optional bytes audit_logtypename = 14;
        public static final int AUDIT_LOGTYPENAME_FIELD_NUMBER = 14;
        private com.google.protobuf.ByteString auditLogtypename_;

        /**
         * <code>optional bytes audit_logtypename = 14;</code>
         * <p>
         * <pre>
         * 应用名称
         * </pre>
         */
        public boolean hasAuditLogtypename() {
            return ((bitField0_ & 0x00000100) == 0x00000100);
        }

        /**
         * <code>optional bytes audit_logtypename = 14;</code>
         * <p>
         * <pre>
         * 应用名称
         * </pre>
         */
        public com.google.protobuf.ByteString getAuditLogtypename() {
            return auditLogtypename_;
        }

        // optional int32 ast_id = 15;
        public static final int AST_ID_FIELD_NUMBER = 15;
        private int astId_;

        /**
         * <code>optional int32 ast_id = 15;</code>
         * <p>
         * <pre>
         * 资产ID
         * </pre>
         */
        public boolean hasAstId() {
            return ((bitField0_ & 0x00000200) == 0x00000200);
        }

        /**
         * <code>optional int32 ast_id = 15;</code>
         * <p>
         * <pre>
         * 资产ID
         * </pre>
         */
        public int getAstId() {
            return astId_;
        }

        // optional bytes ast_ip = 16;
        public static final int AST_IP_FIELD_NUMBER = 16;
        private com.google.protobuf.ByteString astIp_;

        /**
         * <code>optional bytes ast_ip = 16;</code>
         * <p>
         * <pre>
         * 资产IP，必须转化为整数后再进行传送，避免非法的IP地址格式
         * </pre>
         */
        public boolean hasAstIp() {
            return ((bitField0_ & 0x00000400) == 0x00000400);
        }

        /**
         * <code>optional bytes ast_ip = 16;</code>
         * <p>
         * <pre>
         * 资产IP，必须转化为整数后再进行传送，避免非法的IP地址格式
         * </pre>
         */
        public com.google.protobuf.ByteString getAstIp() {
            return astIp_;
        }

        // optional bytes ast_name = 17;
        public static final int AST_NAME_FIELD_NUMBER = 17;
        private com.google.protobuf.ByteString astName_;

        /**
         * <code>optional bytes ast_name = 17;</code>
         * <p>
         * <pre>
         * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
         * </pre>
         */
        public boolean hasAstName() {
            return ((bitField0_ & 0x00000800) == 0x00000800);
        }

        /**
         * <code>optional bytes ast_name = 17;</code>
         * <p>
         * <pre>
         * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
         * </pre>
         */
        public com.google.protobuf.ByteString getAstName() {
            return astName_;
        }

        // optional bytes ast_region_code = 18;
        public static final int AST_REGION_CODE_FIELD_NUMBER = 18;
        private com.google.protobuf.ByteString astRegionCode_;

        /**
         * <code>optional bytes ast_region_code = 18;</code>
         * <p>
         * <pre>
         * 资产地域编码
         * </pre>
         */
        public boolean hasAstRegionCode() {
            return ((bitField0_ & 0x00001000) == 0x00001000);
        }

        /**
         * <code>optional bytes ast_region_code = 18;</code>
         * <p>
         * <pre>
         * 资产地域编码
         * </pre>
         */
        public com.google.protobuf.ByteString getAstRegionCode() {
            return astRegionCode_;
        }

        // optional bytes ast_region_name = 19;
        public static final int AST_REGION_NAME_FIELD_NUMBER = 19;
        private com.google.protobuf.ByteString astRegionName_;

        /**
         * <code>optional bytes ast_region_name = 19;</code>
         * <p>
         * <pre>
         * 资产地域名称
         * </pre>
         */
        public boolean hasAstRegionName() {
            return ((bitField0_ & 0x00002000) == 0x00002000);
        }

        /**
         * <code>optional bytes ast_region_name = 19;</code>
         * <p>
         * <pre>
         * 资产地域名称
         * </pre>
         */
        public com.google.protobuf.ByteString getAstRegionName() {
            return astRegionName_;
        }

        // optional int32 hgid = 20;
        public static final int HGID_FIELD_NUMBER = 20;
        private int hgid_;

        /**
         * <code>optional int32 hgid = 20;</code>
         * <p>
         * <pre>
         * 资源组ID；重要，在审计分级管理中起决定性作用
         * </pre>
         */
        public boolean hasHgid() {
            return ((bitField0_ & 0x00004000) == 0x00004000);
        }

        /**
         * <code>optional int32 hgid = 20;</code>
         * <p>
         * <pre>
         * 资源组ID；重要，在审计分级管理中起决定性作用
         * </pre>
         */
        public int getHgid() {
            return hgid_;
        }

        // optional bytes hgname = 21;
        public static final int HGNAME_FIELD_NUMBER = 21;
        private com.google.protobuf.ByteString hgname_;

        /**
         * <code>optional bytes hgname = 21;</code>
         * <p>
         * <pre>
         * 资源组名称
         * </pre>
         */
        public boolean hasHgname() {
            return ((bitField0_ & 0x00008000) == 0x00008000);
        }

        /**
         * <code>optional bytes hgname = 21;</code>
         * <p>
         * <pre>
         * 资源组名称
         * </pre>
         */
        public com.google.protobuf.ByteString getHgname() {
            return hgname_;
        }

        // optional bytes progkey = 22;
        public static final int PROGKEY_FIELD_NUMBER = 22;
        private com.google.protobuf.ByteString progkey_;

        /**
         * <code>optional bytes progkey = 22;</code>
         * <p>
         * <pre>
         * 所属IT系统
         * </pre>
         */
        public boolean hasProgkey() {
            return ((bitField0_ & 0x00010000) == 0x00010000);
        }

        /**
         * <code>optional bytes progkey = 22;</code>
         * <p>
         * <pre>
         * 所属IT系统
         * </pre>
         */
        public com.google.protobuf.ByteString getProgkey() {
            return progkey_;
        }

        // optional int32 ast_type_id = 23;
        public static final int AST_TYPE_ID_FIELD_NUMBER = 23;
        private int astTypeId_;

        /**
         * <code>optional int32 ast_type_id = 23;</code>
         * <p>
         * <pre>
         * 资产类型ID
         * </pre>
         */
        public boolean hasAstTypeId() {
            return ((bitField0_ & 0x00020000) == 0x00020000);
        }

        /**
         * <code>optional int32 ast_type_id = 23;</code>
         * <p>
         * <pre>
         * 资产类型ID
         * </pre>
         */
        public int getAstTypeId() {
            return astTypeId_;
        }

        // optional bytes ast_type_code = 24;
        public static final int AST_TYPE_CODE_FIELD_NUMBER = 24;
        private com.google.protobuf.ByteString astTypeCode_;

        /**
         * <code>optional bytes ast_type_code = 24;</code>
         * <p>
         * <pre>
         * 资产类型编码
         * </pre>
         */
        public boolean hasAstTypeCode() {
            return ((bitField0_ & 0x00040000) == 0x00040000);
        }

        /**
         * <code>optional bytes ast_type_code = 24;</code>
         * <p>
         * <pre>
         * 资产类型编码
         * </pre>
         */
        public com.google.protobuf.ByteString getAstTypeCode() {
            return astTypeCode_;
        }

        // optional bytes ast_type_name = 25;
        public static final int AST_TYPE_NAME_FIELD_NUMBER = 25;
        private com.google.protobuf.ByteString astTypeName_;

        /**
         * <code>optional bytes ast_type_name = 25;</code>
         * <p>
         * <pre>
         * 资产类型名称
         * </pre>
         */
        public boolean hasAstTypeName() {
            return ((bitField0_ & 0x00080000) == 0x00080000);
        }

        /**
         * <code>optional bytes ast_type_name = 25;</code>
         * <p>
         * <pre>
         * 资产类型名称
         * </pre>
         */
        public com.google.protobuf.ByteString getAstTypeName() {
            return astTypeName_;
        }

        // optional bytes ast_admin = 26;
        public static final int AST_ADMIN_FIELD_NUMBER = 26;
        private com.google.protobuf.ByteString astAdmin_;

        /**
         * <code>optional bytes ast_admin = 26;</code>
         * <p>
         * <pre>
         * 资产管理人员
         * </pre>
         */
        public boolean hasAstAdmin() {
            return ((bitField0_ & 0x00100000) == 0x00100000);
        }

        /**
         * <code>optional bytes ast_admin = 26;</code>
         * <p>
         * <pre>
         * 资产管理人员
         * </pre>
         */
        public com.google.protobuf.ByteString getAstAdmin() {
            return astAdmin_;
        }

        // optional int32 key_ast = 27;
        public static final int KEY_AST_FIELD_NUMBER = 27;
        private int keyAst_;

        /**
         * <code>optional int32 key_ast = 27;</code>
         * <p>
         * <pre>
         * 资产重要程度（是否关键资产）
         * </pre>
         */
        public boolean hasKeyAst() {
            return ((bitField0_ & 0x00200000) == 0x00200000);
        }

        /**
         * <code>optional int32 key_ast = 27;</code>
         * <p>
         * <pre>
         * 资产重要程度（是否关键资产）
         * </pre>
         */
        public int getKeyAst() {
            return keyAst_;
        }

        // optional int32 engine_id = 28;
        public static final int ENGINE_ID_FIELD_NUMBER = 28;
        private int engineId_;

        /**
         * <code>optional int32 engine_id = 28;</code>
         * <p>
         * <pre>
         * 审计引擎ID
         * </pre>
         */
        public boolean hasEngineId() {
            return ((bitField0_ & 0x00400000) == 0x00400000);
        }

        /**
         * <code>optional int32 engine_id = 28;</code>
         * <p>
         * <pre>
         * 审计引擎ID
         * </pre>
         */
        public int getEngineId() {
            return engineId_;
        }

        // optional .sp.COMPONENT_TYPE engine_type = 29;
        public static final int ENGINE_TYPE_FIELD_NUMBER = 29;
        private sp.AuditEnum.COMPONENT_TYPE engineType_;

        /**
         * <code>optional .sp.COMPONENT_TYPE engine_type = 29;</code>
         * <p>
         * <pre>
         * 引擎类型
         * </pre>
         */
        public boolean hasEngineType() {
            return ((bitField0_ & 0x00800000) == 0x00800000);
        }

        /**
         * <code>optional .sp.COMPONENT_TYPE engine_type = 29;</code>
         * <p>
         * <pre>
         * 引擎类型
         * </pre>
         */
        public sp.AuditEnum.COMPONENT_TYPE getEngineType() {
            return engineType_;
        }

        // optional bytes engine_ip = 30;
        public static final int ENGINE_IP_FIELD_NUMBER = 30;
        private com.google.protobuf.ByteString engineIp_;

        /**
         * <code>optional bytes engine_ip = 30;</code>
         * <p>
         * <pre>
         * 引擎IP
         * </pre>
         */
        public boolean hasEngineIp() {
            return ((bitField0_ & 0x01000000) == 0x01000000);
        }

        /**
         * <code>optional bytes engine_ip = 30;</code>
         * <p>
         * <pre>
         * 引擎IP
         * </pre>
         */
        public com.google.protobuf.ByteString getEngineIp() {
            return engineIp_;
        }

        // optional bytes engine_type_name = 31;
        public static final int ENGINE_TYPE_NAME_FIELD_NUMBER = 31;
        private com.google.protobuf.ByteString engineTypeName_;

        /**
         * <code>optional bytes engine_type_name = 31;</code>
         * <p>
         * <pre>
         * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
         * </pre>
         */
        public boolean hasEngineTypeName() {
            return ((bitField0_ & 0x02000000) == 0x02000000);
        }

        /**
         * <code>optional bytes engine_type_name = 31;</code>
         * <p>
         * <pre>
         * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
         * </pre>
         */
        public com.google.protobuf.ByteString getEngineTypeName() {
            return engineTypeName_;
        }

        // optional bytes log_source_ip = 32;
        public static final int LOG_SOURCE_IP_FIELD_NUMBER = 32;
        private com.google.protobuf.ByteString logSourceIp_;

        /**
         * <code>optional bytes log_source_ip = 32;</code>
         * <p>
         * <pre>
         * 日志来源IP，4A 3.3、3.4版本中，金库日志使用该字段
         * </pre>
         */
        public boolean hasLogSourceIp() {
            return ((bitField0_ & 0x04000000) == 0x04000000);
        }

        /**
         * <code>optional bytes log_source_ip = 32;</code>
         * <p>
         * <pre>
         * 日志来源IP，4A 3.3、3.4版本中，金库日志使用该字段
         * </pre>
         */
        public com.google.protobuf.ByteString getLogSourceIp() {
            return logSourceIp_;
        }

        // optional int32 userid = 33;
        public static final int USERID_FIELD_NUMBER = 33;
        private int userid_;

        /**
         * <code>optional int32 userid = 33;</code>
         * <p>
         * <pre>
         * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
         * </pre>
         */
        public boolean hasUserid() {
            return ((bitField0_ & 0x08000000) == 0x08000000);
        }

        /**
         * <code>optional int32 userid = 33;</code>
         * <p>
         * <pre>
         * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
         * </pre>
         */
        public int getUserid() {
            return userid_;
        }

        // optional bytes logname = 34;
        public static final int LOGNAME_FIELD_NUMBER = 34;
        private com.google.protobuf.ByteString logname_;

        /**
         * <code>optional bytes logname = 34;</code>
         * <p>
         * <pre>
         * 主帐号
         * </pre>
         */
        public boolean hasLogname() {
            return ((bitField0_ & 0x10000000) == 0x10000000);
        }

        /**
         * <code>optional bytes logname = 34;</code>
         * <p>
         * <pre>
         * 主帐号
         * </pre>
         */
        public com.google.protobuf.ByteString getLogname() {
            return logname_;
        }

        // optional bytes uname = 35;
        public static final int UNAME_FIELD_NUMBER = 35;
        private com.google.protobuf.ByteString uname_;

        /**
         * <code>optional bytes uname = 35;</code>
         * <p>
         * <pre>
         * 用户姓名
         * </pre>
         */
        public boolean hasUname() {
            return ((bitField0_ & 0x20000000) == 0x20000000);
        }

        /**
         * <code>optional bytes uname = 35;</code>
         * <p>
         * <pre>
         * 用户姓名
         * </pre>
         */
        public com.google.protobuf.ByteString getUname() {
            return uname_;
        }

        // optional int32 ouid = 36;
        public static final int OUID_FIELD_NUMBER = 36;
        private int ouid_;

        /**
         * <code>optional int32 ouid = 36;</code>
         * <p>
         * <pre>
         * 组织机构ID；重要，在审计分级管理中起决定性作用
         * </pre>
         */
        public boolean hasOuid() {
            return ((bitField0_ & 0x40000000) == 0x40000000);
        }

        /**
         * <code>optional int32 ouid = 36;</code>
         * <p>
         * <pre>
         * 组织机构ID；重要，在审计分级管理中起决定性作用
         * </pre>
         */
        public int getOuid() {
            return ouid_;
        }

        // optional bytes ouname = 37;
        public static final int OUNAME_FIELD_NUMBER = 37;
        private com.google.protobuf.ByteString ouname_;

        /**
         * <code>optional bytes ouname = 37;</code>
         * <p>
         * <pre>
         * 组织机构名称
         * </pre>
         */
        public boolean hasOuname() {
            return ((bitField0_ & 0x80000000) == 0x80000000);
        }

        /**
         * <code>optional bytes ouname = 37;</code>
         * <p>
         * <pre>
         * 组织机构名称
         * </pre>
         */
        public com.google.protobuf.ByteString getOuname() {
            return ouname_;
        }

        // optional int32 logname_type_id = 38;
        public static final int LOGNAME_TYPE_ID_FIELD_NUMBER = 38;
        private int lognameTypeId_;

        /**
         * <code>optional int32 logname_type_id = 38;</code>
         * <p>
         * <pre>
         * 主帐号类型ID
         * </pre>
         */
        public boolean hasLognameTypeId() {
            return ((bitField1_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>optional int32 logname_type_id = 38;</code>
         * <p>
         * <pre>
         * 主帐号类型ID
         * </pre>
         */
        public int getLognameTypeId() {
            return lognameTypeId_;
        }

        // optional bytes logname_type = 39;
        public static final int LOGNAME_TYPE_FIELD_NUMBER = 39;
        private com.google.protobuf.ByteString lognameType_;

        /**
         * <code>optional bytes logname_type = 39;</code>
         * <p>
         * <pre>
         * 主帐号类型，如：营业员、客服坐席、渠道、大客户经理等
         * </pre>
         */
        public boolean hasLognameType() {
            return ((bitField1_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>optional bytes logname_type = 39;</code>
         * <p>
         * <pre>
         * 主帐号类型，如：营业员、客服坐席、渠道、大客户经理等
         * </pre>
         */
        public com.google.protobuf.ByteString getLognameType() {
            return lognameType_;
        }

        // optional bytes logname_region_code = 40;
        public static final int LOGNAME_REGION_CODE_FIELD_NUMBER = 40;
        private com.google.protobuf.ByteString lognameRegionCode_;

        /**
         * <code>optional bytes logname_region_code = 40;</code>
         * <p>
         * <pre>
         * 主帐号地域编码
         * </pre>
         */
        public boolean hasLognameRegionCode() {
            return ((bitField1_ & 0x00000004) == 0x00000004);
        }

        /**
         * <code>optional bytes logname_region_code = 40;</code>
         * <p>
         * <pre>
         * 主帐号地域编码
         * </pre>
         */
        public com.google.protobuf.ByteString getLognameRegionCode() {
            return lognameRegionCode_;
        }

        // optional bytes logname_region = 41;
        public static final int LOGNAME_REGION_FIELD_NUMBER = 41;
        private com.google.protobuf.ByteString lognameRegion_;

        /**
         * <code>optional bytes logname_region = 41;</code>
         * <p>
         * <pre>
         * 主帐号地域
         * </pre>
         */
        public boolean hasLognameRegion() {
            return ((bitField1_ & 0x00000008) == 0x00000008);
        }

        /**
         * <code>optional bytes logname_region = 41;</code>
         * <p>
         * <pre>
         * 主帐号地域
         * </pre>
         */
        public com.google.protobuf.ByteString getLognameRegion() {
            return lognameRegion_;
        }

        // optional int32 logname_status = 42;
        public static final int LOGNAME_STATUS_FIELD_NUMBER = 42;
        private int lognameStatus_;

        /**
         * <code>optional int32 logname_status = 42;</code>
         * <p>
         * <pre>
         * 主帐号状态：正常/锁定/删除
         * </pre>
         */
        public boolean hasLognameStatus() {
            return ((bitField1_ & 0x00000010) == 0x00000010);
        }

        /**
         * <code>optional int32 logname_status = 42;</code>
         * <p>
         * <pre>
         * 主帐号状态：正常/锁定/删除
         * </pre>
         */
        public int getLognameStatus() {
            return lognameStatus_;
        }

        // optional int32 treasury_log_type = 43;
        public static final int TREASURY_LOG_TYPE_FIELD_NUMBER = 43;
        private int treasuryLogType_;

        /**
         * <code>optional int32 treasury_log_type = 43;</code>
         * <p>
         * <pre>
         * 金库日志类型:1-金库操作申请日志
         * </pre>
         */
        public boolean hasTreasuryLogType() {
            return ((bitField1_ & 0x00000020) == 0x00000020);
        }

        /**
         * <code>optional int32 treasury_log_type = 43;</code>
         * <p>
         * <pre>
         * 金库日志类型:1-金库操作申请日志
         * </pre>
         */
        public int getTreasuryLogType() {
            return treasuryLogType_;
        }

        // optional int32 co_userid = 44;
        public static final int CO_USERID_FIELD_NUMBER = 44;
        private int coUserid_;

        /**
         * <code>optional int32 co_userid = 44;</code>
         * <p>
         * <pre>
         * 2-金库授权审批日志
         * 3-金库动态码确认日志
         * 4-金库操作日志
         * 5-金库应急切换日志
         * 6-金库自身管理日志
         * 7-金库信息关联日志  提供给山西boss系统使用
         * </pre>
         */
        public boolean hasCoUserid() {
            return ((bitField1_ & 0x00000040) == 0x00000040);
        }

        /**
         * <code>optional int32 co_userid = 44;</code>
         * <p>
         * <pre>
         * 2-金库授权审批日志
         * 3-金库动态码确认日志
         * 4-金库操作日志
         * 5-金库应急切换日志
         * 6-金库自身管理日志
         * 7-金库信息关联日志  提供给山西boss系统使用
         * </pre>
         */
        public int getCoUserid() {
            return coUserid_;
        }

        // optional bytes co_user_logname = 45;
        public static final int CO_USER_LOGNAME_FIELD_NUMBER = 45;
        private com.google.protobuf.ByteString coUserLogname_;

        /**
         * <code>optional bytes co_user_logname = 45;</code>
         * <p>
         * <pre>
         * 协同操作人主帐号
         * </pre>
         */
        public boolean hasCoUserLogname() {
            return ((bitField1_ & 0x00000080) == 0x00000080);
        }

        /**
         * <code>optional bytes co_user_logname = 45;</code>
         * <p>
         * <pre>
         * 协同操作人主帐号
         * </pre>
         */
        public com.google.protobuf.ByteString getCoUserLogname() {
            return coUserLogname_;
        }

        // optional bytes co_user_name = 46;
        public static final int CO_USER_NAME_FIELD_NUMBER = 46;
        private com.google.protobuf.ByteString coUserName_;

        /**
         * <code>optional bytes co_user_name = 46;</code>
         * <p>
         * <pre>
         * 协同操作人姓名
         * </pre>
         */
        public boolean hasCoUserName() {
            return ((bitField1_ & 0x00000100) == 0x00000100);
        }

        /**
         * <code>optional bytes co_user_name = 46;</code>
         * <p>
         * <pre>
         * 协同操作人姓名
         * </pre>
         */
        public com.google.protobuf.ByteString getCoUserName() {
            return coUserName_;
        }

        // optional int32 co_user_org_id = 47;
        public static final int CO_USER_ORG_ID_FIELD_NUMBER = 47;
        private int coUserOrgId_;

        /**
         * <code>optional int32 co_user_org_id = 47;</code>
         * <p>
         * <pre>
         * 协同操作人组织机构ID
         * </pre>
         */
        public boolean hasCoUserOrgId() {
            return ((bitField1_ & 0x00000200) == 0x00000200);
        }

        /**
         * <code>optional int32 co_user_org_id = 47;</code>
         * <p>
         * <pre>
         * 协同操作人组织机构ID
         * </pre>
         */
        public int getCoUserOrgId() {
            return coUserOrgId_;
        }

        // optional bytes co_user_org_name = 48;
        public static final int CO_USER_ORG_NAME_FIELD_NUMBER = 48;
        private com.google.protobuf.ByteString coUserOrgName_;

        /**
         * <code>optional bytes co_user_org_name = 48;</code>
         * <p>
         * <pre>
         * 协同操作人组织机构名称
         * </pre>
         */
        public boolean hasCoUserOrgName() {
            return ((bitField1_ & 0x00000400) == 0x00000400);
        }

        /**
         * <code>optional bytes co_user_org_name = 48;</code>
         * <p>
         * <pre>
         * 协同操作人组织机构名称
         * </pre>
         */
        public com.google.protobuf.ByteString getCoUserOrgName() {
            return coUserOrgName_;
        }

        // optional bytes co_user_mobile = 49;
        public static final int CO_USER_MOBILE_FIELD_NUMBER = 49;
        private com.google.protobuf.ByteString coUserMobile_;

        /**
         * <code>optional bytes co_user_mobile = 49;</code>
         * <p>
         * <pre>
         * 协同操作人手机号码
         * </pre>
         */
        public boolean hasCoUserMobile() {
            return ((bitField1_ & 0x00000800) == 0x00000800);
        }

        /**
         * <code>optional bytes co_user_mobile = 49;</code>
         * <p>
         * <pre>
         * 协同操作人手机号码
         * </pre>
         */
        public com.google.protobuf.ByteString getCoUserMobile() {
            return coUserMobile_;
        }

        // optional int32 treasury_scene_type = 50;
        public static final int TREASURY_SCENE_TYPE_FIELD_NUMBER = 50;
        private int treasurySceneType_;

        /**
         * <code>optional int32 treasury_scene_type = 50;</code>
         * <p>
         * <pre>
         * 金库场景类型:1:VPN登陆场景
         * </pre>
         */
        public boolean hasTreasurySceneType() {
            return ((bitField1_ & 0x00001000) == 0x00001000);
        }

        /**
         * <code>optional int32 treasury_scene_type = 50;</code>
         * <p>
         * <pre>
         * 金库场景类型:1:VPN登陆场景
         * </pre>
         */
        public int getTreasurySceneType() {
            return treasurySceneType_;
        }

        // optional bytes treasury_scene_id = 51;
        public static final int TREASURY_SCENE_ID_FIELD_NUMBER = 51;
        private com.google.protobuf.ByteString treasurySceneId_;

        /**
         * <code>optional bytes treasury_scene_id = 51;</code>
         * <p>
         * <pre>
         * 2:内网登陆场景
         * 3:单点登陆场景
         * 4:高风险操作场景
         * 5:4A操作类场景
         * </pre>
         */
        public boolean hasTreasurySceneId() {
            return ((bitField1_ & 0x00002000) == 0x00002000);
        }

        /**
         * <code>optional bytes treasury_scene_id = 51;</code>
         * <p>
         * <pre>
         * 2:内网登陆场景
         * 3:单点登陆场景
         * 4:高风险操作场景
         * 5:4A操作类场景
         * </pre>
         */
        public com.google.protobuf.ByteString getTreasurySceneId() {
            return treasurySceneId_;
        }

        // optional bytes treasury_scene_name = 52;
        public static final int TREASURY_SCENE_NAME_FIELD_NUMBER = 52;
        private com.google.protobuf.ByteString treasurySceneName_;

        /**
         * <code>optional bytes treasury_scene_name = 52;</code>
         * <p>
         * <pre>
         * 金库场景名称
         * </pre>
         */
        public boolean hasTreasurySceneName() {
            return ((bitField1_ & 0x00004000) == 0x00004000);
        }

        /**
         * <code>optional bytes treasury_scene_name = 52;</code>
         * <p>
         * <pre>
         * 金库场景名称
         * </pre>
         */
        public com.google.protobuf.ByteString getTreasurySceneName() {
            return treasurySceneName_;
        }

        // optional int32 treasury_auth_type = 53;
        public static final int TREASURY_AUTH_TYPE_FIELD_NUMBER = 53;
        private int treasuryAuthType_;

        /**
         * <code>optional int32 treasury_auth_type = 53;</code>
         * <p>
         * <pre>
         * 金库授权方式: 1:远程授权 2:现场授权 3:工单授权
         * </pre>
         */
        public boolean hasTreasuryAuthType() {
            return ((bitField1_ & 0x00008000) == 0x00008000);
        }

        /**
         * <code>optional int32 treasury_auth_type = 53;</code>
         * <p>
         * <pre>
         * 金库授权方式: 1:远程授权 2:现场授权 3:工单授权
         * </pre>
         */
        public int getTreasuryAuthType() {
            return treasuryAuthType_;
        }

        // optional bytes access_type = 54;
        public static final int ACCESS_TYPE_FIELD_NUMBER = 54;
        private com.google.protobuf.ByteString accessType_;

        /**
         * <code>optional bytes access_type = 54;</code>
         * <p>
         * <pre>
         * 金库访问方式
         * </pre>
         */
        public boolean hasAccessType() {
            return ((bitField1_ & 0x00010000) == 0x00010000);
        }

        /**
         * <code>optional bytes access_type = 54;</code>
         * <p>
         * <pre>
         * 金库访问方式
         * </pre>
         */
        public com.google.protobuf.ByteString getAccessType() {
            return accessType_;
        }

        // optional bytes apply_time_slot = 55;
        public static final int APPLY_TIME_SLOT_FIELD_NUMBER = 55;
        private com.google.protobuf.ByteString applyTimeSlot_;

        /**
         * <code>optional bytes apply_time_slot = 55;</code>
         * <p>
         * <pre>
         * 金库申请使用时间段
         * </pre>
         */
        public boolean hasApplyTimeSlot() {
            return ((bitField1_ & 0x00020000) == 0x00020000);
        }

        /**
         * <code>optional bytes apply_time_slot = 55;</code>
         * <p>
         * <pre>
         * 金库申请使用时间段
         * </pre>
         */
        public com.google.protobuf.ByteString getApplyTimeSlot() {
            return applyTimeSlot_;
        }

        // optional int32 treasury_status = 56;
        public static final int TREASURY_STATUS_FIELD_NUMBER = 56;
        private int treasuryStatus_;

        /**
         * <code>optional int32 treasury_status = 56;</code>
         * <p>
         * <pre>
         * 金库状态: 1:正常 0:应急 2：已授权 3：未知
         * </pre>
         */
        public boolean hasTreasuryStatus() {
            return ((bitField1_ & 0x00040000) == 0x00040000);
        }

        /**
         * <code>optional int32 treasury_status = 56;</code>
         * <p>
         * <pre>
         * 金库状态: 1:正常 0:应急 2：已授权 3：未知
         * </pre>
         */
        public int getTreasuryStatus() {
            return treasuryStatus_;
        }

        // optional bytes special_service_num = 57;
        public static final int SPECIAL_SERVICE_NUM_FIELD_NUMBER = 57;
        private com.google.protobuf.ByteString specialServiceNum_;

        /**
         * <code>optional bytes special_service_num = 57;</code>
         * <p>
         * <pre>
         * 金库特服码
         * </pre>
         */
        public boolean hasSpecialServiceNum() {
            return ((bitField1_ & 0x00080000) == 0x00080000);
        }

        /**
         * <code>optional bytes special_service_num = 57;</code>
         * <p>
         * <pre>
         * 金库特服码
         * </pre>
         */
        public com.google.protobuf.ByteString getSpecialServiceNum() {
            return specialServiceNum_;
        }

        // optional bytes auth_result = 58;
        public static final int AUTH_RESULT_FIELD_NUMBER = 58;
        private com.google.protobuf.ByteString authResult_;

        /**
         * <code>optional bytes auth_result = 58;</code>
         * <p>
         * <pre>
         * 金库授权结果
         * </pre>
         */
        public boolean hasAuthResult() {
            return ((bitField1_ & 0x00100000) == 0x00100000);
        }

        /**
         * <code>optional bytes auth_result = 58;</code>
         * <p>
         * <pre>
         * 金库授权结果
         * </pre>
         */
        public com.google.protobuf.ByteString getAuthResult() {
            return authResult_;
        }

        // optional bytes sms_content = 59;
        public static final int SMS_CONTENT_FIELD_NUMBER = 59;
        private com.google.protobuf.ByteString smsContent_;

        /**
         * <code>optional bytes sms_content = 59;</code>
         * <p>
         * <pre>
         * 金库短信内容
         * </pre>
         */
        public boolean hasSmsContent() {
            return ((bitField1_ & 0x00200000) == 0x00200000);
        }

        /**
         * <code>optional bytes sms_content = 59;</code>
         * <p>
         * <pre>
         * 金库短信内容
         * </pre>
         */
        public com.google.protobuf.ByteString getSmsContent() {
            return smsContent_;
        }

        // optional int32 account_id = 60;
        public static final int ACCOUNT_ID_FIELD_NUMBER = 60;
        private int accountId_;

        /**
         * <code>optional int32 account_id = 60;</code>
         * <p>
         * <pre>
         * 从帐号ID
         * </pre>
         */
        public boolean hasAccountId() {
            return ((bitField1_ & 0x00400000) == 0x00400000);
        }

        /**
         * <code>optional int32 account_id = 60;</code>
         * <p>
         * <pre>
         * 从帐号ID
         * </pre>
         */
        public int getAccountId() {
            return accountId_;
        }

        // optional bytes account = 61;
        public static final int ACCOUNT_FIELD_NUMBER = 61;
        private com.google.protobuf.ByteString account_;

        /**
         * <code>optional bytes account = 61;</code>
         * <p>
         * <pre>
         * 从帐号
         * </pre>
         */
        public boolean hasAccount() {
            return ((bitField1_ & 0x00800000) == 0x00800000);
        }

        /**
         * <code>optional bytes account = 61;</code>
         * <p>
         * <pre>
         * 从帐号
         * </pre>
         */
        public com.google.protobuf.ByteString getAccount() {
            return account_;
        }

        // optional bytes app_ouname = 62;
        public static final int APP_OUNAME_FIELD_NUMBER = 62;
        private com.google.protobuf.ByteString appOuname_;

        /**
         * <code>optional bytes app_ouname = 62;</code>
         * <p>
         * <pre>
         * 从帐号组织
         * </pre>
         */
        public boolean hasAppOuname() {
            return ((bitField1_ & 0x01000000) == 0x01000000);
        }

        /**
         * <code>optional bytes app_ouname = 62;</code>
         * <p>
         * <pre>
         * 从帐号组织
         * </pre>
         */
        public com.google.protobuf.ByteString getAppOuname() {
            return appOuname_;
        }

        // optional int32 account_type_id = 63;
        public static final int ACCOUNT_TYPE_ID_FIELD_NUMBER = 63;
        private int accountTypeId_;

        /**
         * <code>optional int32 account_type_id = 63;</code>
         * <p>
         * <pre>
         * 从帐号类型ID
         * </pre>
         */
        public boolean hasAccountTypeId() {
            return ((bitField1_ & 0x02000000) == 0x02000000);
        }

        /**
         * <code>optional int32 account_type_id = 63;</code>
         * <p>
         * <pre>
         * 从帐号类型ID
         * </pre>
         */
        public int getAccountTypeId() {
            return accountTypeId_;
        }

        // optional bytes account_type_name = 64;
        public static final int ACCOUNT_TYPE_NAME_FIELD_NUMBER = 64;
        private com.google.protobuf.ByteString accountTypeName_;

        /**
         * <code>optional bytes account_type_name = 64;</code>
         * <p>
         * <pre>
         * 从帐号类型名称
         * </pre>
         */
        public boolean hasAccountTypeName() {
            return ((bitField1_ & 0x04000000) == 0x04000000);
        }

        /**
         * <code>optional bytes account_type_name = 64;</code>
         * <p>
         * <pre>
         * 从帐号类型名称
         * </pre>
         */
        public com.google.protobuf.ByteString getAccountTypeName() {
            return accountTypeName_;
        }

        // optional bytes account_region_code = 65;
        public static final int ACCOUNT_REGION_CODE_FIELD_NUMBER = 65;
        private com.google.protobuf.ByteString accountRegionCode_;

        /**
         * <code>optional bytes account_region_code = 65;</code>
         * <p>
         * <pre>
         * 从帐号地域编码
         * </pre>
         */
        public boolean hasAccountRegionCode() {
            return ((bitField1_ & 0x08000000) == 0x08000000);
        }

        /**
         * <code>optional bytes account_region_code = 65;</code>
         * <p>
         * <pre>
         * 从帐号地域编码
         * </pre>
         */
        public com.google.protobuf.ByteString getAccountRegionCode() {
            return accountRegionCode_;
        }

        // optional bytes account_region = 66;
        public static final int ACCOUNT_REGION_FIELD_NUMBER = 66;
        private com.google.protobuf.ByteString accountRegion_;

        /**
         * <code>optional bytes account_region = 66;</code>
         * <p>
         * <pre>
         * 从帐号地域
         * </pre>
         */
        public boolean hasAccountRegion() {
            return ((bitField1_ & 0x10000000) == 0x10000000);
        }

        /**
         * <code>optional bytes account_region = 66;</code>
         * <p>
         * <pre>
         * 从帐号地域
         * </pre>
         */
        public com.google.protobuf.ByteString getAccountRegion() {
            return accountRegion_;
        }

        // optional int32 account_status = 67;
        public static final int ACCOUNT_STATUS_FIELD_NUMBER = 67;
        private int accountStatus_;

        /**
         * <code>optional int32 account_status = 67;</code>
         * <p>
         * <pre>
         * 从帐号状态
         * </pre>
         */
        public boolean hasAccountStatus() {
            return ((bitField1_ & 0x20000000) == 0x20000000);
        }

        /**
         * <code>optional int32 account_status = 67;</code>
         * <p>
         * <pre>
         * 从帐号状态
         * </pre>
         */
        public int getAccountStatus() {
            return accountStatus_;
        }

        // required uint64 logtime_sec = 68;
        public static final int LOGTIME_SEC_FIELD_NUMBER = 68;
        private long logtimeSec_;

        /**
         * <code>required uint64 logtime_sec = 68;</code>
         * <p>
         * <pre>
         * 操作时间：秒
         * </pre>
         */
        public boolean hasLogtimeSec() {
            return ((bitField1_ & 0x40000000) == 0x40000000);
        }

        /**
         * <code>required uint64 logtime_sec = 68;</code>
         * <p>
         * <pre>
         * 操作时间：秒
         * </pre>
         */
        public long getLogtimeSec() {
            return logtimeSec_;
        }

        // optional uint64 logtime_msec = 69;
        public static final int LOGTIME_MSEC_FIELD_NUMBER = 69;
        private long logtimeMsec_;

        /**
         * <code>optional uint64 logtime_msec = 69;</code>
         * <p>
         * <pre>
         * 操作时间：毫秒
         * </pre>
         */
        public boolean hasLogtimeMsec() {
            return ((bitField1_ & 0x80000000) == 0x80000000);
        }

        /**
         * <code>optional uint64 logtime_msec = 69;</code>
         * <p>
         * <pre>
         * 操作时间：毫秒
         * </pre>
         */
        public long getLogtimeMsec() {
            return logtimeMsec_;
        }

        // optional bytes endtime = 70;
        public static final int ENDTIME_FIELD_NUMBER = 70;
        private com.google.protobuf.ByteString endtime_;

        /**
         * <code>optional bytes endtime = 70;</code>
         * <p>
         * <pre>
         * 结束时间
         * </pre>
         */
        public boolean hasEndtime() {
            return ((bitField2_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>optional bytes endtime = 70;</code>
         * <p>
         * <pre>
         * 结束时间
         * </pre>
         */
        public com.google.protobuf.ByteString getEndtime() {
            return endtime_;
        }

        // optional uint64 gather_sec = 71;
        public static final int GATHER_SEC_FIELD_NUMBER = 71;
        private long gatherSec_;

        /**
         * <code>optional uint64 gather_sec = 71;</code>
         * <p>
         * <pre>
         * 采集时间：秒
         * </pre>
         */
        public boolean hasGatherSec() {
            return ((bitField2_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>optional uint64 gather_sec = 71;</code>
         * <p>
         * <pre>
         * 采集时间：秒
         * </pre>
         */
        public long getGatherSec() {
            return gatherSec_;
        }

        // optional uint64 gather_msec = 72;
        public static final int GATHER_MSEC_FIELD_NUMBER = 72;
        private long gatherMsec_;

        /**
         * <code>optional uint64 gather_msec = 72;</code>
         * <p>
         * <pre>
         * 采集时间：毫秒
         * </pre>
         */
        public boolean hasGatherMsec() {
            return ((bitField2_ & 0x00000004) == 0x00000004);
        }

        /**
         * <code>optional uint64 gather_msec = 72;</code>
         * <p>
         * <pre>
         * 采集时间：毫秒
         * </pre>
         */
        public long getGatherMsec() {
            return gatherMsec_;
        }

        // optional bytes sip = 73;
        public static final int SIP_FIELD_NUMBER = 73;
        private com.google.protobuf.ByteString sip_;

        /**
         * <code>optional bytes sip = 73;</code>
         * <p>
         * <pre>
         * 源IP，必须转化为整数后再进行传送，避免非法的IP地址格式
         * </pre>
         */
        public boolean hasSip() {
            return ((bitField2_ & 0x00000008) == 0x00000008);
        }

        /**
         * <code>optional bytes sip = 73;</code>
         * <p>
         * <pre>
         * 源IP，必须转化为整数后再进行传送，避免非法的IP地址格式
         * </pre>
         */
        public com.google.protobuf.ByteString getSip() {
            return sip_;
        }

        // optional bytes smac = 74;
        public static final int SMAC_FIELD_NUMBER = 74;
        private com.google.protobuf.ByteString smac_;

        /**
         * <code>optional bytes smac = 74;</code>
         * <p>
         * <pre>
         * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
         * </pre>
         */
        public boolean hasSmac() {
            return ((bitField2_ & 0x00000010) == 0x00000010);
        }

        /**
         * <code>optional bytes smac = 74;</code>
         * <p>
         * <pre>
         * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
         * </pre>
         */
        public com.google.protobuf.ByteString getSmac() {
            return smac_;
        }

        // optional uint32 sport = 75;
        public static final int SPORT_FIELD_NUMBER = 75;
        private int sport_;

        /**
         * <code>optional uint32 sport = 75;</code>
         * <p>
         * <pre>
         * 源端口
         * </pre>
         */
        public boolean hasSport() {
            return ((bitField2_ & 0x00000020) == 0x00000020);
        }

        /**
         * <code>optional uint32 sport = 75;</code>
         * <p>
         * <pre>
         * 源端口
         * </pre>
         */
        public int getSport() {
            return sport_;
        }

        // optional bytes dip = 76;
        public static final int DIP_FIELD_NUMBER = 76;
        private com.google.protobuf.ByteString dip_;

        /**
         * <code>optional bytes dip = 76;</code>
         * <p>
         * <pre>
         * 目的IP，必须转化为整数后再进行传送，避免非法的IP地址格式
         * </pre>
         */
        public boolean hasDip() {
            return ((bitField2_ & 0x00000040) == 0x00000040);
        }

        /**
         * <code>optional bytes dip = 76;</code>
         * <p>
         * <pre>
         * 目的IP，必须转化为整数后再进行传送，避免非法的IP地址格式
         * </pre>
         */
        public com.google.protobuf.ByteString getDip() {
            return dip_;
        }

        // optional bytes dmac = 77;
        public static final int DMAC_FIELD_NUMBER = 77;
        private com.google.protobuf.ByteString dmac_;

        /**
         * <code>optional bytes dmac = 77;</code>
         * <p>
         * <pre>
         * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
         * </pre>
         */
        public boolean hasDmac() {
            return ((bitField2_ & 0x00000080) == 0x00000080);
        }

        /**
         * <code>optional bytes dmac = 77;</code>
         * <p>
         * <pre>
         * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
         * </pre>
         */
        public com.google.protobuf.ByteString getDmac() {
            return dmac_;
        }

        // optional uint32 dport = 78;
        public static final int DPORT_FIELD_NUMBER = 78;
        private int dport_;

        /**
         * <code>optional uint32 dport = 78;</code>
         * <p>
         * <pre>
         * 目的端口
         * </pre>
         */
        public boolean hasDport() {
            return ((bitField2_ & 0x00000100) == 0x00000100);
        }

        /**
         * <code>optional uint32 dport = 78;</code>
         * <p>
         * <pre>
         * 目的端口
         * </pre>
         */
        public int getDport() {
            return dport_;
        }

        // optional int32 eventid = 79;
        public static final int EVENTID_FIELD_NUMBER = 79;
        private int eventid_;

        /**
         * <code>optional int32 eventid = 79;</code>
         * <p>
         * <pre>
         * 事件ID，原有版本中有用，现不用
         * </pre>
         */
        public boolean hasEventid() {
            return ((bitField2_ & 0x00000200) == 0x00000200);
        }

        /**
         * <code>optional int32 eventid = 79;</code>
         * <p>
         * <pre>
         * 事件ID，原有版本中有用，现不用
         * </pre>
         */
        public int getEventid() {
            return eventid_;
        }

        // optional .sp.RISK_LEVEL risk_level = 80;
        public static final int RISK_LEVEL_FIELD_NUMBER = 80;
        private sp.AuditEnum.RISK_LEVEL riskLevel_;

        /**
         * <code>optional .sp.RISK_LEVEL risk_level = 80;</code>
         * <p>
         * <pre>
         * 事件级别：标准化之后，每个操作均有一个级别
         * </pre>
         */
        public boolean hasRiskLevel() {
            return ((bitField2_ & 0x00000400) == 0x00000400);
        }

        /**
         * <code>optional .sp.RISK_LEVEL risk_level = 80;</code>
         * <p>
         * <pre>
         * 事件级别：标准化之后，每个操作均有一个级别
         * </pre>
         */
        public sp.AuditEnum.RISK_LEVEL getRiskLevel() {
            return riskLevel_;
        }

        // optional bytes operate = 81;
        public static final int OPERATE_FIELD_NUMBER = 81;
        private com.google.protobuf.ByteString operate_;

        /**
         * <code>optional bytes operate = 81;</code>
         * <p>
         * <pre>
         * 操作
         * </pre>
         */
        public boolean hasOperate() {
            return ((bitField2_ & 0x00000800) == 0x00000800);
        }

        /**
         * <code>optional bytes operate = 81;</code>
         * <p>
         * <pre>
         * 操作
         * </pre>
         */
        public com.google.protobuf.ByteString getOperate() {
            return operate_;
        }

        // optional bytes obj_id = 82;
        public static final int OBJ_ID_FIELD_NUMBER = 82;
        private com.google.protobuf.ByteString objId_;

        /**
         * <code>optional bytes obj_id = 82;</code>
         * <p>
         * <pre>
         * 操作对象ID，一个UUID值，IAM日志中用
         * </pre>
         */
        public boolean hasObjId() {
            return ((bitField2_ & 0x00001000) == 0x00001000);
        }

        /**
         * <code>optional bytes obj_id = 82;</code>
         * <p>
         * <pre>
         * 操作对象ID，一个UUID值，IAM日志中用
         * </pre>
         */
        public com.google.protobuf.ByteString getObjId() {
            return objId_;
        }

        // optional bytes obj = 83;
        public static final int OBJ_FIELD_NUMBER = 83;
        private com.google.protobuf.ByteString obj_;

        /**
         * <code>optional bytes obj = 83;</code>
         * <p>
         * <pre>
         * 操作对象
         * </pre>
         */
        public boolean hasObj() {
            return ((bitField2_ & 0x00002000) == 0x00002000);
        }

        /**
         * <code>optional bytes obj = 83;</code>
         * <p>
         * <pre>
         * 操作对象
         * </pre>
         */
        public com.google.protobuf.ByteString getObj() {
            return obj_;
        }

        // optional bytes obj_parent_id = 84;
        public static final int OBJ_PARENT_ID_FIELD_NUMBER = 84;
        private com.google.protobuf.ByteString objParentId_;

        /**
         * <code>optional bytes obj_parent_id = 84;</code>
         * <p>
         * <pre>
         * 操作对象父ID，IAM日志中用
         * </pre>
         */
        public boolean hasObjParentId() {
            return ((bitField2_ & 0x00004000) == 0x00004000);
        }

        /**
         * <code>optional bytes obj_parent_id = 84;</code>
         * <p>
         * <pre>
         * 操作对象父ID，IAM日志中用
         * </pre>
         */
        public com.google.protobuf.ByteString getObjParentId() {
            return objParentId_;
        }

        // optional bytes obj_parent_name = 85;
        public static final int OBJ_PARENT_NAME_FIELD_NUMBER = 85;
        private com.google.protobuf.ByteString objParentName_;

        /**
         * <code>optional bytes obj_parent_name = 85;</code>
         * <p>
         * <pre>
         * 操作对象父名称，IAM日志中用
         * </pre>
         */
        public boolean hasObjParentName() {
            return ((bitField2_ & 0x00008000) == 0x00008000);
        }

        /**
         * <code>optional bytes obj_parent_name = 85;</code>
         * <p>
         * <pre>
         * 操作对象父名称，IAM日志中用
         * </pre>
         */
        public com.google.protobuf.ByteString getObjParentName() {
            return objParentName_;
        }

        // optional bytes objectstation_code = 86;
        public static final int OBJECTSTATION_CODE_FIELD_NUMBER = 86;
        private com.google.protobuf.ByteString objectstationCode_;

        /**
         * <code>optional bytes objectstation_code = 86;</code>
         * <p>
         * <pre>
         * 操作对象岗位ID，IAM日志中用  原来为INT型?
         * </pre>
         */
        public boolean hasObjectstationCode() {
            return ((bitField2_ & 0x00010000) == 0x00010000);
        }

        /**
         * <code>optional bytes objectstation_code = 86;</code>
         * <p>
         * <pre>
         * 操作对象岗位ID，IAM日志中用  原来为INT型?
         * </pre>
         */
        public com.google.protobuf.ByteString getObjectstationCode() {
            return objectstationCode_;
        }

        // optional bytes objectstation_name = 87;
        public static final int OBJECTSTATION_NAME_FIELD_NUMBER = 87;
        private com.google.protobuf.ByteString objectstationName_;

        /**
         * <code>optional bytes objectstation_name = 87;</code>
         * <p>
         * <pre>
         * 操作对象岗位，IAM日志中用
         * </pre>
         */
        public boolean hasObjectstationName() {
            return ((bitField2_ & 0x00020000) == 0x00020000);
        }

        /**
         * <code>optional bytes objectstation_name = 87;</code>
         * <p>
         * <pre>
         * 操作对象岗位，IAM日志中用
         * </pre>
         */
        public com.google.protobuf.ByteString getObjectstationName() {
            return objectstationName_;
        }

        // optional bytes result = 88;
        public static final int RESULT_FIELD_NUMBER = 88;
        private com.google.protobuf.ByteString result_;

        /**
         * <code>optional bytes result = 88;</code>
         * <p>
         * <pre>
         * 操作结果
         * </pre>
         */
        public boolean hasResult() {
            return ((bitField2_ & 0x00040000) == 0x00040000);
        }

        /**
         * <code>optional bytes result = 88;</code>
         * <p>
         * <pre>
         * 操作结果
         * </pre>
         */
        public com.google.protobuf.ByteString getResult() {
            return result_;
        }

        // optional int32 retcode = 89;
        public static final int RETCODE_FIELD_NUMBER = 89;
        private int retcode_;

        /**
         * <code>optional int32 retcode = 89;</code>
         * <p>
         * <pre>
         * 操作返回值
         * </pre>
         */
        public boolean hasRetcode() {
            return ((bitField2_ & 0x00080000) == 0x00080000);
        }

        /**
         * <code>optional int32 retcode = 89;</code>
         * <p>
         * <pre>
         * 操作返回值
         * </pre>
         */
        public int getRetcode() {
            return retcode_;
        }

        // optional bytes processname = 90;
        public static final int PROCESSNAME_FIELD_NUMBER = 90;
        private com.google.protobuf.ByteString processname_;

        /**
         * <code>optional bytes processname = 90;</code>
         * <p>
         * <pre>
         * 进程名
         * </pre>
         */
        public boolean hasProcessname() {
            return ((bitField2_ & 0x00100000) == 0x00100000);
        }

        /**
         * <code>optional bytes processname = 90;</code>
         * <p>
         * <pre>
         * 进程名
         * </pre>
         */
        public com.google.protobuf.ByteString getProcessname() {
            return processname_;
        }

        // optional bytes workinfo = 91;
        public static final int WORKINFO_FIELD_NUMBER = 91;
        private com.google.protobuf.ByteString workinfo_;

        /**
         * <code>optional bytes workinfo = 91;</code>
         * <p>
         * <pre>
         * 工单信息
         * </pre>
         */
        public boolean hasWorkinfo() {
            return ((bitField2_ & 0x00200000) == 0x00200000);
        }

        /**
         * <code>optional bytes workinfo = 91;</code>
         * <p>
         * <pre>
         * 工单信息
         * </pre>
         */
        public com.google.protobuf.ByteString getWorkinfo() {
            return workinfo_;
        }

        // optional bytes logreason = 92;
        public static final int LOGREASON_FIELD_NUMBER = 92;
        private com.google.protobuf.ByteString logreason_;

        /**
         * <code>optional bytes logreason = 92;</code>
         * <p>
         * <pre>
         * 操作原因
         * </pre>
         */
        public boolean hasLogreason() {
            return ((bitField2_ & 0x00400000) == 0x00400000);
        }

        /**
         * <code>optional bytes logreason = 92;</code>
         * <p>
         * <pre>
         * 操作原因
         * </pre>
         */
        public com.google.protobuf.ByteString getLogreason() {
            return logreason_;
        }

        // optional bytes vdata = 93;
        public static final int VDATA_FIELD_NUMBER = 93;
        private com.google.protobuf.ByteString vdata_;

        /**
         * <code>optional bytes vdata = 93;</code>
         * <p>
         * <pre>
         * 原始日志
         * </pre>
         */
        public boolean hasVdata() {
            return ((bitField2_ & 0x00800000) == 0x00800000);
        }

        /**
         * <code>optional bytes vdata = 93;</code>
         * <p>
         * <pre>
         * 原始日志
         * </pre>
         */
        public com.google.protobuf.ByteString getVdata() {
            return vdata_;
        }

        // optional int32 facility = 94;
        public static final int FACILITY_FIELD_NUMBER = 94;
        private int facility_;

        /**
         * <code>optional int32 facility = 94;</code>
         * <p>
         * <pre>
         * 原始日志类型
         * </pre>
         */
        public boolean hasFacility() {
            return ((bitField2_ & 0x01000000) == 0x01000000);
        }

        /**
         * <code>optional int32 facility = 94;</code>
         * <p>
         * <pre>
         * 原始日志类型
         * </pre>
         */
        public int getFacility() {
            return facility_;
        }

        // optional int32 severity = 95;
        public static final int SEVERITY_FIELD_NUMBER = 95;
        private int severity_;

        /**
         * <code>optional int32 severity = 95;</code>
         * <p>
         * <pre>
         * 原始日志级别
         * </pre>
         */
        public boolean hasSeverity() {
            return ((bitField2_ & 0x02000000) == 0x02000000);
        }

        /**
         * <code>optional int32 severity = 95;</code>
         * <p>
         * <pre>
         * 原始日志级别
         * </pre>
         */
        public int getSeverity() {
            return severity_;
        }

        // optional bytes memo = 96;
        public static final int MEMO_FIELD_NUMBER = 96;
        private com.google.protobuf.ByteString memo_;

        /**
         * <code>optional bytes memo = 96;</code>
         * <p>
         * <pre>
         * 描述
         * </pre>
         */
        public boolean hasMemo() {
            return ((bitField2_ & 0x04000000) == 0x04000000);
        }

        /**
         * <code>optional bytes memo = 96;</code>
         * <p>
         * <pre>
         * 描述
         * </pre>
         */
        public com.google.protobuf.ByteString getMemo() {
            return memo_;
        }

        // optional bytes hbasession = 97;
        public static final int HBASESSION_FIELD_NUMBER = 97;
        private com.google.protobuf.ByteString hbasession_;

        /**
         * <code>optional bytes hbasession = 97;</code>
         * <p>
         * <pre>
         * 原始日志(金库)会话ID
         * </pre>
         */
        public boolean hasHbasession() {
            return ((bitField2_ & 0x08000000) == 0x08000000);
        }

        /**
         * <code>optional bytes hbasession = 97;</code>
         * <p>
         * <pre>
         * 原始日志(金库)会话ID
         * </pre>
         */
        public com.google.protobuf.ByteString getHbasession() {
            return hbasession_;
        }

        // optional int32 op_type_id = 98;
        public static final int OP_TYPE_ID_FIELD_NUMBER = 98;
        private int opTypeId_;

        /**
         * <code>optional int32 op_type_id = 98;</code>
         * <p>
         * <pre>
         * 操作类型ID
         * </pre>
         */
        public boolean hasOpTypeId() {
            return ((bitField2_ & 0x10000000) == 0x10000000);
        }

        /**
         * <code>optional int32 op_type_id = 98;</code>
         * <p>
         * <pre>
         * 操作类型ID
         * </pre>
         */
        public int getOpTypeId() {
            return opTypeId_;
        }

        // optional bytes op_type = 99;
        public static final int OP_TYPE_FIELD_NUMBER = 99;
        private com.google.protobuf.ByteString opType_;

        /**
         * <code>optional bytes op_type = 99;</code>
         * <p>
         * <pre>
         * 操作类型
         * </pre>
         */
        public boolean hasOpType() {
            return ((bitField2_ & 0x20000000) == 0x20000000);
        }

        /**
         * <code>optional bytes op_type = 99;</code>
         * <p>
         * <pre>
         * 操作类型
         * </pre>
         */
        public com.google.protobuf.ByteString getOpType() {
            return opType_;
        }

        // optional int32 op_class_id = 100;
        public static final int OP_CLASS_ID_FIELD_NUMBER = 100;
        private int opClassId_;

        /**
         * <code>optional int32 op_class_id = 100;</code>
         * <p>
         * <pre>
         * 操作子类ID
         * </pre>
         */
        public boolean hasOpClassId() {
            return ((bitField2_ & 0x40000000) == 0x40000000);
        }

        /**
         * <code>optional int32 op_class_id = 100;</code>
         * <p>
         * <pre>
         * 操作子类ID
         * </pre>
         */
        public int getOpClassId() {
            return opClassId_;
        }

        // optional bytes op_class = 101;
        public static final int OP_CLASS_FIELD_NUMBER = 101;
        private com.google.protobuf.ByteString opClass_;

        /**
         * <code>optional bytes op_class = 101;</code>
         * <p>
         * <pre>
         * 操作子类
         * </pre>
         */
        public boolean hasOpClass() {
            return ((bitField2_ & 0x80000000) == 0x80000000);
        }

        /**
         * <code>optional bytes op_class = 101;</code>
         * <p>
         * <pre>
         * 操作子类
         * </pre>
         */
        public com.google.protobuf.ByteString getOpClass() {
            return opClass_;
        }

        // optional int32 op_item_id = 102;
        public static final int OP_ITEM_ID_FIELD_NUMBER = 102;
        private int opItemId_;

        /**
         * <code>optional int32 op_item_id = 102;</code>
         * <p>
         * <pre>
         * 操作细项ID
         * </pre>
         */
        public boolean hasOpItemId() {
            return ((bitField3_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>optional int32 op_item_id = 102;</code>
         * <p>
         * <pre>
         * 操作细项ID
         * </pre>
         */
        public int getOpItemId() {
            return opItemId_;
        }

        // optional bytes op_item = 103;
        public static final int OP_ITEM_FIELD_NUMBER = 103;
        private com.google.protobuf.ByteString opItem_;

        /**
         * <code>optional bytes op_item = 103;</code>
         * <p>
         * <pre>
         * 操作细项
         * </pre>
         */
        public boolean hasOpItem() {
            return ((bitField3_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>optional bytes op_item = 103;</code>
         * <p>
         * <pre>
         * 操作细项
         * </pre>
         */
        public com.google.protobuf.ByteString getOpItem() {
            return opItem_;
        }

        // optional bytes op_code = 104;
        public static final int OP_CODE_FIELD_NUMBER = 104;
        private com.google.protobuf.ByteString opCode_;

        /**
         * <code>optional bytes op_code = 104;</code>
         * <p>
         * <pre>
         * 操作编码
         * </pre>
         */
        public boolean hasOpCode() {
            return ((bitField3_ & 0x00000004) == 0x00000004);
        }

        /**
         * <code>optional bytes op_code = 104;</code>
         * <p>
         * <pre>
         * 操作编码
         * </pre>
         */
        public com.google.protobuf.ByteString getOpCode() {
            return opCode_;
        }

        // optional int32 op_key_id = 105;
        public static final int OP_KEY_ID_FIELD_NUMBER = 105;
        private int opKeyId_;

        /**
         * <code>optional int32 op_key_id = 105;</code>
         * <p>
         * <pre>
         * 操作关键字ID（标准化策略ID）
         * </pre>
         */
        public boolean hasOpKeyId() {
            return ((bitField3_ & 0x00000008) == 0x00000008);
        }

        /**
         * <code>optional int32 op_key_id = 105;</code>
         * <p>
         * <pre>
         * 操作关键字ID（标准化策略ID）
         * </pre>
         */
        public int getOpKeyId() {
            return opKeyId_;
        }

        // optional bytes op_key = 106;
        public static final int OP_KEY_FIELD_NUMBER = 106;
        private com.google.protobuf.ByteString opKey_;

        /**
         * <code>optional bytes op_key = 106;</code>
         * <p>
         * <pre>
         * 操作关键字（标准化策略正则表达式）
         * </pre>
         */
        public boolean hasOpKey() {
            return ((bitField3_ & 0x00000010) == 0x00000010);
        }

        /**
         * <code>optional bytes op_key = 106;</code>
         * <p>
         * <pre>
         * 操作关键字（标准化策略正则表达式）
         * </pre>
         */
        public com.google.protobuf.ByteString getOpKey() {
            return opKey_;
        }

        // optional bytes operatetypeid = 107;
        public static final int OPERATETYPEID_FIELD_NUMBER = 107;
        private com.google.protobuf.ByteString operatetypeid_;

        /**
         * <code>optional bytes operatetypeid = 107;</code>
         * <p>
         * <pre>
         * 原始操作类型（应用系统日志扩展）
         * </pre>
         */
        public boolean hasOperatetypeid() {
            return ((bitField3_ & 0x00000020) == 0x00000020);
        }

        /**
         * <code>optional bytes operatetypeid = 107;</code>
         * <p>
         * <pre>
         * 原始操作类型（应用系统日志扩展）
         * </pre>
         */
        public com.google.protobuf.ByteString getOperatetypeid() {
            return operatetypeid_;
        }

        // optional bytes operatetypename = 108;
        public static final int OPERATETYPENAME_FIELD_NUMBER = 108;
        private com.google.protobuf.ByteString operatetypename_;

        /**
         * <code>optional bytes operatetypename = 108;</code>
         * <p>
         * <pre>
         * 原始操作名称（应用系统日志扩展）
         * </pre>
         */
        public boolean hasOperatetypename() {
            return ((bitField3_ & 0x00000040) == 0x00000040);
        }

        /**
         * <code>optional bytes operatetypename = 108;</code>
         * <p>
         * <pre>
         * 原始操作名称（应用系统日志扩展）
         * </pre>
         */
        public com.google.protobuf.ByteString getOperatetypename() {
            return operatetypename_;
        }

        // optional bytes authtype = 109;
        public static final int AUTHTYPE_FIELD_NUMBER = 109;
        private com.google.protobuf.ByteString authtype_;

        /**
         * <code>optional bytes authtype = 109;</code>
         * <p>
         * <pre>
         * 认证类型（应用系统日志扩展）
         * </pre>
         */
        public boolean hasAuthtype() {
            return ((bitField3_ & 0x00000080) == 0x00000080);
        }

        /**
         * <code>optional bytes authtype = 109;</code>
         * <p>
         * <pre>
         * 认证类型（应用系统日志扩展）
         * </pre>
         */
        public com.google.protobuf.ByteString getAuthtype() {
            return authtype_;
        }

        // optional bytes logid = 110;
        public static final int LOGID_FIELD_NUMBER = 110;
        private com.google.protobuf.ByteString logid_;

        /**
         * <code>optional bytes logid = 110;</code>
         * <p>
         * <pre>
         * 原始日志ID（应用系统日志扩展）
         * </pre>
         */
        public boolean hasLogid() {
            return ((bitField3_ & 0x00000100) == 0x00000100);
        }

        /**
         * <code>optional bytes logid = 110;</code>
         * <p>
         * <pre>
         * 原始日志ID（应用系统日志扩展）
         * </pre>
         */
        public com.google.protobuf.ByteString getLogid() {
            return logid_;
        }

        // optional bytes orgname = 111;
        public static final int ORGNAME_FIELD_NUMBER = 111;
        private com.google.protobuf.ByteString orgname_;

        /**
         * <code>optional bytes orgname = 111;</code>
         * <p>
         * <pre>
         * 原始日志组织名称（应用系统日志扩展）
         * </pre>
         */
        public boolean hasOrgname() {
            return ((bitField3_ & 0x00000200) == 0x00000200);
        }

        /**
         * <code>optional bytes orgname = 111;</code>
         * <p>
         * <pre>
         * 原始日志组织名称（应用系统日志扩展）
         * </pre>
         */
        public com.google.protobuf.ByteString getOrgname() {
            return orgname_;
        }

        // optional bytes recdefid = 112;
        public static final int RECDEFID_FIELD_NUMBER = 112;
        private com.google.protobuf.ByteString recdefid_;

        /**
         * <code>optional bytes recdefid = 112;</code>
         * <p>
         * <pre>
         * 受理类型（应用系统日志扩展）
         * </pre>
         */
        public boolean hasRecdefid() {
            return ((bitField3_ & 0x00000400) == 0x00000400);
        }

        /**
         * <code>optional bytes recdefid = 112;</code>
         * <p>
         * <pre>
         * 受理类型（应用系统日志扩展）
         * </pre>
         */
        public com.google.protobuf.ByteString getRecdefid() {
            return recdefid_;
        }

        // optional bytes recdedate = 113;
        public static final int RECDEDATE_FIELD_NUMBER = 113;
        private com.google.protobuf.ByteString recdedate_;

        /**
         * <code>optional bytes recdedate = 113;</code>
         * <p>
         * <pre>
         * 受理时间（应用系统日志扩展）
         * </pre>
         */
        public boolean hasRecdedate() {
            return ((bitField3_ & 0x00000800) == 0x00000800);
        }

        /**
         * <code>optional bytes recdedate = 113;</code>
         * <p>
         * <pre>
         * 受理时间（应用系统日志扩展）
         * </pre>
         */
        public com.google.protobuf.ByteString getRecdedate() {
            return recdedate_;
        }

        // optional bytes formnum = 114;
        public static final int FORMNUM_FIELD_NUMBER = 114;
        private com.google.protobuf.ByteString formnum_;

        /**
         * <code>optional bytes formnum = 114;</code>
         * <p>
         * <pre>
         * 流水号（应用系统日志扩展）
         * </pre>
         */
        public boolean hasFormnum() {
            return ((bitField3_ & 0x00001000) == 0x00001000);
        }

        /**
         * <code>optional bytes formnum = 114;</code>
         * <p>
         * <pre>
         * 流水号（应用系统日志扩展）
         * </pre>
         */
        public com.google.protobuf.ByteString getFormnum() {
            return formnum_;
        }

        // optional bytes jobcount = 115;
        public static final int JOBCOUNT_FIELD_NUMBER = 115;
        private com.google.protobuf.ByteString jobcount_;

        /**
         * <code>optional bytes jobcount = 115;</code>
         * <p>
         * <pre>
         * 数量（应用系统日志扩展）
         * </pre>
         */
        public boolean hasJobcount() {
            return ((bitField3_ & 0x00002000) == 0x00002000);
        }

        /**
         * <code>optional bytes jobcount = 115;</code>
         * <p>
         * <pre>
         * 数量（应用系统日志扩展）
         * </pre>
         */
        public com.google.protobuf.ByteString getJobcount() {
            return jobcount_;
        }

        // optional bytes okcount = 116;
        public static final int OKCOUNT_FIELD_NUMBER = 116;
        private com.google.protobuf.ByteString okcount_;

        /**
         * <code>optional bytes okcount = 116;</code>
         * <p>
         * <pre>
         * 成功条数（应用系统日志扩展）
         * </pre>
         */
        public boolean hasOkcount() {
            return ((bitField3_ & 0x00004000) == 0x00004000);
        }

        /**
         * <code>optional bytes okcount = 116;</code>
         * <p>
         * <pre>
         * 成功条数（应用系统日志扩展）
         * </pre>
         */
        public com.google.protobuf.ByteString getOkcount() {
            return okcount_;
        }

        // optional bytes failcount = 117;
        public static final int FAILCOUNT_FIELD_NUMBER = 117;
        private com.google.protobuf.ByteString failcount_;

        /**
         * <code>optional bytes failcount = 117;</code>
         * <p>
         * <pre>
         * 失败条数（应用系统日志扩展）
         * </pre>
         */
        public boolean hasFailcount() {
            return ((bitField3_ & 0x00008000) == 0x00008000);
        }

        /**
         * <code>optional bytes failcount = 117;</code>
         * <p>
         * <pre>
         * 失败条数（应用系统日志扩展）
         * </pre>
         */
        public com.google.protobuf.ByteString getFailcount() {
            return failcount_;
        }

        // optional bytes servnumber = 118;
        public static final int SERVNUMBER_FIELD_NUMBER = 118;
        private com.google.protobuf.ByteString servnumber_;

        /**
         * <code>optional bytes servnumber = 118;</code>
         * <p>
         * <pre>
         * 受理代码（应用系统日志扩展）
         * </pre>
         */
        public boolean hasServnumber() {
            return ((bitField3_ & 0x00010000) == 0x00010000);
        }

        /**
         * <code>optional bytes servnumber = 118;</code>
         * <p>
         * <pre>
         * 受理代码（应用系统日志扩展）
         * </pre>
         */
        public com.google.protobuf.ByteString getServnumber() {
            return servnumber_;
        }

        // optional bytes recname = 119;
        public static final int RECNAME_FIELD_NUMBER = 119;
        private com.google.protobuf.ByteString recname_;

        /**
         * <code>optional bytes recname = 119;</code>
         * <p>
         * <pre>
         * 业务名称（应用系统日志扩展）
         * </pre>
         */
        public boolean hasRecname() {
            return ((bitField3_ & 0x00020000) == 0x00020000);
        }

        /**
         * <code>optional bytes recname = 119;</code>
         * <p>
         * <pre>
         * 业务名称（应用系统日志扩展）
         * </pre>
         */
        public com.google.protobuf.ByteString getRecname() {
            return recname_;
        }

        // optional bytes status = 120;
        public static final int STATUS_FIELD_NUMBER = 120;
        private com.google.protobuf.ByteString status_;

        /**
         * <code>optional bytes status = 120;</code>
         * <p>
         * <pre>
         * 状态（应用系统日志扩展）
         * </pre>
         */
        public boolean hasStatus() {
            return ((bitField3_ & 0x00040000) == 0x00040000);
        }

        /**
         * <code>optional bytes status = 120;</code>
         * <p>
         * <pre>
         * 状态（应用系统日志扩展）
         * </pre>
         */
        public com.google.protobuf.ByteString getStatus() {
            return status_;
        }

        // optional bytes filluuid = 121;
        public static final int FILLUUID_FIELD_NUMBER = 121;
        private com.google.protobuf.ByteString filluuid_;

        /**
         * <code>optional bytes filluuid = 121;</code>
         * <p>
         * <pre>
         * 4A代填UUID，，IAM日志中用
         * </pre>
         */
        public boolean hasFilluuid() {
            return ((bitField3_ & 0x00080000) == 0x00080000);
        }

        /**
         * <code>optional bytes filluuid = 121;</code>
         * <p>
         * <pre>
         * 4A代填UUID，，IAM日志中用
         * </pre>
         */
        public com.google.protobuf.ByteString getFilluuid() {
            return filluuid_;
        }

        // optional bytes reserved0 = 122;
        public static final int RESERVED0_FIELD_NUMBER = 122;
        private com.google.protobuf.ByteString reserved0_;

        /**
         * <code>optional bytes reserved0 = 122;</code>
         */
        public boolean hasReserved0() {
            return ((bitField3_ & 0x00100000) == 0x00100000);
        }

        /**
         * <code>optional bytes reserved0 = 122;</code>
         */
        public com.google.protobuf.ByteString getReserved0() {
            return reserved0_;
        }

        // optional bytes reserved1 = 123;
        public static final int RESERVED1_FIELD_NUMBER = 123;
        private com.google.protobuf.ByteString reserved1_;

        /**
         * <code>optional bytes reserved1 = 123;</code>
         */
        public boolean hasReserved1() {
            return ((bitField3_ & 0x00200000) == 0x00200000);
        }

        /**
         * <code>optional bytes reserved1 = 123;</code>
         */
        public com.google.protobuf.ByteString getReserved1() {
            return reserved1_;
        }

        // optional bytes reserved2 = 124;
        public static final int RESERVED2_FIELD_NUMBER = 124;
        private com.google.protobuf.ByteString reserved2_;

        /**
         * <code>optional bytes reserved2 = 124;</code>
         */
        public boolean hasReserved2() {
            return ((bitField3_ & 0x00400000) == 0x00400000);
        }

        /**
         * <code>optional bytes reserved2 = 124;</code>
         */
        public com.google.protobuf.ByteString getReserved2() {
            return reserved2_;
        }

        // optional bytes reserved3 = 125;
        public static final int RESERVED3_FIELD_NUMBER = 125;
        private com.google.protobuf.ByteString reserved3_;

        /**
         * <code>optional bytes reserved3 = 125;</code>
         */
        public boolean hasReserved3() {
            return ((bitField3_ & 0x00800000) == 0x00800000);
        }

        /**
         * <code>optional bytes reserved3 = 125;</code>
         */
        public com.google.protobuf.ByteString getReserved3() {
            return reserved3_;
        }

        // optional bytes reserved4 = 126;
        public static final int RESERVED4_FIELD_NUMBER = 126;
        private com.google.protobuf.ByteString reserved4_;

        /**
         * <code>optional bytes reserved4 = 126;</code>
         * <p>
         * <pre>
         * 2014-02-27新增：告警申诉原因（申诉人填写）
         * </pre>
         */
        public boolean hasReserved4() {
            return ((bitField3_ & 0x01000000) == 0x01000000);
        }

        /**
         * <code>optional bytes reserved4 = 126;</code>
         * <p>
         * <pre>
         * 2014-02-27新增：告警申诉原因（申诉人填写）
         * </pre>
         */
        public com.google.protobuf.ByteString getReserved4() {
            return reserved4_;
        }

        // optional bytes reserved5 = 127;
        public static final int RESERVED5_FIELD_NUMBER = 127;
        private com.google.protobuf.ByteString reserved5_;

        /**
         * <code>optional bytes reserved5 = 127;</code>
         * <p>
         * <pre>
         * 2014-02-27新增：告警审计管理员理由（申诉失败，用户会看原因）
         * </pre>
         */
        public boolean hasReserved5() {
            return ((bitField3_ & 0x02000000) == 0x02000000);
        }

        /**
         * <code>optional bytes reserved5 = 127;</code>
         * <p>
         * <pre>
         * 2014-02-27新增：告警审计管理员理由（申诉失败，用户会看原因）
         * </pre>
         */
        public com.google.protobuf.ByteString getReserved5() {
            return reserved5_;
        }

        // optional bytes reserved6 = 128;
        public static final int RESERVED6_FIELD_NUMBER = 128;
        private com.google.protobuf.ByteString reserved6_;

        /**
         * <code>optional bytes reserved6 = 128;</code>
         * <p>
         * <pre>
         * 2014-04-14新增：告警申诉时间
         * </pre>
         */
        public boolean hasReserved6() {
            return ((bitField3_ & 0x04000000) == 0x04000000);
        }

        /**
         * <code>optional bytes reserved6 = 128;</code>
         * <p>
         * <pre>
         * 2014-04-14新增：告警申诉时间
         * </pre>
         */
        public com.google.protobuf.ByteString getReserved6() {
            return reserved6_;
        }

        // optional bytes reserved7 = 129;
        public static final int RESERVED7_FIELD_NUMBER = 129;
        private com.google.protobuf.ByteString reserved7_;

        /**
         * <code>optional bytes reserved7 = 129;</code>
         * <p>
         * <pre>
         * 2014-04-14新增：告警申诉处理时间
         * </pre>
         */
        public boolean hasReserved7() {
            return ((bitField3_ & 0x08000000) == 0x08000000);
        }

        /**
         * <code>optional bytes reserved7 = 129;</code>
         * <p>
         * <pre>
         * 2014-04-14新增：告警申诉处理时间
         * </pre>
         */
        public com.google.protobuf.ByteString getReserved7() {
            return reserved7_;
        }

        // optional bytes reserved8 = 130;
        public static final int RESERVED8_FIELD_NUMBER = 130;
        private com.google.protobuf.ByteString reserved8_;

        /**
         * <code>optional bytes reserved8 = 130;</code>
         */
        public boolean hasReserved8() {
            return ((bitField3_ & 0x10000000) == 0x10000000);
        }

        /**
         * <code>optional bytes reserved8 = 130;</code>
         */
        public com.google.protobuf.ByteString getReserved8() {
            return reserved8_;
        }

        // optional bytes reserved9 = 131;
        public static final int RESERVED9_FIELD_NUMBER = 131;
        private com.google.protobuf.ByteString reserved9_;

        /**
         * <code>optional bytes reserved9 = 131;</code>
         */
        public boolean hasReserved9() {
            return ((bitField3_ & 0x20000000) == 0x20000000);
        }

        /**
         * <code>optional bytes reserved9 = 131;</code>
         */
        public com.google.protobuf.ByteString getReserved9() {
            return reserved9_;
        }

        // optional bytes res_key = 132;
        public static final int RES_KEY_FIELD_NUMBER = 132;
        private com.google.protobuf.ByteString resKey_;

        /**
         * <code>optional bytes res_key = 132;</code>
         * <p>
         * <pre>
         * 资源KEY，UUID
         * </pre>
         */
        public boolean hasResKey() {
            return ((bitField3_ & 0x40000000) == 0x40000000);
        }

        /**
         * <code>optional bytes res_key = 132;</code>
         * <p>
         * <pre>
         * 资源KEY，UUID
         * </pre>
         */
        public com.google.protobuf.ByteString getResKey() {
            return resKey_;
        }

        // optional bytes logtable = 133;
        public static final int LOGTABLE_FIELD_NUMBER = 133;
        private com.google.protobuf.ByteString logtable_;

        /**
         * <code>optional bytes logtable = 133;</code>
         * <p>
         * <pre>
         * 专题数据分拣时，对应的专题表名
         * </pre>
         */
        public boolean hasLogtable() {
            return ((bitField3_ & 0x80000000) == 0x80000000);
        }

        /**
         * <code>optional bytes logtable = 133;</code>
         * <p>
         * <pre>
         * 专题数据分拣时，对应的专题表名
         * </pre>
         */
        public com.google.protobuf.ByteString getLogtable() {
            return logtable_;
        }

        // optional int32 functionid = 134;
        public static final int FUNCTIONID_FIELD_NUMBER = 134;
        private int functionid_;

        /**
         * <code>optional int32 functionid = 134;</code>
         * <p>
         * <pre>
         * 功能ID，特用于IAM日志
         * </pre>
         */
        public boolean hasFunctionid() {
            return ((bitField4_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>optional int32 functionid = 134;</code>
         * <p>
         * <pre>
         * 功能ID，特用于IAM日志
         * </pre>
         */
        public int getFunctionid() {
            return functionid_;
        }

        // optional bytes functionname = 135;
        public static final int FUNCTIONNAME_FIELD_NUMBER = 135;
        private com.google.protobuf.ByteString functionname_;

        /**
         * <code>optional bytes functionname = 135;</code>
         * <p>
         * <pre>
         * 功能名称，特用于IAM日志
         * </pre>
         */
        public boolean hasFunctionname() {
            return ((bitField4_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>optional bytes functionname = 135;</code>
         * <p>
         * <pre>
         * 功能名称，特用于IAM日志
         * </pre>
         */
        public com.google.protobuf.ByteString getFunctionname() {
            return functionname_;
        }

        // optional int32 direction = 136;
        public static final int DIRECTION_FIELD_NUMBER = 136;
        private int direction_;

        /**
         * <code>optional int32 direction = 136;</code>
         * <p>
         * <pre>
         * 上下行标识，特用于NBA、GBA操作日志
         * </pre>
         */
        public boolean hasDirection() {
            return ((bitField4_ & 0x00000004) == 0x00000004);
        }

        /**
         * <code>optional int32 direction = 136;</code>
         * <p>
         * <pre>
         * 上下行标识，特用于NBA、GBA操作日志
         * </pre>
         */
        public int getDirection() {
            return direction_;
        }

        // optional int32 nreserved0 = 137;
        public static final int NRESERVED0_FIELD_NUMBER = 137;
        private int nreserved0_;

        /**
         * <code>optional int32 nreserved0 = 137;</code>
         */
        public boolean hasNreserved0() {
            return ((bitField4_ & 0x00000008) == 0x00000008);
        }

        /**
         * <code>optional int32 nreserved0 = 137;</code>
         */
        public int getNreserved0() {
            return nreserved0_;
        }

        // optional int32 nreserved1 = 138;
        public static final int NRESERVED1_FIELD_NUMBER = 138;
        private int nreserved1_;

        /**
         * <code>optional int32 nreserved1 = 138;</code>
         * <p>
         * <pre>
         * 缓存NBA会话状态
         * </pre>
         */
        public boolean hasNreserved1() {
            return ((bitField4_ & 0x00000010) == 0x00000010);
        }

        /**
         * <code>optional int32 nreserved1 = 138;</code>
         * <p>
         * <pre>
         * 缓存NBA会话状态
         * </pre>
         */
        public int getNreserved1() {
            return nreserved1_;
        }

        // optional int32 nreserved2 = 139;
        public static final int NRESERVED2_FIELD_NUMBER = 139;
        private int nreserved2_;

        /**
         * <code>optional int32 nreserved2 = 139;</code>
         * <p>
         * <pre>
         * 2014-02-27新增：告警申诉状态（需要有未申诉、处理中、申诉失败标识，申诉人可改变此状态）
         * </pre>
         */
        public boolean hasNreserved2() {
            return ((bitField4_ & 0x00000020) == 0x00000020);
        }

        /**
         * <code>optional int32 nreserved2 = 139;</code>
         * <p>
         * <pre>
         * 2014-02-27新增：告警申诉状态（需要有未申诉、处理中、申诉失败标识，申诉人可改变此状态）
         * </pre>
         */
        public int getNreserved2() {
            return nreserved2_;
        }

        // optional int32 nreserved3 = 140;
        public static final int NRESERVED3_FIELD_NUMBER = 140;
        private int nreserved3_;

        /**
         * <code>optional int32 nreserved3 = 140;</code>
         * <p>
         * <pre>
         *
         * </pre>
         */
        public boolean hasNreserved3() {
            return ((bitField4_ & 0x00000040) == 0x00000040);
        }

        /**
         * <code>optional int32 nreserved3 = 140;</code>
         * <p>
         * <pre>
         *
         * </pre>
         */
        public int getNreserved3() {
            return nreserved3_;
        }

        // optional int32 nreserved4 = 141;
        public static final int NRESERVED4_FIELD_NUMBER = 141;
        private int nreserved4_;

        /**
         * <code>optional int32 nreserved4 = 141;</code>
         */
        public boolean hasNreserved4() {
            return ((bitField4_ & 0x00000080) == 0x00000080);
        }

        /**
         * <code>optional int32 nreserved4 = 141;</code>
         */
        public int getNreserved4() {
            return nreserved4_;
        }

        // optional .sp.ANA_POLICY_TYPE ana_policy_type = 142;
        public static final int ANA_POLICY_TYPE_FIELD_NUMBER = 142;
        private sp.AuditEnum.ANA_POLICY_TYPE anaPolicyType_;

        /**
         * <code>optional .sp.ANA_POLICY_TYPE ana_policy_type = 142;</code>
         * <p>
         * <pre>
         * 分析策略类型ID，经过ABA分析策略处理之后，才会有该值，特用于 ABA
         * </pre>
         */
        public boolean hasAnaPolicyType() {
            return ((bitField4_ & 0x00000100) == 0x00000100);
        }

        /**
         * <code>optional .sp.ANA_POLICY_TYPE ana_policy_type = 142;</code>
         * <p>
         * <pre>
         * 分析策略类型ID，经过ABA分析策略处理之后，才会有该值，特用于 ABA
         * </pre>
         */
        public sp.AuditEnum.ANA_POLICY_TYPE getAnaPolicyType() {
            return anaPolicyType_;
        }

        // optional bytes ana_policy_name = 143;
        public static final int ANA_POLICY_NAME_FIELD_NUMBER = 143;
        private com.google.protobuf.ByteString anaPolicyName_;

        /**
         * <code>optional bytes ana_policy_name = 143;</code>
         * <p>
         * <pre>
         * 分析策略名称，经过ABA分析策略处理之后，才会有该值，特用于 ABA
         * </pre>
         */
        public boolean hasAnaPolicyName() {
            return ((bitField4_ & 0x00000200) == 0x00000200);
        }

        /**
         * <code>optional bytes ana_policy_name = 143;</code>
         * <p>
         * <pre>
         * 分析策略名称，经过ABA分析策略处理之后，才会有该值，特用于 ABA
         * </pre>
         */
        public com.google.protobuf.ByteString getAnaPolicyName() {
            return anaPolicyName_;
        }

        // optional int32 boss_trea_scene_type = 144;
        public static final int BOSS_TREA_SCENE_TYPE_FIELD_NUMBER = 144;
        private int bossTreaSceneType_;

        /**
         * <code>optional int32 boss_trea_scene_type = 144;</code>
         * <p>
         * <pre>
         * 业支专用金库场景类型ID
         * </pre>
         */
        public boolean hasBossTreaSceneType() {
            return ((bitField4_ & 0x00000400) == 0x00000400);
        }

        /**
         * <code>optional int32 boss_trea_scene_type = 144;</code>
         * <p>
         * <pre>
         * 业支专用金库场景类型ID
         * </pre>
         */
        public int getBossTreaSceneType() {
            return bossTreaSceneType_;
        }

        // optional bytes boss_trea_scene_name = 145;
        public static final int BOSS_TREA_SCENE_NAME_FIELD_NUMBER = 145;
        private com.google.protobuf.ByteString bossTreaSceneName_;

        /**
         * <code>optional bytes boss_trea_scene_name = 145;</code>
         * <p>
         * <pre>
         * 业支专用金库场景类型名称
         * </pre>
         */
        public boolean hasBossTreaSceneName() {
            return ((bitField4_ & 0x00000800) == 0x00000800);
        }

        /**
         * <code>optional bytes boss_trea_scene_name = 145;</code>
         * <p>
         * <pre>
         * 业支专用金库场景类型名称
         * </pre>
         */
        public com.google.protobuf.ByteString getBossTreaSceneName() {
            return bossTreaSceneName_;
        }

        // optional bytes clientip = 146;
        public static final int CLIENTIP_FIELD_NUMBER = 146;
        private com.google.protobuf.ByteString clientip_;

        /**
         * <code>optional bytes clientip = 146;</code>
         * <p>
         * <pre>
         * 客户端IP，补全后的客户端真实源IP
         * </pre>
         */
        public boolean hasClientip() {
            return ((bitField4_ & 0x00001000) == 0x00001000);
        }

        /**
         * <code>optional bytes clientip = 146;</code>
         * <p>
         * <pre>
         * 客户端IP，补全后的客户端真实源IP
         * </pre>
         */
        public com.google.protobuf.ByteString getClientip() {
            return clientip_;
        }

        // optional uint32 processid = 147;
        public static final int PROCESSID_FIELD_NUMBER = 147;
        private int processid_;

        /**
         * <code>optional uint32 processid = 147;</code>
         * <p>
         * <pre>
         * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
         * </pre>
         */
        public boolean hasProcessid() {
            return ((bitField4_ & 0x00002000) == 0x00002000);
        }

        /**
         * <code>optional uint32 processid = 147;</code>
         * <p>
         * <pre>
         * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
         * </pre>
         */
        public int getProcessid() {
            return processid_;
        }

        // optional bytes proc_starttime = 148;
        public static final int PROC_STARTTIME_FIELD_NUMBER = 148;
        private com.google.protobuf.ByteString procStarttime_;

        /**
         * <code>optional bytes proc_starttime = 148;</code>
         * <p>
         * <pre>
         * 进程启动时间
         * </pre>
         */
        public boolean hasProcStarttime() {
            return ((bitField4_ & 0x00004000) == 0x00004000);
        }

        /**
         * <code>optional bytes proc_starttime = 148;</code>
         * <p>
         * <pre>
         * 进程启动时间
         * </pre>
         */
        public com.google.protobuf.ByteString getProcStarttime() {
            return procStarttime_;
        }

        // optional uint32 duration = 149;
        public static final int DURATION_FIELD_NUMBER = 149;
        private int duration_;

        /**
         * <code>optional uint32 duration = 149;</code>
         * <p>
         * <pre>
         * 持续时长
         * </pre>
         */
        public boolean hasDuration() {
            return ((bitField4_ & 0x00008000) == 0x00008000);
        }

        /**
         * <code>optional uint32 duration = 149;</code>
         * <p>
         * <pre>
         * 持续时长
         * </pre>
         */
        public int getDuration() {
            return duration_;
        }

        // optional int32 protocol = 150;
        public static final int PROTOCOL_FIELD_NUMBER = 150;
        private int protocol_;

        /**
         * <code>optional int32 protocol = 150;</code>
         * <p>
         * <pre>
         * 协议
         * </pre>
         */
        public boolean hasProtocol() {
            return ((bitField4_ & 0x00010000) == 0x00010000);
        }

        /**
         * <code>optional int32 protocol = 150;</code>
         * <p>
         * <pre>
         * 协议
         * </pre>
         */
        public int getProtocol() {
            return protocol_;
        }

        // optional uint32 serv_port = 151;
        public static final int SERV_PORT_FIELD_NUMBER = 151;
        private int servPort_;

        /**
         * <code>optional uint32 serv_port = 151;</code>
         * <p>
         * <pre>
         * 服务端口
         * </pre>
         */
        public boolean hasServPort() {
            return ((bitField4_ & 0x00020000) == 0x00020000);
        }

        /**
         * <code>optional uint32 serv_port = 151;</code>
         * <p>
         * <pre>
         * 服务端口
         * </pre>
         */
        public int getServPort() {
            return servPort_;
        }

        // optional float flownum = 152;
        public static final int FLOWNUM_FIELD_NUMBER = 152;
        private float flownum_;

        /**
         * <code>optional float flownum = 152;</code>
         * <p>
         * <pre>
         * 流量
         * </pre>
         */
        public boolean hasFlownum() {
            return ((bitField4_ & 0x00040000) == 0x00040000);
        }

        /**
         * <code>optional float flownum = 152;</code>
         * <p>
         * <pre>
         * 流量
         * </pre>
         */
        public float getFlownum() {
            return flownum_;
        }

        // optional uint32 recnum = 153;
        public static final int RECNUM_FIELD_NUMBER = 153;
        private int recnum_;

        /**
         * <code>optional uint32 recnum = 153;</code>
         * <p>
         * <pre>
         * 操作记录数
         * </pre>
         */
        public boolean hasRecnum() {
            return ((bitField4_ & 0x00080000) == 0x00080000);
        }

        /**
         * <code>optional uint32 recnum = 153;</code>
         * <p>
         * <pre>
         * 操作记录数
         * </pre>
         */
        public int getRecnum() {
            return recnum_;
        }

        // optional bytes clientinfo = 154;
        public static final int CLIENTINFO_FIELD_NUMBER = 154;
        private com.google.protobuf.ByteString clientinfo_;

        /**
         * <code>optional bytes clientinfo = 154;</code>
         * <p>
         * <pre>
         * 客户端信息
         * </pre>
         */
        public boolean hasClientinfo() {
            return ((bitField4_ & 0x00100000) == 0x00100000);
        }

        /**
         * <code>optional bytes clientinfo = 154;</code>
         * <p>
         * <pre>
         * 客户端信息
         * </pre>
         */
        public com.google.protobuf.ByteString getClientinfo() {
            return clientinfo_;
        }

        // optional bytes serverinfo = 155;
        public static final int SERVERINFO_FIELD_NUMBER = 155;
        private com.google.protobuf.ByteString serverinfo_;

        /**
         * <code>optional bytes serverinfo = 155;</code>
         * <p>
         * <pre>
         * 服务端信息
         * </pre>
         */
        public boolean hasServerinfo() {
            return ((bitField4_ & 0x00200000) == 0x00200000);
        }

        /**
         * <code>optional bytes serverinfo = 155;</code>
         * <p>
         * <pre>
         * 服务端信息
         * </pre>
         */
        public com.google.protobuf.ByteString getServerinfo() {
            return serverinfo_;
        }

        // optional int32 logclass = 156;
        public static final int LOGCLASS_FIELD_NUMBER = 156;
        private int logclass_;

        /**
         * <code>optional int32 logclass = 156;</code>
         * <p>
         * <pre>
         * 日志种类
         * </pre>
         */
        public boolean hasLogclass() {
            return ((bitField4_ & 0x00400000) == 0x00400000);
        }

        /**
         * <code>optional int32 logclass = 156;</code>
         * <p>
         * <pre>
         * 日志种类
         * </pre>
         */
        public int getLogclass() {
            return logclass_;
        }

        // optional int32 gbasport = 157;
        public static final int GBASPORT_FIELD_NUMBER = 157;
        private int gbasport_;

        /**
         * <code>optional int32 gbasport = 157;</code>
         * <p>
         * <pre>
         * GBA连接设备时使用的源端口，内部使用
         * </pre>
         */
        public boolean hasGbasport() {
            return ((bitField4_ & 0x00800000) == 0x00800000);
        }

        /**
         * <code>optional int32 gbasport = 157;</code>
         * <p>
         * <pre>
         * GBA连接设备时使用的源端口，内部使用
         * </pre>
         */
        public int getGbasport() {
            return gbasport_;
        }

        // optional bytes iba_fillmemo = 158;
        public static final int IBA_FILLMEMO_FIELD_NUMBER = 158;
        private com.google.protobuf.ByteString ibaFillmemo_;

        /**
         * <code>optional bytes iba_fillmemo = 158;</code>
         * <p>
         * <pre>
         * IBA补全依据(内部使用)
         * </pre>
         */
        public boolean hasIbaFillmemo() {
            return ((bitField4_ & 0x01000000) == 0x01000000);
        }

        /**
         * <code>optional bytes iba_fillmemo = 158;</code>
         * <p>
         * <pre>
         * IBA补全依据(内部使用)
         * </pre>
         */
        public com.google.protobuf.ByteString getIbaFillmemo() {
            return ibaFillmemo_;
        }

        private void initFields() {
            sid_ = com.google.protobuf.ByteString.EMPTY;
            alarm_ = sp.AuditLog.T_ALARM_LOG.getDefaultInstance();
            mark_ = 0;
            seq_ = 0;
            sessionid_ = com.google.protobuf.ByteString.EMPTY;
            anaPolicyId_ = 0;
            logType_ = sp.AuditEnum.LOG_TYPE.LOG_UNKNOWN;
            auditLogtypeid_ = 0;
            auditLogtypename_ = com.google.protobuf.ByteString.EMPTY;
            astId_ = 0;
            astIp_ = com.google.protobuf.ByteString.EMPTY;
            astName_ = com.google.protobuf.ByteString.EMPTY;
            astRegionCode_ = com.google.protobuf.ByteString.EMPTY;
            astRegionName_ = com.google.protobuf.ByteString.EMPTY;
            hgid_ = 0;
            hgname_ = com.google.protobuf.ByteString.EMPTY;
            progkey_ = com.google.protobuf.ByteString.EMPTY;
            astTypeId_ = 0;
            astTypeCode_ = com.google.protobuf.ByteString.EMPTY;
            astTypeName_ = com.google.protobuf.ByteString.EMPTY;
            astAdmin_ = com.google.protobuf.ByteString.EMPTY;
            keyAst_ = 0;
            engineId_ = 0;
            engineType_ = sp.AuditEnum.COMPONENT_TYPE.ALL;
            engineIp_ = com.google.protobuf.ByteString.EMPTY;
            engineTypeName_ = com.google.protobuf.ByteString.EMPTY;
            logSourceIp_ = com.google.protobuf.ByteString.EMPTY;
            userid_ = 0;
            logname_ = com.google.protobuf.ByteString.EMPTY;
            uname_ = com.google.protobuf.ByteString.EMPTY;
            ouid_ = 0;
            ouname_ = com.google.protobuf.ByteString.EMPTY;
            lognameTypeId_ = 0;
            lognameType_ = com.google.protobuf.ByteString.EMPTY;
            lognameRegionCode_ = com.google.protobuf.ByteString.EMPTY;
            lognameRegion_ = com.google.protobuf.ByteString.EMPTY;
            lognameStatus_ = 0;
            treasuryLogType_ = 0;
            coUserid_ = 0;
            coUserLogname_ = com.google.protobuf.ByteString.EMPTY;
            coUserName_ = com.google.protobuf.ByteString.EMPTY;
            coUserOrgId_ = 0;
            coUserOrgName_ = com.google.protobuf.ByteString.EMPTY;
            coUserMobile_ = com.google.protobuf.ByteString.EMPTY;
            treasurySceneType_ = 0;
            treasurySceneId_ = com.google.protobuf.ByteString.EMPTY;
            treasurySceneName_ = com.google.protobuf.ByteString.EMPTY;
            treasuryAuthType_ = 0;
            accessType_ = com.google.protobuf.ByteString.EMPTY;
            applyTimeSlot_ = com.google.protobuf.ByteString.EMPTY;
            treasuryStatus_ = 0;
            specialServiceNum_ = com.google.protobuf.ByteString.EMPTY;
            authResult_ = com.google.protobuf.ByteString.EMPTY;
            smsContent_ = com.google.protobuf.ByteString.EMPTY;
            accountId_ = 0;
            account_ = com.google.protobuf.ByteString.EMPTY;
            appOuname_ = com.google.protobuf.ByteString.EMPTY;
            accountTypeId_ = 0;
            accountTypeName_ = com.google.protobuf.ByteString.EMPTY;
            accountRegionCode_ = com.google.protobuf.ByteString.EMPTY;
            accountRegion_ = com.google.protobuf.ByteString.EMPTY;
            accountStatus_ = 0;
            logtimeSec_ = 0L;
            logtimeMsec_ = 0L;
            endtime_ = com.google.protobuf.ByteString.EMPTY;
            gatherSec_ = 0L;
            gatherMsec_ = 0L;
            sip_ = com.google.protobuf.ByteString.EMPTY;
            smac_ = com.google.protobuf.ByteString.EMPTY;
            sport_ = 0;
            dip_ = com.google.protobuf.ByteString.EMPTY;
            dmac_ = com.google.protobuf.ByteString.EMPTY;
            dport_ = 0;
            eventid_ = 0;
            riskLevel_ = sp.AuditEnum.RISK_LEVEL.RED;
            operate_ = com.google.protobuf.ByteString.EMPTY;
            objId_ = com.google.protobuf.ByteString.EMPTY;
            obj_ = com.google.protobuf.ByteString.EMPTY;
            objParentId_ = com.google.protobuf.ByteString.EMPTY;
            objParentName_ = com.google.protobuf.ByteString.EMPTY;
            objectstationCode_ = com.google.protobuf.ByteString.EMPTY;
            objectstationName_ = com.google.protobuf.ByteString.EMPTY;
            result_ = com.google.protobuf.ByteString.EMPTY;
            retcode_ = 0;
            processname_ = com.google.protobuf.ByteString.EMPTY;
            workinfo_ = com.google.protobuf.ByteString.EMPTY;
            logreason_ = com.google.protobuf.ByteString.EMPTY;
            vdata_ = com.google.protobuf.ByteString.EMPTY;
            facility_ = 0;
            severity_ = 0;
            memo_ = com.google.protobuf.ByteString.EMPTY;
            hbasession_ = com.google.protobuf.ByteString.EMPTY;
            opTypeId_ = 0;
            opType_ = com.google.protobuf.ByteString.EMPTY;
            opClassId_ = 0;
            opClass_ = com.google.protobuf.ByteString.EMPTY;
            opItemId_ = 0;
            opItem_ = com.google.protobuf.ByteString.EMPTY;
            opCode_ = com.google.protobuf.ByteString.EMPTY;
            opKeyId_ = 0;
            opKey_ = com.google.protobuf.ByteString.EMPTY;
            operatetypeid_ = com.google.protobuf.ByteString.EMPTY;
            operatetypename_ = com.google.protobuf.ByteString.EMPTY;
            authtype_ = com.google.protobuf.ByteString.EMPTY;
            logid_ = com.google.protobuf.ByteString.EMPTY;
            orgname_ = com.google.protobuf.ByteString.EMPTY;
            recdefid_ = com.google.protobuf.ByteString.EMPTY;
            recdedate_ = com.google.protobuf.ByteString.EMPTY;
            formnum_ = com.google.protobuf.ByteString.EMPTY;
            jobcount_ = com.google.protobuf.ByteString.EMPTY;
            okcount_ = com.google.protobuf.ByteString.EMPTY;
            failcount_ = com.google.protobuf.ByteString.EMPTY;
            servnumber_ = com.google.protobuf.ByteString.EMPTY;
            recname_ = com.google.protobuf.ByteString.EMPTY;
            status_ = com.google.protobuf.ByteString.EMPTY;
            filluuid_ = com.google.protobuf.ByteString.EMPTY;
            reserved0_ = com.google.protobuf.ByteString.EMPTY;
            reserved1_ = com.google.protobuf.ByteString.EMPTY;
            reserved2_ = com.google.protobuf.ByteString.EMPTY;
            reserved3_ = com.google.protobuf.ByteString.EMPTY;
            reserved4_ = com.google.protobuf.ByteString.EMPTY;
            reserved5_ = com.google.protobuf.ByteString.EMPTY;
            reserved6_ = com.google.protobuf.ByteString.EMPTY;
            reserved7_ = com.google.protobuf.ByteString.EMPTY;
            reserved8_ = com.google.protobuf.ByteString.EMPTY;
            reserved9_ = com.google.protobuf.ByteString.EMPTY;
            resKey_ = com.google.protobuf.ByteString.EMPTY;
            logtable_ = com.google.protobuf.ByteString.EMPTY;
            functionid_ = 0;
            functionname_ = com.google.protobuf.ByteString.EMPTY;
            direction_ = 0;
            nreserved0_ = 0;
            nreserved1_ = 0;
            nreserved2_ = 0;
            nreserved3_ = 0;
            nreserved4_ = 0;
            anaPolicyType_ = sp.AuditEnum.ANA_POLICY_TYPE.FILTER_POLICY;
            anaPolicyName_ = com.google.protobuf.ByteString.EMPTY;
            bossTreaSceneType_ = 0;
            bossTreaSceneName_ = com.google.protobuf.ByteString.EMPTY;
            clientip_ = com.google.protobuf.ByteString.EMPTY;
            processid_ = 0;
            procStarttime_ = com.google.protobuf.ByteString.EMPTY;
            duration_ = 0;
            protocol_ = 0;
            servPort_ = 0;
            flownum_ = 0F;
            recnum_ = 0;
            clientinfo_ = com.google.protobuf.ByteString.EMPTY;
            serverinfo_ = com.google.protobuf.ByteString.EMPTY;
            logclass_ = 0;
            gbasport_ = 0;
            ibaFillmemo_ = com.google.protobuf.ByteString.EMPTY;
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized != -1) return isInitialized == 1;

            if (!hasSid()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasLogType()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasLogtimeSec()) {
                memoizedIsInitialized = 0;
                return false;
            }
            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeBytes(1, sid_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeMessage(2, alarm_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeInt32(8, mark_);
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                output.writeUInt32(9, seq_);
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                output.writeBytes(10, sessionid_);
            }
            if (((bitField0_ & 0x00000020) == 0x00000020)) {
                output.writeInt32(11, anaPolicyId_);
            }
            if (((bitField0_ & 0x00000040) == 0x00000040)) {
                output.writeEnum(12, logType_.getNumber());
            }
            if (((bitField0_ & 0x00000080) == 0x00000080)) {
                output.writeInt32(13, auditLogtypeid_);
            }
            if (((bitField0_ & 0x00000100) == 0x00000100)) {
                output.writeBytes(14, auditLogtypename_);
            }
            if (((bitField0_ & 0x00000200) == 0x00000200)) {
                output.writeInt32(15, astId_);
            }
            if (((bitField0_ & 0x00000400) == 0x00000400)) {
                output.writeBytes(16, astIp_);
            }
            if (((bitField0_ & 0x00000800) == 0x00000800)) {
                output.writeBytes(17, astName_);
            }
            if (((bitField0_ & 0x00001000) == 0x00001000)) {
                output.writeBytes(18, astRegionCode_);
            }
            if (((bitField0_ & 0x00002000) == 0x00002000)) {
                output.writeBytes(19, astRegionName_);
            }
            if (((bitField0_ & 0x00004000) == 0x00004000)) {
                output.writeInt32(20, hgid_);
            }
            if (((bitField0_ & 0x00008000) == 0x00008000)) {
                output.writeBytes(21, hgname_);
            }
            if (((bitField0_ & 0x00010000) == 0x00010000)) {
                output.writeBytes(22, progkey_);
            }
            if (((bitField0_ & 0x00020000) == 0x00020000)) {
                output.writeInt32(23, astTypeId_);
            }
            if (((bitField0_ & 0x00040000) == 0x00040000)) {
                output.writeBytes(24, astTypeCode_);
            }
            if (((bitField0_ & 0x00080000) == 0x00080000)) {
                output.writeBytes(25, astTypeName_);
            }
            if (((bitField0_ & 0x00100000) == 0x00100000)) {
                output.writeBytes(26, astAdmin_);
            }
            if (((bitField0_ & 0x00200000) == 0x00200000)) {
                output.writeInt32(27, keyAst_);
            }
            if (((bitField0_ & 0x00400000) == 0x00400000)) {
                output.writeInt32(28, engineId_);
            }
            if (((bitField0_ & 0x00800000) == 0x00800000)) {
                output.writeEnum(29, engineType_.getNumber());
            }
            if (((bitField0_ & 0x01000000) == 0x01000000)) {
                output.writeBytes(30, engineIp_);
            }
            if (((bitField0_ & 0x02000000) == 0x02000000)) {
                output.writeBytes(31, engineTypeName_);
            }
            if (((bitField0_ & 0x04000000) == 0x04000000)) {
                output.writeBytes(32, logSourceIp_);
            }
            if (((bitField0_ & 0x08000000) == 0x08000000)) {
                output.writeInt32(33, userid_);
            }
            if (((bitField0_ & 0x10000000) == 0x10000000)) {
                output.writeBytes(34, logname_);
            }
            if (((bitField0_ & 0x20000000) == 0x20000000)) {
                output.writeBytes(35, uname_);
            }
            if (((bitField0_ & 0x40000000) == 0x40000000)) {
                output.writeInt32(36, ouid_);
            }
            if (((bitField0_ & 0x80000000) == 0x80000000)) {
                output.writeBytes(37, ouname_);
            }
            if (((bitField1_ & 0x00000001) == 0x00000001)) {
                output.writeInt32(38, lognameTypeId_);
            }
            if (((bitField1_ & 0x00000002) == 0x00000002)) {
                output.writeBytes(39, lognameType_);
            }
            if (((bitField1_ & 0x00000004) == 0x00000004)) {
                output.writeBytes(40, lognameRegionCode_);
            }
            if (((bitField1_ & 0x00000008) == 0x00000008)) {
                output.writeBytes(41, lognameRegion_);
            }
            if (((bitField1_ & 0x00000010) == 0x00000010)) {
                output.writeInt32(42, lognameStatus_);
            }
            if (((bitField1_ & 0x00000020) == 0x00000020)) {
                output.writeInt32(43, treasuryLogType_);
            }
            if (((bitField1_ & 0x00000040) == 0x00000040)) {
                output.writeInt32(44, coUserid_);
            }
            if (((bitField1_ & 0x00000080) == 0x00000080)) {
                output.writeBytes(45, coUserLogname_);
            }
            if (((bitField1_ & 0x00000100) == 0x00000100)) {
                output.writeBytes(46, coUserName_);
            }
            if (((bitField1_ & 0x00000200) == 0x00000200)) {
                output.writeInt32(47, coUserOrgId_);
            }
            if (((bitField1_ & 0x00000400) == 0x00000400)) {
                output.writeBytes(48, coUserOrgName_);
            }
            if (((bitField1_ & 0x00000800) == 0x00000800)) {
                output.writeBytes(49, coUserMobile_);
            }
            if (((bitField1_ & 0x00001000) == 0x00001000)) {
                output.writeInt32(50, treasurySceneType_);
            }
            if (((bitField1_ & 0x00002000) == 0x00002000)) {
                output.writeBytes(51, treasurySceneId_);
            }
            if (((bitField1_ & 0x00004000) == 0x00004000)) {
                output.writeBytes(52, treasurySceneName_);
            }
            if (((bitField1_ & 0x00008000) == 0x00008000)) {
                output.writeInt32(53, treasuryAuthType_);
            }
            if (((bitField1_ & 0x00010000) == 0x00010000)) {
                output.writeBytes(54, accessType_);
            }
            if (((bitField1_ & 0x00020000) == 0x00020000)) {
                output.writeBytes(55, applyTimeSlot_);
            }
            if (((bitField1_ & 0x00040000) == 0x00040000)) {
                output.writeInt32(56, treasuryStatus_);
            }
            if (((bitField1_ & 0x00080000) == 0x00080000)) {
                output.writeBytes(57, specialServiceNum_);
            }
            if (((bitField1_ & 0x00100000) == 0x00100000)) {
                output.writeBytes(58, authResult_);
            }
            if (((bitField1_ & 0x00200000) == 0x00200000)) {
                output.writeBytes(59, smsContent_);
            }
            if (((bitField1_ & 0x00400000) == 0x00400000)) {
                output.writeInt32(60, accountId_);
            }
            if (((bitField1_ & 0x00800000) == 0x00800000)) {
                output.writeBytes(61, account_);
            }
            if (((bitField1_ & 0x01000000) == 0x01000000)) {
                output.writeBytes(62, appOuname_);
            }
            if (((bitField1_ & 0x02000000) == 0x02000000)) {
                output.writeInt32(63, accountTypeId_);
            }
            if (((bitField1_ & 0x04000000) == 0x04000000)) {
                output.writeBytes(64, accountTypeName_);
            }
            if (((bitField1_ & 0x08000000) == 0x08000000)) {
                output.writeBytes(65, accountRegionCode_);
            }
            if (((bitField1_ & 0x10000000) == 0x10000000)) {
                output.writeBytes(66, accountRegion_);
            }
            if (((bitField1_ & 0x20000000) == 0x20000000)) {
                output.writeInt32(67, accountStatus_);
            }
            if (((bitField1_ & 0x40000000) == 0x40000000)) {
                output.writeUInt64(68, logtimeSec_);
            }
            if (((bitField1_ & 0x80000000) == 0x80000000)) {
                output.writeUInt64(69, logtimeMsec_);
            }
            if (((bitField2_ & 0x00000001) == 0x00000001)) {
                output.writeBytes(70, endtime_);
            }
            if (((bitField2_ & 0x00000002) == 0x00000002)) {
                output.writeUInt64(71, gatherSec_);
            }
            if (((bitField2_ & 0x00000004) == 0x00000004)) {
                output.writeUInt64(72, gatherMsec_);
            }
            if (((bitField2_ & 0x00000008) == 0x00000008)) {
                output.writeBytes(73, sip_);
            }
            if (((bitField2_ & 0x00000010) == 0x00000010)) {
                output.writeBytes(74, smac_);
            }
            if (((bitField2_ & 0x00000020) == 0x00000020)) {
                output.writeUInt32(75, sport_);
            }
            if (((bitField2_ & 0x00000040) == 0x00000040)) {
                output.writeBytes(76, dip_);
            }
            if (((bitField2_ & 0x00000080) == 0x00000080)) {
                output.writeBytes(77, dmac_);
            }
            if (((bitField2_ & 0x00000100) == 0x00000100)) {
                output.writeUInt32(78, dport_);
            }
            if (((bitField2_ & 0x00000200) == 0x00000200)) {
                output.writeInt32(79, eventid_);
            }
            if (((bitField2_ & 0x00000400) == 0x00000400)) {
                output.writeEnum(80, riskLevel_.getNumber());
            }
            if (((bitField2_ & 0x00000800) == 0x00000800)) {
                output.writeBytes(81, operate_);
            }
            if (((bitField2_ & 0x00001000) == 0x00001000)) {
                output.writeBytes(82, objId_);
            }
            if (((bitField2_ & 0x00002000) == 0x00002000)) {
                output.writeBytes(83, obj_);
            }
            if (((bitField2_ & 0x00004000) == 0x00004000)) {
                output.writeBytes(84, objParentId_);
            }
            if (((bitField2_ & 0x00008000) == 0x00008000)) {
                output.writeBytes(85, objParentName_);
            }
            if (((bitField2_ & 0x00010000) == 0x00010000)) {
                output.writeBytes(86, objectstationCode_);
            }
            if (((bitField2_ & 0x00020000) == 0x00020000)) {
                output.writeBytes(87, objectstationName_);
            }
            if (((bitField2_ & 0x00040000) == 0x00040000)) {
                output.writeBytes(88, result_);
            }
            if (((bitField2_ & 0x00080000) == 0x00080000)) {
                output.writeInt32(89, retcode_);
            }
            if (((bitField2_ & 0x00100000) == 0x00100000)) {
                output.writeBytes(90, processname_);
            }
            if (((bitField2_ & 0x00200000) == 0x00200000)) {
                output.writeBytes(91, workinfo_);
            }
            if (((bitField2_ & 0x00400000) == 0x00400000)) {
                output.writeBytes(92, logreason_);
            }
            if (((bitField2_ & 0x00800000) == 0x00800000)) {
                output.writeBytes(93, vdata_);
            }
            if (((bitField2_ & 0x01000000) == 0x01000000)) {
                output.writeInt32(94, facility_);
            }
            if (((bitField2_ & 0x02000000) == 0x02000000)) {
                output.writeInt32(95, severity_);
            }
            if (((bitField2_ & 0x04000000) == 0x04000000)) {
                output.writeBytes(96, memo_);
            }
            if (((bitField2_ & 0x08000000) == 0x08000000)) {
                output.writeBytes(97, hbasession_);
            }
            if (((bitField2_ & 0x10000000) == 0x10000000)) {
                output.writeInt32(98, opTypeId_);
            }
            if (((bitField2_ & 0x20000000) == 0x20000000)) {
                output.writeBytes(99, opType_);
            }
            if (((bitField2_ & 0x40000000) == 0x40000000)) {
                output.writeInt32(100, opClassId_);
            }
            if (((bitField2_ & 0x80000000) == 0x80000000)) {
                output.writeBytes(101, opClass_);
            }
            if (((bitField3_ & 0x00000001) == 0x00000001)) {
                output.writeInt32(102, opItemId_);
            }
            if (((bitField3_ & 0x00000002) == 0x00000002)) {
                output.writeBytes(103, opItem_);
            }
            if (((bitField3_ & 0x00000004) == 0x00000004)) {
                output.writeBytes(104, opCode_);
            }
            if (((bitField3_ & 0x00000008) == 0x00000008)) {
                output.writeInt32(105, opKeyId_);
            }
            if (((bitField3_ & 0x00000010) == 0x00000010)) {
                output.writeBytes(106, opKey_);
            }
            if (((bitField3_ & 0x00000020) == 0x00000020)) {
                output.writeBytes(107, operatetypeid_);
            }
            if (((bitField3_ & 0x00000040) == 0x00000040)) {
                output.writeBytes(108, operatetypename_);
            }
            if (((bitField3_ & 0x00000080) == 0x00000080)) {
                output.writeBytes(109, authtype_);
            }
            if (((bitField3_ & 0x00000100) == 0x00000100)) {
                output.writeBytes(110, logid_);
            }
            if (((bitField3_ & 0x00000200) == 0x00000200)) {
                output.writeBytes(111, orgname_);
            }
            if (((bitField3_ & 0x00000400) == 0x00000400)) {
                output.writeBytes(112, recdefid_);
            }
            if (((bitField3_ & 0x00000800) == 0x00000800)) {
                output.writeBytes(113, recdedate_);
            }
            if (((bitField3_ & 0x00001000) == 0x00001000)) {
                output.writeBytes(114, formnum_);
            }
            if (((bitField3_ & 0x00002000) == 0x00002000)) {
                output.writeBytes(115, jobcount_);
            }
            if (((bitField3_ & 0x00004000) == 0x00004000)) {
                output.writeBytes(116, okcount_);
            }
            if (((bitField3_ & 0x00008000) == 0x00008000)) {
                output.writeBytes(117, failcount_);
            }
            if (((bitField3_ & 0x00010000) == 0x00010000)) {
                output.writeBytes(118, servnumber_);
            }
            if (((bitField3_ & 0x00020000) == 0x00020000)) {
                output.writeBytes(119, recname_);
            }
            if (((bitField3_ & 0x00040000) == 0x00040000)) {
                output.writeBytes(120, status_);
            }
            if (((bitField3_ & 0x00080000) == 0x00080000)) {
                output.writeBytes(121, filluuid_);
            }
            if (((bitField3_ & 0x00100000) == 0x00100000)) {
                output.writeBytes(122, reserved0_);
            }
            if (((bitField3_ & 0x00200000) == 0x00200000)) {
                output.writeBytes(123, reserved1_);
            }
            if (((bitField3_ & 0x00400000) == 0x00400000)) {
                output.writeBytes(124, reserved2_);
            }
            if (((bitField3_ & 0x00800000) == 0x00800000)) {
                output.writeBytes(125, reserved3_);
            }
            if (((bitField3_ & 0x01000000) == 0x01000000)) {
                output.writeBytes(126, reserved4_);
            }
            if (((bitField3_ & 0x02000000) == 0x02000000)) {
                output.writeBytes(127, reserved5_);
            }
            if (((bitField3_ & 0x04000000) == 0x04000000)) {
                output.writeBytes(128, reserved6_);
            }
            if (((bitField3_ & 0x08000000) == 0x08000000)) {
                output.writeBytes(129, reserved7_);
            }
            if (((bitField3_ & 0x10000000) == 0x10000000)) {
                output.writeBytes(130, reserved8_);
            }
            if (((bitField3_ & 0x20000000) == 0x20000000)) {
                output.writeBytes(131, reserved9_);
            }
            if (((bitField3_ & 0x40000000) == 0x40000000)) {
                output.writeBytes(132, resKey_);
            }
            if (((bitField3_ & 0x80000000) == 0x80000000)) {
                output.writeBytes(133, logtable_);
            }
            if (((bitField4_ & 0x00000001) == 0x00000001)) {
                output.writeInt32(134, functionid_);
            }
            if (((bitField4_ & 0x00000002) == 0x00000002)) {
                output.writeBytes(135, functionname_);
            }
            if (((bitField4_ & 0x00000004) == 0x00000004)) {
                output.writeInt32(136, direction_);
            }
            if (((bitField4_ & 0x00000008) == 0x00000008)) {
                output.writeInt32(137, nreserved0_);
            }
            if (((bitField4_ & 0x00000010) == 0x00000010)) {
                output.writeInt32(138, nreserved1_);
            }
            if (((bitField4_ & 0x00000020) == 0x00000020)) {
                output.writeInt32(139, nreserved2_);
            }
            if (((bitField4_ & 0x00000040) == 0x00000040)) {
                output.writeInt32(140, nreserved3_);
            }
            if (((bitField4_ & 0x00000080) == 0x00000080)) {
                output.writeInt32(141, nreserved4_);
            }
            if (((bitField4_ & 0x00000100) == 0x00000100)) {
                output.writeEnum(142, anaPolicyType_.getNumber());
            }
            if (((bitField4_ & 0x00000200) == 0x00000200)) {
                output.writeBytes(143, anaPolicyName_);
            }
            if (((bitField4_ & 0x00000400) == 0x00000400)) {
                output.writeInt32(144, bossTreaSceneType_);
            }
            if (((bitField4_ & 0x00000800) == 0x00000800)) {
                output.writeBytes(145, bossTreaSceneName_);
            }
            if (((bitField4_ & 0x00001000) == 0x00001000)) {
                output.writeBytes(146, clientip_);
            }
            if (((bitField4_ & 0x00002000) == 0x00002000)) {
                output.writeUInt32(147, processid_);
            }
            if (((bitField4_ & 0x00004000) == 0x00004000)) {
                output.writeBytes(148, procStarttime_);
            }
            if (((bitField4_ & 0x00008000) == 0x00008000)) {
                output.writeUInt32(149, duration_);
            }
            if (((bitField4_ & 0x00010000) == 0x00010000)) {
                output.writeInt32(150, protocol_);
            }
            if (((bitField4_ & 0x00020000) == 0x00020000)) {
                output.writeUInt32(151, servPort_);
            }
            if (((bitField4_ & 0x00040000) == 0x00040000)) {
                output.writeFloat(152, flownum_);
            }
            if (((bitField4_ & 0x00080000) == 0x00080000)) {
                output.writeUInt32(153, recnum_);
            }
            if (((bitField4_ & 0x00100000) == 0x00100000)) {
                output.writeBytes(154, clientinfo_);
            }
            if (((bitField4_ & 0x00200000) == 0x00200000)) {
                output.writeBytes(155, serverinfo_);
            }
            if (((bitField4_ & 0x00400000) == 0x00400000)) {
                output.writeInt32(156, logclass_);
            }
            if (((bitField4_ & 0x00800000) == 0x00800000)) {
                output.writeInt32(157, gbasport_);
            }
            if (((bitField4_ & 0x01000000) == 0x01000000)) {
                output.writeBytes(158, ibaFillmemo_);
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(1, sid_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(2, alarm_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(8, mark_);
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(9, seq_);
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(10, sessionid_);
            }
            if (((bitField0_ & 0x00000020) == 0x00000020)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(11, anaPolicyId_);
            }
            if (((bitField0_ & 0x00000040) == 0x00000040)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeEnumSize(12, logType_.getNumber());
            }
            if (((bitField0_ & 0x00000080) == 0x00000080)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(13, auditLogtypeid_);
            }
            if (((bitField0_ & 0x00000100) == 0x00000100)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(14, auditLogtypename_);
            }
            if (((bitField0_ & 0x00000200) == 0x00000200)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(15, astId_);
            }
            if (((bitField0_ & 0x00000400) == 0x00000400)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(16, astIp_);
            }
            if (((bitField0_ & 0x00000800) == 0x00000800)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(17, astName_);
            }
            if (((bitField0_ & 0x00001000) == 0x00001000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(18, astRegionCode_);
            }
            if (((bitField0_ & 0x00002000) == 0x00002000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(19, astRegionName_);
            }
            if (((bitField0_ & 0x00004000) == 0x00004000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(20, hgid_);
            }
            if (((bitField0_ & 0x00008000) == 0x00008000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(21, hgname_);
            }
            if (((bitField0_ & 0x00010000) == 0x00010000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(22, progkey_);
            }
            if (((bitField0_ & 0x00020000) == 0x00020000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(23, astTypeId_);
            }
            if (((bitField0_ & 0x00040000) == 0x00040000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(24, astTypeCode_);
            }
            if (((bitField0_ & 0x00080000) == 0x00080000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(25, astTypeName_);
            }
            if (((bitField0_ & 0x00100000) == 0x00100000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(26, astAdmin_);
            }
            if (((bitField0_ & 0x00200000) == 0x00200000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(27, keyAst_);
            }
            if (((bitField0_ & 0x00400000) == 0x00400000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(28, engineId_);
            }
            if (((bitField0_ & 0x00800000) == 0x00800000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeEnumSize(29, engineType_.getNumber());
            }
            if (((bitField0_ & 0x01000000) == 0x01000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(30, engineIp_);
            }
            if (((bitField0_ & 0x02000000) == 0x02000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(31, engineTypeName_);
            }
            if (((bitField0_ & 0x04000000) == 0x04000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(32, logSourceIp_);
            }
            if (((bitField0_ & 0x08000000) == 0x08000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(33, userid_);
            }
            if (((bitField0_ & 0x10000000) == 0x10000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(34, logname_);
            }
            if (((bitField0_ & 0x20000000) == 0x20000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(35, uname_);
            }
            if (((bitField0_ & 0x40000000) == 0x40000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(36, ouid_);
            }
            if (((bitField0_ & 0x80000000) == 0x80000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(37, ouname_);
            }
            if (((bitField1_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(38, lognameTypeId_);
            }
            if (((bitField1_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(39, lognameType_);
            }
            if (((bitField1_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(40, lognameRegionCode_);
            }
            if (((bitField1_ & 0x00000008) == 0x00000008)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(41, lognameRegion_);
            }
            if (((bitField1_ & 0x00000010) == 0x00000010)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(42, lognameStatus_);
            }
            if (((bitField1_ & 0x00000020) == 0x00000020)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(43, treasuryLogType_);
            }
            if (((bitField1_ & 0x00000040) == 0x00000040)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(44, coUserid_);
            }
            if (((bitField1_ & 0x00000080) == 0x00000080)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(45, coUserLogname_);
            }
            if (((bitField1_ & 0x00000100) == 0x00000100)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(46, coUserName_);
            }
            if (((bitField1_ & 0x00000200) == 0x00000200)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(47, coUserOrgId_);
            }
            if (((bitField1_ & 0x00000400) == 0x00000400)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(48, coUserOrgName_);
            }
            if (((bitField1_ & 0x00000800) == 0x00000800)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(49, coUserMobile_);
            }
            if (((bitField1_ & 0x00001000) == 0x00001000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(50, treasurySceneType_);
            }
            if (((bitField1_ & 0x00002000) == 0x00002000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(51, treasurySceneId_);
            }
            if (((bitField1_ & 0x00004000) == 0x00004000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(52, treasurySceneName_);
            }
            if (((bitField1_ & 0x00008000) == 0x00008000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(53, treasuryAuthType_);
            }
            if (((bitField1_ & 0x00010000) == 0x00010000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(54, accessType_);
            }
            if (((bitField1_ & 0x00020000) == 0x00020000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(55, applyTimeSlot_);
            }
            if (((bitField1_ & 0x00040000) == 0x00040000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(56, treasuryStatus_);
            }
            if (((bitField1_ & 0x00080000) == 0x00080000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(57, specialServiceNum_);
            }
            if (((bitField1_ & 0x00100000) == 0x00100000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(58, authResult_);
            }
            if (((bitField1_ & 0x00200000) == 0x00200000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(59, smsContent_);
            }
            if (((bitField1_ & 0x00400000) == 0x00400000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(60, accountId_);
            }
            if (((bitField1_ & 0x00800000) == 0x00800000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(61, account_);
            }
            if (((bitField1_ & 0x01000000) == 0x01000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(62, appOuname_);
            }
            if (((bitField1_ & 0x02000000) == 0x02000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(63, accountTypeId_);
            }
            if (((bitField1_ & 0x04000000) == 0x04000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(64, accountTypeName_);
            }
            if (((bitField1_ & 0x08000000) == 0x08000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(65, accountRegionCode_);
            }
            if (((bitField1_ & 0x10000000) == 0x10000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(66, accountRegion_);
            }
            if (((bitField1_ & 0x20000000) == 0x20000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(67, accountStatus_);
            }
            if (((bitField1_ & 0x40000000) == 0x40000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt64Size(68, logtimeSec_);
            }
            if (((bitField1_ & 0x80000000) == 0x80000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt64Size(69, logtimeMsec_);
            }
            if (((bitField2_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(70, endtime_);
            }
            if (((bitField2_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt64Size(71, gatherSec_);
            }
            if (((bitField2_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt64Size(72, gatherMsec_);
            }
            if (((bitField2_ & 0x00000008) == 0x00000008)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(73, sip_);
            }
            if (((bitField2_ & 0x00000010) == 0x00000010)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(74, smac_);
            }
            if (((bitField2_ & 0x00000020) == 0x00000020)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(75, sport_);
            }
            if (((bitField2_ & 0x00000040) == 0x00000040)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(76, dip_);
            }
            if (((bitField2_ & 0x00000080) == 0x00000080)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(77, dmac_);
            }
            if (((bitField2_ & 0x00000100) == 0x00000100)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(78, dport_);
            }
            if (((bitField2_ & 0x00000200) == 0x00000200)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(79, eventid_);
            }
            if (((bitField2_ & 0x00000400) == 0x00000400)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeEnumSize(80, riskLevel_.getNumber());
            }
            if (((bitField2_ & 0x00000800) == 0x00000800)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(81, operate_);
            }
            if (((bitField2_ & 0x00001000) == 0x00001000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(82, objId_);
            }
            if (((bitField2_ & 0x00002000) == 0x00002000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(83, obj_);
            }
            if (((bitField2_ & 0x00004000) == 0x00004000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(84, objParentId_);
            }
            if (((bitField2_ & 0x00008000) == 0x00008000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(85, objParentName_);
            }
            if (((bitField2_ & 0x00010000) == 0x00010000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(86, objectstationCode_);
            }
            if (((bitField2_ & 0x00020000) == 0x00020000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(87, objectstationName_);
            }
            if (((bitField2_ & 0x00040000) == 0x00040000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(88, result_);
            }
            if (((bitField2_ & 0x00080000) == 0x00080000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(89, retcode_);
            }
            if (((bitField2_ & 0x00100000) == 0x00100000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(90, processname_);
            }
            if (((bitField2_ & 0x00200000) == 0x00200000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(91, workinfo_);
            }
            if (((bitField2_ & 0x00400000) == 0x00400000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(92, logreason_);
            }
            if (((bitField2_ & 0x00800000) == 0x00800000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(93, vdata_);
            }
            if (((bitField2_ & 0x01000000) == 0x01000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(94, facility_);
            }
            if (((bitField2_ & 0x02000000) == 0x02000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(95, severity_);
            }
            if (((bitField2_ & 0x04000000) == 0x04000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(96, memo_);
            }
            if (((bitField2_ & 0x08000000) == 0x08000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(97, hbasession_);
            }
            if (((bitField2_ & 0x10000000) == 0x10000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(98, opTypeId_);
            }
            if (((bitField2_ & 0x20000000) == 0x20000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(99, opType_);
            }
            if (((bitField2_ & 0x40000000) == 0x40000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(100, opClassId_);
            }
            if (((bitField2_ & 0x80000000) == 0x80000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(101, opClass_);
            }
            if (((bitField3_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(102, opItemId_);
            }
            if (((bitField3_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(103, opItem_);
            }
            if (((bitField3_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(104, opCode_);
            }
            if (((bitField3_ & 0x00000008) == 0x00000008)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(105, opKeyId_);
            }
            if (((bitField3_ & 0x00000010) == 0x00000010)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(106, opKey_);
            }
            if (((bitField3_ & 0x00000020) == 0x00000020)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(107, operatetypeid_);
            }
            if (((bitField3_ & 0x00000040) == 0x00000040)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(108, operatetypename_);
            }
            if (((bitField3_ & 0x00000080) == 0x00000080)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(109, authtype_);
            }
            if (((bitField3_ & 0x00000100) == 0x00000100)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(110, logid_);
            }
            if (((bitField3_ & 0x00000200) == 0x00000200)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(111, orgname_);
            }
            if (((bitField3_ & 0x00000400) == 0x00000400)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(112, recdefid_);
            }
            if (((bitField3_ & 0x00000800) == 0x00000800)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(113, recdedate_);
            }
            if (((bitField3_ & 0x00001000) == 0x00001000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(114, formnum_);
            }
            if (((bitField3_ & 0x00002000) == 0x00002000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(115, jobcount_);
            }
            if (((bitField3_ & 0x00004000) == 0x00004000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(116, okcount_);
            }
            if (((bitField3_ & 0x00008000) == 0x00008000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(117, failcount_);
            }
            if (((bitField3_ & 0x00010000) == 0x00010000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(118, servnumber_);
            }
            if (((bitField3_ & 0x00020000) == 0x00020000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(119, recname_);
            }
            if (((bitField3_ & 0x00040000) == 0x00040000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(120, status_);
            }
            if (((bitField3_ & 0x00080000) == 0x00080000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(121, filluuid_);
            }
            if (((bitField3_ & 0x00100000) == 0x00100000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(122, reserved0_);
            }
            if (((bitField3_ & 0x00200000) == 0x00200000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(123, reserved1_);
            }
            if (((bitField3_ & 0x00400000) == 0x00400000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(124, reserved2_);
            }
            if (((bitField3_ & 0x00800000) == 0x00800000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(125, reserved3_);
            }
            if (((bitField3_ & 0x01000000) == 0x01000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(126, reserved4_);
            }
            if (((bitField3_ & 0x02000000) == 0x02000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(127, reserved5_);
            }
            if (((bitField3_ & 0x04000000) == 0x04000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(128, reserved6_);
            }
            if (((bitField3_ & 0x08000000) == 0x08000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(129, reserved7_);
            }
            if (((bitField3_ & 0x10000000) == 0x10000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(130, reserved8_);
            }
            if (((bitField3_ & 0x20000000) == 0x20000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(131, reserved9_);
            }
            if (((bitField3_ & 0x40000000) == 0x40000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(132, resKey_);
            }
            if (((bitField3_ & 0x80000000) == 0x80000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(133, logtable_);
            }
            if (((bitField4_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(134, functionid_);
            }
            if (((bitField4_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(135, functionname_);
            }
            if (((bitField4_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(136, direction_);
            }
            if (((bitField4_ & 0x00000008) == 0x00000008)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(137, nreserved0_);
            }
            if (((bitField4_ & 0x00000010) == 0x00000010)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(138, nreserved1_);
            }
            if (((bitField4_ & 0x00000020) == 0x00000020)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(139, nreserved2_);
            }
            if (((bitField4_ & 0x00000040) == 0x00000040)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(140, nreserved3_);
            }
            if (((bitField4_ & 0x00000080) == 0x00000080)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(141, nreserved4_);
            }
            if (((bitField4_ & 0x00000100) == 0x00000100)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeEnumSize(142, anaPolicyType_.getNumber());
            }
            if (((bitField4_ & 0x00000200) == 0x00000200)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(143, anaPolicyName_);
            }
            if (((bitField4_ & 0x00000400) == 0x00000400)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(144, bossTreaSceneType_);
            }
            if (((bitField4_ & 0x00000800) == 0x00000800)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(145, bossTreaSceneName_);
            }
            if (((bitField4_ & 0x00001000) == 0x00001000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(146, clientip_);
            }
            if (((bitField4_ & 0x00002000) == 0x00002000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(147, processid_);
            }
            if (((bitField4_ & 0x00004000) == 0x00004000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(148, procStarttime_);
            }
            if (((bitField4_ & 0x00008000) == 0x00008000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(149, duration_);
            }
            if (((bitField4_ & 0x00010000) == 0x00010000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(150, protocol_);
            }
            if (((bitField4_ & 0x00020000) == 0x00020000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(151, servPort_);
            }
            if (((bitField4_ & 0x00040000) == 0x00040000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(152, flownum_);
            }
            if (((bitField4_ & 0x00080000) == 0x00080000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(153, recnum_);
            }
            if (((bitField4_ & 0x00100000) == 0x00100000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(154, clientinfo_);
            }
            if (((bitField4_ & 0x00200000) == 0x00200000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(155, serverinfo_);
            }
            if (((bitField4_ & 0x00400000) == 0x00400000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(156, logclass_);
            }
            if (((bitField4_ & 0x00800000) == 0x00800000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(157, gbasport_);
            }
            if (((bitField4_ & 0x01000000) == 0x01000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(158, ibaFillmemo_);
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        protected java.lang.Object writeReplace()
                throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static sp.AuditLog.T_AUDIT_LOG parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static sp.AuditLog.T_AUDIT_LOG parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static sp.AuditLog.T_AUDIT_LOG parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static sp.AuditLog.T_AUDIT_LOG parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static sp.AuditLog.T_AUDIT_LOG parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static sp.AuditLog.T_AUDIT_LOG parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static sp.AuditLog.T_AUDIT_LOG parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static sp.AuditLog.T_AUDIT_LOG parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static sp.AuditLog.T_AUDIT_LOG parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static sp.AuditLog.T_AUDIT_LOG parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(sp.AuditLog.T_AUDIT_LOG prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code sp.T_AUDIT_LOG}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessage.Builder<Builder>
                implements sp.AuditLog.T_AUDIT_LOGOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return sp.AuditLog.internal_static_sp_T_AUDIT_LOG_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return sp.AuditLog.internal_static_sp_T_AUDIT_LOG_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                sp.AuditLog.T_AUDIT_LOG.class, sp.AuditLog.T_AUDIT_LOG.Builder.class);
            }

            // Construct using sp.AuditLog.T_AUDIT_LOG.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                    getAlarmFieldBuilder();
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                sid_ = com.google.protobuf.ByteString.EMPTY;
                bitField0_ = (bitField0_ & ~0x00000001);
                if (alarmBuilder_ == null) {
                    alarm_ = sp.AuditLog.T_ALARM_LOG.getDefaultInstance();
                } else {
                    alarmBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000002);
                mark_ = 0;
                bitField0_ = (bitField0_ & ~0x00000004);
                seq_ = 0;
                bitField0_ = (bitField0_ & ~0x00000008);
                sessionid_ = com.google.protobuf.ByteString.EMPTY;
                bitField0_ = (bitField0_ & ~0x00000010);
                anaPolicyId_ = 0;
                bitField0_ = (bitField0_ & ~0x00000020);
                logType_ = sp.AuditEnum.LOG_TYPE.LOG_UNKNOWN;
                bitField0_ = (bitField0_ & ~0x00000040);
                auditLogtypeid_ = 0;
                bitField0_ = (bitField0_ & ~0x00000080);
                auditLogtypename_ = com.google.protobuf.ByteString.EMPTY;
                bitField0_ = (bitField0_ & ~0x00000100);
                astId_ = 0;
                bitField0_ = (bitField0_ & ~0x00000200);
                astIp_ = com.google.protobuf.ByteString.EMPTY;
                bitField0_ = (bitField0_ & ~0x00000400);
                astName_ = com.google.protobuf.ByteString.EMPTY;
                bitField0_ = (bitField0_ & ~0x00000800);
                astRegionCode_ = com.google.protobuf.ByteString.EMPTY;
                bitField0_ = (bitField0_ & ~0x00001000);
                astRegionName_ = com.google.protobuf.ByteString.EMPTY;
                bitField0_ = (bitField0_ & ~0x00002000);
                hgid_ = 0;
                bitField0_ = (bitField0_ & ~0x00004000);
                hgname_ = com.google.protobuf.ByteString.EMPTY;
                bitField0_ = (bitField0_ & ~0x00008000);
                progkey_ = com.google.protobuf.ByteString.EMPTY;
                bitField0_ = (bitField0_ & ~0x00010000);
                astTypeId_ = 0;
                bitField0_ = (bitField0_ & ~0x00020000);
                astTypeCode_ = com.google.protobuf.ByteString.EMPTY;
                bitField0_ = (bitField0_ & ~0x00040000);
                astTypeName_ = com.google.protobuf.ByteString.EMPTY;
                bitField0_ = (bitField0_ & ~0x00080000);
                astAdmin_ = com.google.protobuf.ByteString.EMPTY;
                bitField0_ = (bitField0_ & ~0x00100000);
                keyAst_ = 0;
                bitField0_ = (bitField0_ & ~0x00200000);
                engineId_ = 0;
                bitField0_ = (bitField0_ & ~0x00400000);
                engineType_ = sp.AuditEnum.COMPONENT_TYPE.ALL;
                bitField0_ = (bitField0_ & ~0x00800000);
                engineIp_ = com.google.protobuf.ByteString.EMPTY;
                bitField0_ = (bitField0_ & ~0x01000000);
                engineTypeName_ = com.google.protobuf.ByteString.EMPTY;
                bitField0_ = (bitField0_ & ~0x02000000);
                logSourceIp_ = com.google.protobuf.ByteString.EMPTY;
                bitField0_ = (bitField0_ & ~0x04000000);
                userid_ = 0;
                bitField0_ = (bitField0_ & ~0x08000000);
                logname_ = com.google.protobuf.ByteString.EMPTY;
                bitField0_ = (bitField0_ & ~0x10000000);
                uname_ = com.google.protobuf.ByteString.EMPTY;
                bitField0_ = (bitField0_ & ~0x20000000);
                ouid_ = 0;
                bitField0_ = (bitField0_ & ~0x40000000);
                ouname_ = com.google.protobuf.ByteString.EMPTY;
                bitField0_ = (bitField0_ & ~0x80000000);
                lognameTypeId_ = 0;
                bitField1_ = (bitField1_ & ~0x00000001);
                lognameType_ = com.google.protobuf.ByteString.EMPTY;
                bitField1_ = (bitField1_ & ~0x00000002);
                lognameRegionCode_ = com.google.protobuf.ByteString.EMPTY;
                bitField1_ = (bitField1_ & ~0x00000004);
                lognameRegion_ = com.google.protobuf.ByteString.EMPTY;
                bitField1_ = (bitField1_ & ~0x00000008);
                lognameStatus_ = 0;
                bitField1_ = (bitField1_ & ~0x00000010);
                treasuryLogType_ = 0;
                bitField1_ = (bitField1_ & ~0x00000020);
                coUserid_ = 0;
                bitField1_ = (bitField1_ & ~0x00000040);
                coUserLogname_ = com.google.protobuf.ByteString.EMPTY;
                bitField1_ = (bitField1_ & ~0x00000080);
                coUserName_ = com.google.protobuf.ByteString.EMPTY;
                bitField1_ = (bitField1_ & ~0x00000100);
                coUserOrgId_ = 0;
                bitField1_ = (bitField1_ & ~0x00000200);
                coUserOrgName_ = com.google.protobuf.ByteString.EMPTY;
                bitField1_ = (bitField1_ & ~0x00000400);
                coUserMobile_ = com.google.protobuf.ByteString.EMPTY;
                bitField1_ = (bitField1_ & ~0x00000800);
                treasurySceneType_ = 0;
                bitField1_ = (bitField1_ & ~0x00001000);
                treasurySceneId_ = com.google.protobuf.ByteString.EMPTY;
                bitField1_ = (bitField1_ & ~0x00002000);
                treasurySceneName_ = com.google.protobuf.ByteString.EMPTY;
                bitField1_ = (bitField1_ & ~0x00004000);
                treasuryAuthType_ = 0;
                bitField1_ = (bitField1_ & ~0x00008000);
                accessType_ = com.google.protobuf.ByteString.EMPTY;
                bitField1_ = (bitField1_ & ~0x00010000);
                applyTimeSlot_ = com.google.protobuf.ByteString.EMPTY;
                bitField1_ = (bitField1_ & ~0x00020000);
                treasuryStatus_ = 0;
                bitField1_ = (bitField1_ & ~0x00040000);
                specialServiceNum_ = com.google.protobuf.ByteString.EMPTY;
                bitField1_ = (bitField1_ & ~0x00080000);
                authResult_ = com.google.protobuf.ByteString.EMPTY;
                bitField1_ = (bitField1_ & ~0x00100000);
                smsContent_ = com.google.protobuf.ByteString.EMPTY;
                bitField1_ = (bitField1_ & ~0x00200000);
                accountId_ = 0;
                bitField1_ = (bitField1_ & ~0x00400000);
                account_ = com.google.protobuf.ByteString.EMPTY;
                bitField1_ = (bitField1_ & ~0x00800000);
                appOuname_ = com.google.protobuf.ByteString.EMPTY;
                bitField1_ = (bitField1_ & ~0x01000000);
                accountTypeId_ = 0;
                bitField1_ = (bitField1_ & ~0x02000000);
                accountTypeName_ = com.google.protobuf.ByteString.EMPTY;
                bitField1_ = (bitField1_ & ~0x04000000);
                accountRegionCode_ = com.google.protobuf.ByteString.EMPTY;
                bitField1_ = (bitField1_ & ~0x08000000);
                accountRegion_ = com.google.protobuf.ByteString.EMPTY;
                bitField1_ = (bitField1_ & ~0x10000000);
                accountStatus_ = 0;
                bitField1_ = (bitField1_ & ~0x20000000);
                logtimeSec_ = 0L;
                bitField1_ = (bitField1_ & ~0x40000000);
                logtimeMsec_ = 0L;
                bitField1_ = (bitField1_ & ~0x80000000);
                endtime_ = com.google.protobuf.ByteString.EMPTY;
                bitField2_ = (bitField2_ & ~0x00000001);
                gatherSec_ = 0L;
                bitField2_ = (bitField2_ & ~0x00000002);
                gatherMsec_ = 0L;
                bitField2_ = (bitField2_ & ~0x00000004);
                sip_ = com.google.protobuf.ByteString.EMPTY;
                bitField2_ = (bitField2_ & ~0x00000008);
                smac_ = com.google.protobuf.ByteString.EMPTY;
                bitField2_ = (bitField2_ & ~0x00000010);
                sport_ = 0;
                bitField2_ = (bitField2_ & ~0x00000020);
                dip_ = com.google.protobuf.ByteString.EMPTY;
                bitField2_ = (bitField2_ & ~0x00000040);
                dmac_ = com.google.protobuf.ByteString.EMPTY;
                bitField2_ = (bitField2_ & ~0x00000080);
                dport_ = 0;
                bitField2_ = (bitField2_ & ~0x00000100);
                eventid_ = 0;
                bitField2_ = (bitField2_ & ~0x00000200);
                riskLevel_ = sp.AuditEnum.RISK_LEVEL.RED;
                bitField2_ = (bitField2_ & ~0x00000400);
                operate_ = com.google.protobuf.ByteString.EMPTY;
                bitField2_ = (bitField2_ & ~0x00000800);
                objId_ = com.google.protobuf.ByteString.EMPTY;
                bitField2_ = (bitField2_ & ~0x00001000);
                obj_ = com.google.protobuf.ByteString.EMPTY;
                bitField2_ = (bitField2_ & ~0x00002000);
                objParentId_ = com.google.protobuf.ByteString.EMPTY;
                bitField2_ = (bitField2_ & ~0x00004000);
                objParentName_ = com.google.protobuf.ByteString.EMPTY;
                bitField2_ = (bitField2_ & ~0x00008000);
                objectstationCode_ = com.google.protobuf.ByteString.EMPTY;
                bitField2_ = (bitField2_ & ~0x00010000);
                objectstationName_ = com.google.protobuf.ByteString.EMPTY;
                bitField2_ = (bitField2_ & ~0x00020000);
                result_ = com.google.protobuf.ByteString.EMPTY;
                bitField2_ = (bitField2_ & ~0x00040000);
                retcode_ = 0;
                bitField2_ = (bitField2_ & ~0x00080000);
                processname_ = com.google.protobuf.ByteString.EMPTY;
                bitField2_ = (bitField2_ & ~0x00100000);
                workinfo_ = com.google.protobuf.ByteString.EMPTY;
                bitField2_ = (bitField2_ & ~0x00200000);
                logreason_ = com.google.protobuf.ByteString.EMPTY;
                bitField2_ = (bitField2_ & ~0x00400000);
                vdata_ = com.google.protobuf.ByteString.EMPTY;
                bitField2_ = (bitField2_ & ~0x00800000);
                facility_ = 0;
                bitField2_ = (bitField2_ & ~0x01000000);
                severity_ = 0;
                bitField2_ = (bitField2_ & ~0x02000000);
                memo_ = com.google.protobuf.ByteString.EMPTY;
                bitField2_ = (bitField2_ & ~0x04000000);
                hbasession_ = com.google.protobuf.ByteString.EMPTY;
                bitField2_ = (bitField2_ & ~0x08000000);
                opTypeId_ = 0;
                bitField2_ = (bitField2_ & ~0x10000000);
                opType_ = com.google.protobuf.ByteString.EMPTY;
                bitField2_ = (bitField2_ & ~0x20000000);
                opClassId_ = 0;
                bitField2_ = (bitField2_ & ~0x40000000);
                opClass_ = com.google.protobuf.ByteString.EMPTY;
                bitField2_ = (bitField2_ & ~0x80000000);
                opItemId_ = 0;
                bitField3_ = (bitField3_ & ~0x00000001);
                opItem_ = com.google.protobuf.ByteString.EMPTY;
                bitField3_ = (bitField3_ & ~0x00000002);
                opCode_ = com.google.protobuf.ByteString.EMPTY;
                bitField3_ = (bitField3_ & ~0x00000004);
                opKeyId_ = 0;
                bitField3_ = (bitField3_ & ~0x00000008);
                opKey_ = com.google.protobuf.ByteString.EMPTY;
                bitField3_ = (bitField3_ & ~0x00000010);
                operatetypeid_ = com.google.protobuf.ByteString.EMPTY;
                bitField3_ = (bitField3_ & ~0x00000020);
                operatetypename_ = com.google.protobuf.ByteString.EMPTY;
                bitField3_ = (bitField3_ & ~0x00000040);
                authtype_ = com.google.protobuf.ByteString.EMPTY;
                bitField3_ = (bitField3_ & ~0x00000080);
                logid_ = com.google.protobuf.ByteString.EMPTY;
                bitField3_ = (bitField3_ & ~0x00000100);
                orgname_ = com.google.protobuf.ByteString.EMPTY;
                bitField3_ = (bitField3_ & ~0x00000200);
                recdefid_ = com.google.protobuf.ByteString.EMPTY;
                bitField3_ = (bitField3_ & ~0x00000400);
                recdedate_ = com.google.protobuf.ByteString.EMPTY;
                bitField3_ = (bitField3_ & ~0x00000800);
                formnum_ = com.google.protobuf.ByteString.EMPTY;
                bitField3_ = (bitField3_ & ~0x00001000);
                jobcount_ = com.google.protobuf.ByteString.EMPTY;
                bitField3_ = (bitField3_ & ~0x00002000);
                okcount_ = com.google.protobuf.ByteString.EMPTY;
                bitField3_ = (bitField3_ & ~0x00004000);
                failcount_ = com.google.protobuf.ByteString.EMPTY;
                bitField3_ = (bitField3_ & ~0x00008000);
                servnumber_ = com.google.protobuf.ByteString.EMPTY;
                bitField3_ = (bitField3_ & ~0x00010000);
                recname_ = com.google.protobuf.ByteString.EMPTY;
                bitField3_ = (bitField3_ & ~0x00020000);
                status_ = com.google.protobuf.ByteString.EMPTY;
                bitField3_ = (bitField3_ & ~0x00040000);
                filluuid_ = com.google.protobuf.ByteString.EMPTY;
                bitField3_ = (bitField3_ & ~0x00080000);
                reserved0_ = com.google.protobuf.ByteString.EMPTY;
                bitField3_ = (bitField3_ & ~0x00100000);
                reserved1_ = com.google.protobuf.ByteString.EMPTY;
                bitField3_ = (bitField3_ & ~0x00200000);
                reserved2_ = com.google.protobuf.ByteString.EMPTY;
                bitField3_ = (bitField3_ & ~0x00400000);
                reserved3_ = com.google.protobuf.ByteString.EMPTY;
                bitField3_ = (bitField3_ & ~0x00800000);
                reserved4_ = com.google.protobuf.ByteString.EMPTY;
                bitField3_ = (bitField3_ & ~0x01000000);
                reserved5_ = com.google.protobuf.ByteString.EMPTY;
                bitField3_ = (bitField3_ & ~0x02000000);
                reserved6_ = com.google.protobuf.ByteString.EMPTY;
                bitField3_ = (bitField3_ & ~0x04000000);
                reserved7_ = com.google.protobuf.ByteString.EMPTY;
                bitField3_ = (bitField3_ & ~0x08000000);
                reserved8_ = com.google.protobuf.ByteString.EMPTY;
                bitField3_ = (bitField3_ & ~0x10000000);
                reserved9_ = com.google.protobuf.ByteString.EMPTY;
                bitField3_ = (bitField3_ & ~0x20000000);
                resKey_ = com.google.protobuf.ByteString.EMPTY;
                bitField3_ = (bitField3_ & ~0x40000000);
                logtable_ = com.google.protobuf.ByteString.EMPTY;
                bitField3_ = (bitField3_ & ~0x80000000);
                functionid_ = 0;
                bitField4_ = (bitField4_ & ~0x00000001);
                functionname_ = com.google.protobuf.ByteString.EMPTY;
                bitField4_ = (bitField4_ & ~0x00000002);
                direction_ = 0;
                bitField4_ = (bitField4_ & ~0x00000004);
                nreserved0_ = 0;
                bitField4_ = (bitField4_ & ~0x00000008);
                nreserved1_ = 0;
                bitField4_ = (bitField4_ & ~0x00000010);
                nreserved2_ = 0;
                bitField4_ = (bitField4_ & ~0x00000020);
                nreserved3_ = 0;
                bitField4_ = (bitField4_ & ~0x00000040);
                nreserved4_ = 0;
                bitField4_ = (bitField4_ & ~0x00000080);
                anaPolicyType_ = sp.AuditEnum.ANA_POLICY_TYPE.FILTER_POLICY;
                bitField4_ = (bitField4_ & ~0x00000100);
                anaPolicyName_ = com.google.protobuf.ByteString.EMPTY;
                bitField4_ = (bitField4_ & ~0x00000200);
                bossTreaSceneType_ = 0;
                bitField4_ = (bitField4_ & ~0x00000400);
                bossTreaSceneName_ = com.google.protobuf.ByteString.EMPTY;
                bitField4_ = (bitField4_ & ~0x00000800);
                clientip_ = com.google.protobuf.ByteString.EMPTY;
                bitField4_ = (bitField4_ & ~0x00001000);
                processid_ = 0;
                bitField4_ = (bitField4_ & ~0x00002000);
                procStarttime_ = com.google.protobuf.ByteString.EMPTY;
                bitField4_ = (bitField4_ & ~0x00004000);
                duration_ = 0;
                bitField4_ = (bitField4_ & ~0x00008000);
                protocol_ = 0;
                bitField4_ = (bitField4_ & ~0x00010000);
                servPort_ = 0;
                bitField4_ = (bitField4_ & ~0x00020000);
                flownum_ = 0F;
                bitField4_ = (bitField4_ & ~0x00040000);
                recnum_ = 0;
                bitField4_ = (bitField4_ & ~0x00080000);
                clientinfo_ = com.google.protobuf.ByteString.EMPTY;
                bitField4_ = (bitField4_ & ~0x00100000);
                serverinfo_ = com.google.protobuf.ByteString.EMPTY;
                bitField4_ = (bitField4_ & ~0x00200000);
                logclass_ = 0;
                bitField4_ = (bitField4_ & ~0x00400000);
                gbasport_ = 0;
                bitField4_ = (bitField4_ & ~0x00800000);
                ibaFillmemo_ = com.google.protobuf.ByteString.EMPTY;
                bitField4_ = (bitField4_ & ~0x01000000);
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return sp.AuditLog.internal_static_sp_T_AUDIT_LOG_descriptor;
            }

            public sp.AuditLog.T_AUDIT_LOG getDefaultInstanceForType() {
                return sp.AuditLog.T_AUDIT_LOG.getDefaultInstance();
            }

            public sp.AuditLog.T_AUDIT_LOG build() {
                sp.AuditLog.T_AUDIT_LOG result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public sp.AuditLog.T_AUDIT_LOG buildPartial() {
                sp.AuditLog.T_AUDIT_LOG result = new sp.AuditLog.T_AUDIT_LOG(this);
                int from_bitField0_ = bitField0_;
                int from_bitField1_ = bitField1_;
                int from_bitField2_ = bitField2_;
                int from_bitField3_ = bitField3_;
                int from_bitField4_ = bitField4_;
                int to_bitField0_ = 0;
                int to_bitField1_ = 0;
                int to_bitField2_ = 0;
                int to_bitField3_ = 0;
                int to_bitField4_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.sid_ = sid_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                if (alarmBuilder_ == null) {
                    result.alarm_ = alarm_;
                } else {
                    result.alarm_ = alarmBuilder_.build();
                }
                if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                    to_bitField0_ |= 0x00000004;
                }
                result.mark_ = mark_;
                if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
                    to_bitField0_ |= 0x00000008;
                }
                result.seq_ = seq_;
                if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
                    to_bitField0_ |= 0x00000010;
                }
                result.sessionid_ = sessionid_;
                if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
                    to_bitField0_ |= 0x00000020;
                }
                result.anaPolicyId_ = anaPolicyId_;
                if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
                    to_bitField0_ |= 0x00000040;
                }
                result.logType_ = logType_;
                if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
                    to_bitField0_ |= 0x00000080;
                }
                result.auditLogtypeid_ = auditLogtypeid_;
                if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
                    to_bitField0_ |= 0x00000100;
                }
                result.auditLogtypename_ = auditLogtypename_;
                if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
                    to_bitField0_ |= 0x00000200;
                }
                result.astId_ = astId_;
                if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
                    to_bitField0_ |= 0x00000400;
                }
                result.astIp_ = astIp_;
                if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
                    to_bitField0_ |= 0x00000800;
                }
                result.astName_ = astName_;
                if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
                    to_bitField0_ |= 0x00001000;
                }
                result.astRegionCode_ = astRegionCode_;
                if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
                    to_bitField0_ |= 0x00002000;
                }
                result.astRegionName_ = astRegionName_;
                if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
                    to_bitField0_ |= 0x00004000;
                }
                result.hgid_ = hgid_;
                if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
                    to_bitField0_ |= 0x00008000;
                }
                result.hgname_ = hgname_;
                if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
                    to_bitField0_ |= 0x00010000;
                }
                result.progkey_ = progkey_;
                if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
                    to_bitField0_ |= 0x00020000;
                }
                result.astTypeId_ = astTypeId_;
                if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
                    to_bitField0_ |= 0x00040000;
                }
                result.astTypeCode_ = astTypeCode_;
                if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
                    to_bitField0_ |= 0x00080000;
                }
                result.astTypeName_ = astTypeName_;
                if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
                    to_bitField0_ |= 0x00100000;
                }
                result.astAdmin_ = astAdmin_;
                if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
                    to_bitField0_ |= 0x00200000;
                }
                result.keyAst_ = keyAst_;
                if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
                    to_bitField0_ |= 0x00400000;
                }
                result.engineId_ = engineId_;
                if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
                    to_bitField0_ |= 0x00800000;
                }
                result.engineType_ = engineType_;
                if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
                    to_bitField0_ |= 0x01000000;
                }
                result.engineIp_ = engineIp_;
                if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
                    to_bitField0_ |= 0x02000000;
                }
                result.engineTypeName_ = engineTypeName_;
                if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
                    to_bitField0_ |= 0x04000000;
                }
                result.logSourceIp_ = logSourceIp_;
                if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
                    to_bitField0_ |= 0x08000000;
                }
                result.userid_ = userid_;
                if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
                    to_bitField0_ |= 0x10000000;
                }
                result.logname_ = logname_;
                if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
                    to_bitField0_ |= 0x20000000;
                }
                result.uname_ = uname_;
                if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
                    to_bitField0_ |= 0x40000000;
                }
                result.ouid_ = ouid_;
                if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
                    to_bitField0_ |= 0x80000000;
                }
                result.ouname_ = ouname_;
                if (((from_bitField1_ & 0x00000001) == 0x00000001)) {
                    to_bitField1_ |= 0x00000001;
                }
                result.lognameTypeId_ = lognameTypeId_;
                if (((from_bitField1_ & 0x00000002) == 0x00000002)) {
                    to_bitField1_ |= 0x00000002;
                }
                result.lognameType_ = lognameType_;
                if (((from_bitField1_ & 0x00000004) == 0x00000004)) {
                    to_bitField1_ |= 0x00000004;
                }
                result.lognameRegionCode_ = lognameRegionCode_;
                if (((from_bitField1_ & 0x00000008) == 0x00000008)) {
                    to_bitField1_ |= 0x00000008;
                }
                result.lognameRegion_ = lognameRegion_;
                if (((from_bitField1_ & 0x00000010) == 0x00000010)) {
                    to_bitField1_ |= 0x00000010;
                }
                result.lognameStatus_ = lognameStatus_;
                if (((from_bitField1_ & 0x00000020) == 0x00000020)) {
                    to_bitField1_ |= 0x00000020;
                }
                result.treasuryLogType_ = treasuryLogType_;
                if (((from_bitField1_ & 0x00000040) == 0x00000040)) {
                    to_bitField1_ |= 0x00000040;
                }
                result.coUserid_ = coUserid_;
                if (((from_bitField1_ & 0x00000080) == 0x00000080)) {
                    to_bitField1_ |= 0x00000080;
                }
                result.coUserLogname_ = coUserLogname_;
                if (((from_bitField1_ & 0x00000100) == 0x00000100)) {
                    to_bitField1_ |= 0x00000100;
                }
                result.coUserName_ = coUserName_;
                if (((from_bitField1_ & 0x00000200) == 0x00000200)) {
                    to_bitField1_ |= 0x00000200;
                }
                result.coUserOrgId_ = coUserOrgId_;
                if (((from_bitField1_ & 0x00000400) == 0x00000400)) {
                    to_bitField1_ |= 0x00000400;
                }
                result.coUserOrgName_ = coUserOrgName_;
                if (((from_bitField1_ & 0x00000800) == 0x00000800)) {
                    to_bitField1_ |= 0x00000800;
                }
                result.coUserMobile_ = coUserMobile_;
                if (((from_bitField1_ & 0x00001000) == 0x00001000)) {
                    to_bitField1_ |= 0x00001000;
                }
                result.treasurySceneType_ = treasurySceneType_;
                if (((from_bitField1_ & 0x00002000) == 0x00002000)) {
                    to_bitField1_ |= 0x00002000;
                }
                result.treasurySceneId_ = treasurySceneId_;
                if (((from_bitField1_ & 0x00004000) == 0x00004000)) {
                    to_bitField1_ |= 0x00004000;
                }
                result.treasurySceneName_ = treasurySceneName_;
                if (((from_bitField1_ & 0x00008000) == 0x00008000)) {
                    to_bitField1_ |= 0x00008000;
                }
                result.treasuryAuthType_ = treasuryAuthType_;
                if (((from_bitField1_ & 0x00010000) == 0x00010000)) {
                    to_bitField1_ |= 0x00010000;
                }
                result.accessType_ = accessType_;
                if (((from_bitField1_ & 0x00020000) == 0x00020000)) {
                    to_bitField1_ |= 0x00020000;
                }
                result.applyTimeSlot_ = applyTimeSlot_;
                if (((from_bitField1_ & 0x00040000) == 0x00040000)) {
                    to_bitField1_ |= 0x00040000;
                }
                result.treasuryStatus_ = treasuryStatus_;
                if (((from_bitField1_ & 0x00080000) == 0x00080000)) {
                    to_bitField1_ |= 0x00080000;
                }
                result.specialServiceNum_ = specialServiceNum_;
                if (((from_bitField1_ & 0x00100000) == 0x00100000)) {
                    to_bitField1_ |= 0x00100000;
                }
                result.authResult_ = authResult_;
                if (((from_bitField1_ & 0x00200000) == 0x00200000)) {
                    to_bitField1_ |= 0x00200000;
                }
                result.smsContent_ = smsContent_;
                if (((from_bitField1_ & 0x00400000) == 0x00400000)) {
                    to_bitField1_ |= 0x00400000;
                }
                result.accountId_ = accountId_;
                if (((from_bitField1_ & 0x00800000) == 0x00800000)) {
                    to_bitField1_ |= 0x00800000;
                }
                result.account_ = account_;
                if (((from_bitField1_ & 0x01000000) == 0x01000000)) {
                    to_bitField1_ |= 0x01000000;
                }
                result.appOuname_ = appOuname_;
                if (((from_bitField1_ & 0x02000000) == 0x02000000)) {
                    to_bitField1_ |= 0x02000000;
                }
                result.accountTypeId_ = accountTypeId_;
                if (((from_bitField1_ & 0x04000000) == 0x04000000)) {
                    to_bitField1_ |= 0x04000000;
                }
                result.accountTypeName_ = accountTypeName_;
                if (((from_bitField1_ & 0x08000000) == 0x08000000)) {
                    to_bitField1_ |= 0x08000000;
                }
                result.accountRegionCode_ = accountRegionCode_;
                if (((from_bitField1_ & 0x10000000) == 0x10000000)) {
                    to_bitField1_ |= 0x10000000;
                }
                result.accountRegion_ = accountRegion_;
                if (((from_bitField1_ & 0x20000000) == 0x20000000)) {
                    to_bitField1_ |= 0x20000000;
                }
                result.accountStatus_ = accountStatus_;
                if (((from_bitField1_ & 0x40000000) == 0x40000000)) {
                    to_bitField1_ |= 0x40000000;
                }
                result.logtimeSec_ = logtimeSec_;
                if (((from_bitField1_ & 0x80000000) == 0x80000000)) {
                    to_bitField1_ |= 0x80000000;
                }
                result.logtimeMsec_ = logtimeMsec_;
                if (((from_bitField2_ & 0x00000001) == 0x00000001)) {
                    to_bitField2_ |= 0x00000001;
                }
                result.endtime_ = endtime_;
                if (((from_bitField2_ & 0x00000002) == 0x00000002)) {
                    to_bitField2_ |= 0x00000002;
                }
                result.gatherSec_ = gatherSec_;
                if (((from_bitField2_ & 0x00000004) == 0x00000004)) {
                    to_bitField2_ |= 0x00000004;
                }
                result.gatherMsec_ = gatherMsec_;
                if (((from_bitField2_ & 0x00000008) == 0x00000008)) {
                    to_bitField2_ |= 0x00000008;
                }
                result.sip_ = sip_;
                if (((from_bitField2_ & 0x00000010) == 0x00000010)) {
                    to_bitField2_ |= 0x00000010;
                }
                result.smac_ = smac_;
                if (((from_bitField2_ & 0x00000020) == 0x00000020)) {
                    to_bitField2_ |= 0x00000020;
                }
                result.sport_ = sport_;
                if (((from_bitField2_ & 0x00000040) == 0x00000040)) {
                    to_bitField2_ |= 0x00000040;
                }
                result.dip_ = dip_;
                if (((from_bitField2_ & 0x00000080) == 0x00000080)) {
                    to_bitField2_ |= 0x00000080;
                }
                result.dmac_ = dmac_;
                if (((from_bitField2_ & 0x00000100) == 0x00000100)) {
                    to_bitField2_ |= 0x00000100;
                }
                result.dport_ = dport_;
                if (((from_bitField2_ & 0x00000200) == 0x00000200)) {
                    to_bitField2_ |= 0x00000200;
                }
                result.eventid_ = eventid_;
                if (((from_bitField2_ & 0x00000400) == 0x00000400)) {
                    to_bitField2_ |= 0x00000400;
                }
                result.riskLevel_ = riskLevel_;
                if (((from_bitField2_ & 0x00000800) == 0x00000800)) {
                    to_bitField2_ |= 0x00000800;
                }
                result.operate_ = operate_;
                if (((from_bitField2_ & 0x00001000) == 0x00001000)) {
                    to_bitField2_ |= 0x00001000;
                }
                result.objId_ = objId_;
                if (((from_bitField2_ & 0x00002000) == 0x00002000)) {
                    to_bitField2_ |= 0x00002000;
                }
                result.obj_ = obj_;
                if (((from_bitField2_ & 0x00004000) == 0x00004000)) {
                    to_bitField2_ |= 0x00004000;
                }
                result.objParentId_ = objParentId_;
                if (((from_bitField2_ & 0x00008000) == 0x00008000)) {
                    to_bitField2_ |= 0x00008000;
                }
                result.objParentName_ = objParentName_;
                if (((from_bitField2_ & 0x00010000) == 0x00010000)) {
                    to_bitField2_ |= 0x00010000;
                }
                result.objectstationCode_ = objectstationCode_;
                if (((from_bitField2_ & 0x00020000) == 0x00020000)) {
                    to_bitField2_ |= 0x00020000;
                }
                result.objectstationName_ = objectstationName_;
                if (((from_bitField2_ & 0x00040000) == 0x00040000)) {
                    to_bitField2_ |= 0x00040000;
                }
                result.result_ = result_;
                if (((from_bitField2_ & 0x00080000) == 0x00080000)) {
                    to_bitField2_ |= 0x00080000;
                }
                result.retcode_ = retcode_;
                if (((from_bitField2_ & 0x00100000) == 0x00100000)) {
                    to_bitField2_ |= 0x00100000;
                }
                result.processname_ = processname_;
                if (((from_bitField2_ & 0x00200000) == 0x00200000)) {
                    to_bitField2_ |= 0x00200000;
                }
                result.workinfo_ = workinfo_;
                if (((from_bitField2_ & 0x00400000) == 0x00400000)) {
                    to_bitField2_ |= 0x00400000;
                }
                result.logreason_ = logreason_;
                if (((from_bitField2_ & 0x00800000) == 0x00800000)) {
                    to_bitField2_ |= 0x00800000;
                }
                result.vdata_ = vdata_;
                if (((from_bitField2_ & 0x01000000) == 0x01000000)) {
                    to_bitField2_ |= 0x01000000;
                }
                result.facility_ = facility_;
                if (((from_bitField2_ & 0x02000000) == 0x02000000)) {
                    to_bitField2_ |= 0x02000000;
                }
                result.severity_ = severity_;
                if (((from_bitField2_ & 0x04000000) == 0x04000000)) {
                    to_bitField2_ |= 0x04000000;
                }
                result.memo_ = memo_;
                if (((from_bitField2_ & 0x08000000) == 0x08000000)) {
                    to_bitField2_ |= 0x08000000;
                }
                result.hbasession_ = hbasession_;
                if (((from_bitField2_ & 0x10000000) == 0x10000000)) {
                    to_bitField2_ |= 0x10000000;
                }
                result.opTypeId_ = opTypeId_;
                if (((from_bitField2_ & 0x20000000) == 0x20000000)) {
                    to_bitField2_ |= 0x20000000;
                }
                result.opType_ = opType_;
                if (((from_bitField2_ & 0x40000000) == 0x40000000)) {
                    to_bitField2_ |= 0x40000000;
                }
                result.opClassId_ = opClassId_;
                if (((from_bitField2_ & 0x80000000) == 0x80000000)) {
                    to_bitField2_ |= 0x80000000;
                }
                result.opClass_ = opClass_;
                if (((from_bitField3_ & 0x00000001) == 0x00000001)) {
                    to_bitField3_ |= 0x00000001;
                }
                result.opItemId_ = opItemId_;
                if (((from_bitField3_ & 0x00000002) == 0x00000002)) {
                    to_bitField3_ |= 0x00000002;
                }
                result.opItem_ = opItem_;
                if (((from_bitField3_ & 0x00000004) == 0x00000004)) {
                    to_bitField3_ |= 0x00000004;
                }
                result.opCode_ = opCode_;
                if (((from_bitField3_ & 0x00000008) == 0x00000008)) {
                    to_bitField3_ |= 0x00000008;
                }
                result.opKeyId_ = opKeyId_;
                if (((from_bitField3_ & 0x00000010) == 0x00000010)) {
                    to_bitField3_ |= 0x00000010;
                }
                result.opKey_ = opKey_;
                if (((from_bitField3_ & 0x00000020) == 0x00000020)) {
                    to_bitField3_ |= 0x00000020;
                }
                result.operatetypeid_ = operatetypeid_;
                if (((from_bitField3_ & 0x00000040) == 0x00000040)) {
                    to_bitField3_ |= 0x00000040;
                }
                result.operatetypename_ = operatetypename_;
                if (((from_bitField3_ & 0x00000080) == 0x00000080)) {
                    to_bitField3_ |= 0x00000080;
                }
                result.authtype_ = authtype_;
                if (((from_bitField3_ & 0x00000100) == 0x00000100)) {
                    to_bitField3_ |= 0x00000100;
                }
                result.logid_ = logid_;
                if (((from_bitField3_ & 0x00000200) == 0x00000200)) {
                    to_bitField3_ |= 0x00000200;
                }
                result.orgname_ = orgname_;
                if (((from_bitField3_ & 0x00000400) == 0x00000400)) {
                    to_bitField3_ |= 0x00000400;
                }
                result.recdefid_ = recdefid_;
                if (((from_bitField3_ & 0x00000800) == 0x00000800)) {
                    to_bitField3_ |= 0x00000800;
                }
                result.recdedate_ = recdedate_;
                if (((from_bitField3_ & 0x00001000) == 0x00001000)) {
                    to_bitField3_ |= 0x00001000;
                }
                result.formnum_ = formnum_;
                if (((from_bitField3_ & 0x00002000) == 0x00002000)) {
                    to_bitField3_ |= 0x00002000;
                }
                result.jobcount_ = jobcount_;
                if (((from_bitField3_ & 0x00004000) == 0x00004000)) {
                    to_bitField3_ |= 0x00004000;
                }
                result.okcount_ = okcount_;
                if (((from_bitField3_ & 0x00008000) == 0x00008000)) {
                    to_bitField3_ |= 0x00008000;
                }
                result.failcount_ = failcount_;
                if (((from_bitField3_ & 0x00010000) == 0x00010000)) {
                    to_bitField3_ |= 0x00010000;
                }
                result.servnumber_ = servnumber_;
                if (((from_bitField3_ & 0x00020000) == 0x00020000)) {
                    to_bitField3_ |= 0x00020000;
                }
                result.recname_ = recname_;
                if (((from_bitField3_ & 0x00040000) == 0x00040000)) {
                    to_bitField3_ |= 0x00040000;
                }
                result.status_ = status_;
                if (((from_bitField3_ & 0x00080000) == 0x00080000)) {
                    to_bitField3_ |= 0x00080000;
                }
                result.filluuid_ = filluuid_;
                if (((from_bitField3_ & 0x00100000) == 0x00100000)) {
                    to_bitField3_ |= 0x00100000;
                }
                result.reserved0_ = reserved0_;
                if (((from_bitField3_ & 0x00200000) == 0x00200000)) {
                    to_bitField3_ |= 0x00200000;
                }
                result.reserved1_ = reserved1_;
                if (((from_bitField3_ & 0x00400000) == 0x00400000)) {
                    to_bitField3_ |= 0x00400000;
                }
                result.reserved2_ = reserved2_;
                if (((from_bitField3_ & 0x00800000) == 0x00800000)) {
                    to_bitField3_ |= 0x00800000;
                }
                result.reserved3_ = reserved3_;
                if (((from_bitField3_ & 0x01000000) == 0x01000000)) {
                    to_bitField3_ |= 0x01000000;
                }
                result.reserved4_ = reserved4_;
                if (((from_bitField3_ & 0x02000000) == 0x02000000)) {
                    to_bitField3_ |= 0x02000000;
                }
                result.reserved5_ = reserved5_;
                if (((from_bitField3_ & 0x04000000) == 0x04000000)) {
                    to_bitField3_ |= 0x04000000;
                }
                result.reserved6_ = reserved6_;
                if (((from_bitField3_ & 0x08000000) == 0x08000000)) {
                    to_bitField3_ |= 0x08000000;
                }
                result.reserved7_ = reserved7_;
                if (((from_bitField3_ & 0x10000000) == 0x10000000)) {
                    to_bitField3_ |= 0x10000000;
                }
                result.reserved8_ = reserved8_;
                if (((from_bitField3_ & 0x20000000) == 0x20000000)) {
                    to_bitField3_ |= 0x20000000;
                }
                result.reserved9_ = reserved9_;
                if (((from_bitField3_ & 0x40000000) == 0x40000000)) {
                    to_bitField3_ |= 0x40000000;
                }
                result.resKey_ = resKey_;
                if (((from_bitField3_ & 0x80000000) == 0x80000000)) {
                    to_bitField3_ |= 0x80000000;
                }
                result.logtable_ = logtable_;
                if (((from_bitField4_ & 0x00000001) == 0x00000001)) {
                    to_bitField4_ |= 0x00000001;
                }
                result.functionid_ = functionid_;
                if (((from_bitField4_ & 0x00000002) == 0x00000002)) {
                    to_bitField4_ |= 0x00000002;
                }
                result.functionname_ = functionname_;
                if (((from_bitField4_ & 0x00000004) == 0x00000004)) {
                    to_bitField4_ |= 0x00000004;
                }
                result.direction_ = direction_;
                if (((from_bitField4_ & 0x00000008) == 0x00000008)) {
                    to_bitField4_ |= 0x00000008;
                }
                result.nreserved0_ = nreserved0_;
                if (((from_bitField4_ & 0x00000010) == 0x00000010)) {
                    to_bitField4_ |= 0x00000010;
                }
                result.nreserved1_ = nreserved1_;
                if (((from_bitField4_ & 0x00000020) == 0x00000020)) {
                    to_bitField4_ |= 0x00000020;
                }
                result.nreserved2_ = nreserved2_;
                if (((from_bitField4_ & 0x00000040) == 0x00000040)) {
                    to_bitField4_ |= 0x00000040;
                }
                result.nreserved3_ = nreserved3_;
                if (((from_bitField4_ & 0x00000080) == 0x00000080)) {
                    to_bitField4_ |= 0x00000080;
                }
                result.nreserved4_ = nreserved4_;
                if (((from_bitField4_ & 0x00000100) == 0x00000100)) {
                    to_bitField4_ |= 0x00000100;
                }
                result.anaPolicyType_ = anaPolicyType_;
                if (((from_bitField4_ & 0x00000200) == 0x00000200)) {
                    to_bitField4_ |= 0x00000200;
                }
                result.anaPolicyName_ = anaPolicyName_;
                if (((from_bitField4_ & 0x00000400) == 0x00000400)) {
                    to_bitField4_ |= 0x00000400;
                }
                result.bossTreaSceneType_ = bossTreaSceneType_;
                if (((from_bitField4_ & 0x00000800) == 0x00000800)) {
                    to_bitField4_ |= 0x00000800;
                }
                result.bossTreaSceneName_ = bossTreaSceneName_;
                if (((from_bitField4_ & 0x00001000) == 0x00001000)) {
                    to_bitField4_ |= 0x00001000;
                }
                result.clientip_ = clientip_;
                if (((from_bitField4_ & 0x00002000) == 0x00002000)) {
                    to_bitField4_ |= 0x00002000;
                }
                result.processid_ = processid_;
                if (((from_bitField4_ & 0x00004000) == 0x00004000)) {
                    to_bitField4_ |= 0x00004000;
                }
                result.procStarttime_ = procStarttime_;
                if (((from_bitField4_ & 0x00008000) == 0x00008000)) {
                    to_bitField4_ |= 0x00008000;
                }
                result.duration_ = duration_;
                if (((from_bitField4_ & 0x00010000) == 0x00010000)) {
                    to_bitField4_ |= 0x00010000;
                }
                result.protocol_ = protocol_;
                if (((from_bitField4_ & 0x00020000) == 0x00020000)) {
                    to_bitField4_ |= 0x00020000;
                }
                result.servPort_ = servPort_;
                if (((from_bitField4_ & 0x00040000) == 0x00040000)) {
                    to_bitField4_ |= 0x00040000;
                }
                result.flownum_ = flownum_;
                if (((from_bitField4_ & 0x00080000) == 0x00080000)) {
                    to_bitField4_ |= 0x00080000;
                }
                result.recnum_ = recnum_;
                if (((from_bitField4_ & 0x00100000) == 0x00100000)) {
                    to_bitField4_ |= 0x00100000;
                }
                result.clientinfo_ = clientinfo_;
                if (((from_bitField4_ & 0x00200000) == 0x00200000)) {
                    to_bitField4_ |= 0x00200000;
                }
                result.serverinfo_ = serverinfo_;
                if (((from_bitField4_ & 0x00400000) == 0x00400000)) {
                    to_bitField4_ |= 0x00400000;
                }
                result.logclass_ = logclass_;
                if (((from_bitField4_ & 0x00800000) == 0x00800000)) {
                    to_bitField4_ |= 0x00800000;
                }
                result.gbasport_ = gbasport_;
                if (((from_bitField4_ & 0x01000000) == 0x01000000)) {
                    to_bitField4_ |= 0x01000000;
                }
                result.ibaFillmemo_ = ibaFillmemo_;
                result.bitField0_ = to_bitField0_;
                result.bitField1_ = to_bitField1_;
                result.bitField2_ = to_bitField2_;
                result.bitField3_ = to_bitField3_;
                result.bitField4_ = to_bitField4_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof sp.AuditLog.T_AUDIT_LOG) {
                    return mergeFrom((sp.AuditLog.T_AUDIT_LOG) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(sp.AuditLog.T_AUDIT_LOG other) {
                if (other == sp.AuditLog.T_AUDIT_LOG.getDefaultInstance()) return this;
                if (other.hasSid()) {
                    setSid(other.getSid());
                }
                if (other.hasAlarm()) {
                    mergeAlarm(other.getAlarm());
                }
                if (other.hasMark()) {
                    setMark(other.getMark());
                }
                if (other.hasSeq()) {
                    setSeq(other.getSeq());
                }
                if (other.hasSessionid()) {
                    setSessionid(other.getSessionid());
                }
                if (other.hasAnaPolicyId()) {
                    setAnaPolicyId(other.getAnaPolicyId());
                }
                if (other.hasLogType()) {
                    setLogType(other.getLogType());
                }
                if (other.hasAuditLogtypeid()) {
                    setAuditLogtypeid(other.getAuditLogtypeid());
                }
                if (other.hasAuditLogtypename()) {
                    setAuditLogtypename(other.getAuditLogtypename());
                }
                if (other.hasAstId()) {
                    setAstId(other.getAstId());
                }
                if (other.hasAstIp()) {
                    setAstIp(other.getAstIp());
                }
                if (other.hasAstName()) {
                    setAstName(other.getAstName());
                }
                if (other.hasAstRegionCode()) {
                    setAstRegionCode(other.getAstRegionCode());
                }
                if (other.hasAstRegionName()) {
                    setAstRegionName(other.getAstRegionName());
                }
                if (other.hasHgid()) {
                    setHgid(other.getHgid());
                }
                if (other.hasHgname()) {
                    setHgname(other.getHgname());
                }
                if (other.hasProgkey()) {
                    setProgkey(other.getProgkey());
                }
                if (other.hasAstTypeId()) {
                    setAstTypeId(other.getAstTypeId());
                }
                if (other.hasAstTypeCode()) {
                    setAstTypeCode(other.getAstTypeCode());
                }
                if (other.hasAstTypeName()) {
                    setAstTypeName(other.getAstTypeName());
                }
                if (other.hasAstAdmin()) {
                    setAstAdmin(other.getAstAdmin());
                }
                if (other.hasKeyAst()) {
                    setKeyAst(other.getKeyAst());
                }
                if (other.hasEngineId()) {
                    setEngineId(other.getEngineId());
                }
                if (other.hasEngineType()) {
                    setEngineType(other.getEngineType());
                }
                if (other.hasEngineIp()) {
                    setEngineIp(other.getEngineIp());
                }
                if (other.hasEngineTypeName()) {
                    setEngineTypeName(other.getEngineTypeName());
                }
                if (other.hasLogSourceIp()) {
                    setLogSourceIp(other.getLogSourceIp());
                }
                if (other.hasUserid()) {
                    setUserid(other.getUserid());
                }
                if (other.hasLogname()) {
                    setLogname(other.getLogname());
                }
                if (other.hasUname()) {
                    setUname(other.getUname());
                }
                if (other.hasOuid()) {
                    setOuid(other.getOuid());
                }
                if (other.hasOuname()) {
                    setOuname(other.getOuname());
                }
                if (other.hasLognameTypeId()) {
                    setLognameTypeId(other.getLognameTypeId());
                }
                if (other.hasLognameType()) {
                    setLognameType(other.getLognameType());
                }
                if (other.hasLognameRegionCode()) {
                    setLognameRegionCode(other.getLognameRegionCode());
                }
                if (other.hasLognameRegion()) {
                    setLognameRegion(other.getLognameRegion());
                }
                if (other.hasLognameStatus()) {
                    setLognameStatus(other.getLognameStatus());
                }
                if (other.hasTreasuryLogType()) {
                    setTreasuryLogType(other.getTreasuryLogType());
                }
                if (other.hasCoUserid()) {
                    setCoUserid(other.getCoUserid());
                }
                if (other.hasCoUserLogname()) {
                    setCoUserLogname(other.getCoUserLogname());
                }
                if (other.hasCoUserName()) {
                    setCoUserName(other.getCoUserName());
                }
                if (other.hasCoUserOrgId()) {
                    setCoUserOrgId(other.getCoUserOrgId());
                }
                if (other.hasCoUserOrgName()) {
                    setCoUserOrgName(other.getCoUserOrgName());
                }
                if (other.hasCoUserMobile()) {
                    setCoUserMobile(other.getCoUserMobile());
                }
                if (other.hasTreasurySceneType()) {
                    setTreasurySceneType(other.getTreasurySceneType());
                }
                if (other.hasTreasurySceneId()) {
                    setTreasurySceneId(other.getTreasurySceneId());
                }
                if (other.hasTreasurySceneName()) {
                    setTreasurySceneName(other.getTreasurySceneName());
                }
                if (other.hasTreasuryAuthType()) {
                    setTreasuryAuthType(other.getTreasuryAuthType());
                }
                if (other.hasAccessType()) {
                    setAccessType(other.getAccessType());
                }
                if (other.hasApplyTimeSlot()) {
                    setApplyTimeSlot(other.getApplyTimeSlot());
                }
                if (other.hasTreasuryStatus()) {
                    setTreasuryStatus(other.getTreasuryStatus());
                }
                if (other.hasSpecialServiceNum()) {
                    setSpecialServiceNum(other.getSpecialServiceNum());
                }
                if (other.hasAuthResult()) {
                    setAuthResult(other.getAuthResult());
                }
                if (other.hasSmsContent()) {
                    setSmsContent(other.getSmsContent());
                }
                if (other.hasAccountId()) {
                    setAccountId(other.getAccountId());
                }
                if (other.hasAccount()) {
                    setAccount(other.getAccount());
                }
                if (other.hasAppOuname()) {
                    setAppOuname(other.getAppOuname());
                }
                if (other.hasAccountTypeId()) {
                    setAccountTypeId(other.getAccountTypeId());
                }
                if (other.hasAccountTypeName()) {
                    setAccountTypeName(other.getAccountTypeName());
                }
                if (other.hasAccountRegionCode()) {
                    setAccountRegionCode(other.getAccountRegionCode());
                }
                if (other.hasAccountRegion()) {
                    setAccountRegion(other.getAccountRegion());
                }
                if (other.hasAccountStatus()) {
                    setAccountStatus(other.getAccountStatus());
                }
                if (other.hasLogtimeSec()) {
                    setLogtimeSec(other.getLogtimeSec());
                }
                if (other.hasLogtimeMsec()) {
                    setLogtimeMsec(other.getLogtimeMsec());
                }
                if (other.hasEndtime()) {
                    setEndtime(other.getEndtime());
                }
                if (other.hasGatherSec()) {
                    setGatherSec(other.getGatherSec());
                }
                if (other.hasGatherMsec()) {
                    setGatherMsec(other.getGatherMsec());
                }
                if (other.hasSip()) {
                    setSip(other.getSip());
                }
                if (other.hasSmac()) {
                    setSmac(other.getSmac());
                }
                if (other.hasSport()) {
                    setSport(other.getSport());
                }
                if (other.hasDip()) {
                    setDip(other.getDip());
                }
                if (other.hasDmac()) {
                    setDmac(other.getDmac());
                }
                if (other.hasDport()) {
                    setDport(other.getDport());
                }
                if (other.hasEventid()) {
                    setEventid(other.getEventid());
                }
                if (other.hasRiskLevel()) {
                    setRiskLevel(other.getRiskLevel());
                }
                if (other.hasOperate()) {
                    setOperate(other.getOperate());
                }
                if (other.hasObjId()) {
                    setObjId(other.getObjId());
                }
                if (other.hasObj()) {
                    setObj(other.getObj());
                }
                if (other.hasObjParentId()) {
                    setObjParentId(other.getObjParentId());
                }
                if (other.hasObjParentName()) {
                    setObjParentName(other.getObjParentName());
                }
                if (other.hasObjectstationCode()) {
                    setObjectstationCode(other.getObjectstationCode());
                }
                if (other.hasObjectstationName()) {
                    setObjectstationName(other.getObjectstationName());
                }
                if (other.hasResult()) {
                    setResult(other.getResult());
                }
                if (other.hasRetcode()) {
                    setRetcode(other.getRetcode());
                }
                if (other.hasProcessname()) {
                    setProcessname(other.getProcessname());
                }
                if (other.hasWorkinfo()) {
                    setWorkinfo(other.getWorkinfo());
                }
                if (other.hasLogreason()) {
                    setLogreason(other.getLogreason());
                }
                if (other.hasVdata()) {
                    setVdata(other.getVdata());
                }
                if (other.hasFacility()) {
                    setFacility(other.getFacility());
                }
                if (other.hasSeverity()) {
                    setSeverity(other.getSeverity());
                }
                if (other.hasMemo()) {
                    setMemo(other.getMemo());
                }
                if (other.hasHbasession()) {
                    setHbasession(other.getHbasession());
                }
                if (other.hasOpTypeId()) {
                    setOpTypeId(other.getOpTypeId());
                }
                if (other.hasOpType()) {
                    setOpType(other.getOpType());
                }
                if (other.hasOpClassId()) {
                    setOpClassId(other.getOpClassId());
                }
                if (other.hasOpClass()) {
                    setOpClass(other.getOpClass());
                }
                if (other.hasOpItemId()) {
                    setOpItemId(other.getOpItemId());
                }
                if (other.hasOpItem()) {
                    setOpItem(other.getOpItem());
                }
                if (other.hasOpCode()) {
                    setOpCode(other.getOpCode());
                }
                if (other.hasOpKeyId()) {
                    setOpKeyId(other.getOpKeyId());
                }
                if (other.hasOpKey()) {
                    setOpKey(other.getOpKey());
                }
                if (other.hasOperatetypeid()) {
                    setOperatetypeid(other.getOperatetypeid());
                }
                if (other.hasOperatetypename()) {
                    setOperatetypename(other.getOperatetypename());
                }
                if (other.hasAuthtype()) {
                    setAuthtype(other.getAuthtype());
                }
                if (other.hasLogid()) {
                    setLogid(other.getLogid());
                }
                if (other.hasOrgname()) {
                    setOrgname(other.getOrgname());
                }
                if (other.hasRecdefid()) {
                    setRecdefid(other.getRecdefid());
                }
                if (other.hasRecdedate()) {
                    setRecdedate(other.getRecdedate());
                }
                if (other.hasFormnum()) {
                    setFormnum(other.getFormnum());
                }
                if (other.hasJobcount()) {
                    setJobcount(other.getJobcount());
                }
                if (other.hasOkcount()) {
                    setOkcount(other.getOkcount());
                }
                if (other.hasFailcount()) {
                    setFailcount(other.getFailcount());
                }
                if (other.hasServnumber()) {
                    setServnumber(other.getServnumber());
                }
                if (other.hasRecname()) {
                    setRecname(other.getRecname());
                }
                if (other.hasStatus()) {
                    setStatus(other.getStatus());
                }
                if (other.hasFilluuid()) {
                    setFilluuid(other.getFilluuid());
                }
                if (other.hasReserved0()) {
                    setReserved0(other.getReserved0());
                }
                if (other.hasReserved1()) {
                    setReserved1(other.getReserved1());
                }
                if (other.hasReserved2()) {
                    setReserved2(other.getReserved2());
                }
                if (other.hasReserved3()) {
                    setReserved3(other.getReserved3());
                }
                if (other.hasReserved4()) {
                    setReserved4(other.getReserved4());
                }
                if (other.hasReserved5()) {
                    setReserved5(other.getReserved5());
                }
                if (other.hasReserved6()) {
                    setReserved6(other.getReserved6());
                }
                if (other.hasReserved7()) {
                    setReserved7(other.getReserved7());
                }
                if (other.hasReserved8()) {
                    setReserved8(other.getReserved8());
                }
                if (other.hasReserved9()) {
                    setReserved9(other.getReserved9());
                }
                if (other.hasResKey()) {
                    setResKey(other.getResKey());
                }
                if (other.hasLogtable()) {
                    setLogtable(other.getLogtable());
                }
                if (other.hasFunctionid()) {
                    setFunctionid(other.getFunctionid());
                }
                if (other.hasFunctionname()) {
                    setFunctionname(other.getFunctionname());
                }
                if (other.hasDirection()) {
                    setDirection(other.getDirection());
                }
                if (other.hasNreserved0()) {
                    setNreserved0(other.getNreserved0());
                }
                if (other.hasNreserved1()) {
                    setNreserved1(other.getNreserved1());
                }
                if (other.hasNreserved2()) {
                    setNreserved2(other.getNreserved2());
                }
                if (other.hasNreserved3()) {
                    setNreserved3(other.getNreserved3());
                }
                if (other.hasNreserved4()) {
                    setNreserved4(other.getNreserved4());
                }
                if (other.hasAnaPolicyType()) {
                    setAnaPolicyType(other.getAnaPolicyType());
                }
                if (other.hasAnaPolicyName()) {
                    setAnaPolicyName(other.getAnaPolicyName());
                }
                if (other.hasBossTreaSceneType()) {
                    setBossTreaSceneType(other.getBossTreaSceneType());
                }
                if (other.hasBossTreaSceneName()) {
                    setBossTreaSceneName(other.getBossTreaSceneName());
                }
                if (other.hasClientip()) {
                    setClientip(other.getClientip());
                }
                if (other.hasProcessid()) {
                    setProcessid(other.getProcessid());
                }
                if (other.hasProcStarttime()) {
                    setProcStarttime(other.getProcStarttime());
                }
                if (other.hasDuration()) {
                    setDuration(other.getDuration());
                }
                if (other.hasProtocol()) {
                    setProtocol(other.getProtocol());
                }
                if (other.hasServPort()) {
                    setServPort(other.getServPort());
                }
                if (other.hasFlownum()) {
                    setFlownum(other.getFlownum());
                }
                if (other.hasRecnum()) {
                    setRecnum(other.getRecnum());
                }
                if (other.hasClientinfo()) {
                    setClientinfo(other.getClientinfo());
                }
                if (other.hasServerinfo()) {
                    setServerinfo(other.getServerinfo());
                }
                if (other.hasLogclass()) {
                    setLogclass(other.getLogclass());
                }
                if (other.hasGbasport()) {
                    setGbasport(other.getGbasport());
                }
                if (other.hasIbaFillmemo()) {
                    setIbaFillmemo(other.getIbaFillmemo());
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasSid()) {

                    return false;
                }
                if (!hasLogType()) {

                    return false;
                }
                if (!hasLogtimeSec()) {

                    return false;
                }
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                sp.AuditLog.T_AUDIT_LOG parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (sp.AuditLog.T_AUDIT_LOG) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;
            private int bitField1_;
            private int bitField2_;
            private int bitField3_;
            private int bitField4_;

            // required bytes sid = 1;
            private com.google.protobuf.ByteString sid_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>required bytes sid = 1;</code>
             * <p>
             * <pre>
             * 每条日志的UUID，主键，由引擎或4A产生
             * </pre>
             */
            public boolean hasSid() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>required bytes sid = 1;</code>
             * <p>
             * <pre>
             * 每条日志的UUID，主键，由引擎或4A产生
             * </pre>
             */
            public com.google.protobuf.ByteString getSid() {
                return sid_;
            }

            /**
             * <code>required bytes sid = 1;</code>
             * <p>
             * <pre>
             * 每条日志的UUID，主键，由引擎或4A产生
             * </pre>
             */
            public Builder setSid(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000001;
                sid_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required bytes sid = 1;</code>
             * <p>
             * <pre>
             * 每条日志的UUID，主键，由引擎或4A产生
             * </pre>
             */
            public Builder clearSid() {
                bitField0_ = (bitField0_ & ~0x00000001);
                sid_ = getDefaultInstance().getSid();
                onChanged();
                return this;
            }

            // optional .sp.T_ALARM_LOG alarm = 2;
            private sp.AuditLog.T_ALARM_LOG alarm_ = sp.AuditLog.T_ALARM_LOG.getDefaultInstance();
            private com.google.protobuf.SingleFieldBuilder<
                    sp.AuditLog.T_ALARM_LOG, sp.AuditLog.T_ALARM_LOG.Builder, sp.AuditLog.T_ALARM_LOGOrBuilder>
                    alarmBuilder_;

            /**
             * <code>optional .sp.T_ALARM_LOG alarm = 2;</code>
             * <p>
             * <pre>
             * 告警信息，ABA告警时补全
             * </pre>
             */
            public boolean hasAlarm() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>optional .sp.T_ALARM_LOG alarm = 2;</code>
             * <p>
             * <pre>
             * 告警信息，ABA告警时补全
             * </pre>
             */
            public sp.AuditLog.T_ALARM_LOG getAlarm() {
                if (alarmBuilder_ == null) {
                    return alarm_;
                } else {
                    return alarmBuilder_.getMessage();
                }
            }

            /**
             * <code>optional .sp.T_ALARM_LOG alarm = 2;</code>
             * <p>
             * <pre>
             * 告警信息，ABA告警时补全
             * </pre>
             */
            public Builder setAlarm(sp.AuditLog.T_ALARM_LOG value) {
                if (alarmBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    alarm_ = value;
                    onChanged();
                } else {
                    alarmBuilder_.setMessage(value);
                }
                bitField0_ |= 0x00000002;
                return this;
            }

            /**
             * <code>optional .sp.T_ALARM_LOG alarm = 2;</code>
             * <p>
             * <pre>
             * 告警信息，ABA告警时补全
             * </pre>
             */
            public Builder setAlarm(
                    sp.AuditLog.T_ALARM_LOG.Builder builderForValue) {
                if (alarmBuilder_ == null) {
                    alarm_ = builderForValue.build();
                    onChanged();
                } else {
                    alarmBuilder_.setMessage(builderForValue.build());
                }
                bitField0_ |= 0x00000002;
                return this;
            }

            /**
             * <code>optional .sp.T_ALARM_LOG alarm = 2;</code>
             * <p>
             * <pre>
             * 告警信息，ABA告警时补全
             * </pre>
             */
            public Builder mergeAlarm(sp.AuditLog.T_ALARM_LOG value) {
                if (alarmBuilder_ == null) {
                    if (((bitField0_ & 0x00000002) == 0x00000002) &&
                            alarm_ != sp.AuditLog.T_ALARM_LOG.getDefaultInstance()) {
                        alarm_ =
                                sp.AuditLog.T_ALARM_LOG.newBuilder(alarm_).mergeFrom(value).buildPartial();
                    } else {
                        alarm_ = value;
                    }
                    onChanged();
                } else {
                    alarmBuilder_.mergeFrom(value);
                }
                bitField0_ |= 0x00000002;
                return this;
            }

            /**
             * <code>optional .sp.T_ALARM_LOG alarm = 2;</code>
             * <p>
             * <pre>
             * 告警信息，ABA告警时补全
             * </pre>
             */
            public Builder clearAlarm() {
                if (alarmBuilder_ == null) {
                    alarm_ = sp.AuditLog.T_ALARM_LOG.getDefaultInstance();
                    onChanged();
                } else {
                    alarmBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000002);
                return this;
            }

            /**
             * <code>optional .sp.T_ALARM_LOG alarm = 2;</code>
             * <p>
             * <pre>
             * 告警信息，ABA告警时补全
             * </pre>
             */
            public sp.AuditLog.T_ALARM_LOG.Builder getAlarmBuilder() {
                bitField0_ |= 0x00000002;
                onChanged();
                return getAlarmFieldBuilder().getBuilder();
            }

            /**
             * <code>optional .sp.T_ALARM_LOG alarm = 2;</code>
             * <p>
             * <pre>
             * 告警信息，ABA告警时补全
             * </pre>
             */
            public sp.AuditLog.T_ALARM_LOGOrBuilder getAlarmOrBuilder() {
                if (alarmBuilder_ != null) {
                    return alarmBuilder_.getMessageOrBuilder();
                } else {
                    return alarm_;
                }
            }

            /**
             * <code>optional .sp.T_ALARM_LOG alarm = 2;</code>
             * <p>
             * <pre>
             * 告警信息，ABA告警时补全
             * </pre>
             */
            private com.google.protobuf.SingleFieldBuilder<
                    sp.AuditLog.T_ALARM_LOG, sp.AuditLog.T_ALARM_LOG.Builder, sp.AuditLog.T_ALARM_LOGOrBuilder>
            getAlarmFieldBuilder() {
                if (alarmBuilder_ == null) {
                    alarmBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                            sp.AuditLog.T_ALARM_LOG, sp.AuditLog.T_ALARM_LOG.Builder, sp.AuditLog.T_ALARM_LOGOrBuilder>(
                            alarm_,
                            getParentForChildren(),
                            isClean());
                    alarm_ = null;
                }
                return alarmBuilder_;
            }

            // optional int32 mark = 8;
            private int mark_;

            /**
             * <code>optional int32 mark = 8;</code>
             * <p>
             * <pre>
             * 是否合法，特指合法绕行或非法绕行，特用于 ABA
             * </pre>
             */
            public boolean hasMark() {
                return ((bitField0_ & 0x00000004) == 0x00000004);
            }

            /**
             * <code>optional int32 mark = 8;</code>
             * <p>
             * <pre>
             * 是否合法，特指合法绕行或非法绕行，特用于 ABA
             * </pre>
             */
            public int getMark() {
                return mark_;
            }

            /**
             * <code>optional int32 mark = 8;</code>
             * <p>
             * <pre>
             * 是否合法，特指合法绕行或非法绕行，特用于 ABA
             * </pre>
             */
            public Builder setMark(int value) {
                bitField0_ |= 0x00000004;
                mark_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 mark = 8;</code>
             * <p>
             * <pre>
             * 是否合法，特指合法绕行或非法绕行，特用于 ABA
             * </pre>
             */
            public Builder clearMark() {
                bitField0_ = (bitField0_ & ~0x00000004);
                mark_ = 0;
                onChanged();
                return this;
            }

            // optional uint32 seq = 9;
            private int seq_;

            /**
             * <code>optional uint32 seq = 9;</code>
             * <p>
             * <pre>
             * 执行顺序，与 t_oper 表中的 seq 进行对应，用作倒推查询
             * </pre>
             */
            public boolean hasSeq() {
                return ((bitField0_ & 0x00000008) == 0x00000008);
            }

            /**
             * <code>optional uint32 seq = 9;</code>
             * <p>
             * <pre>
             * 执行顺序，与 t_oper 表中的 seq 进行对应，用作倒推查询
             * </pre>
             */
            public int getSeq() {
                return seq_;
            }

            /**
             * <code>optional uint32 seq = 9;</code>
             * <p>
             * <pre>
             * 执行顺序，与 t_oper 表中的 seq 进行对应，用作倒推查询
             * </pre>
             */
            public Builder setSeq(int value) {
                bitField0_ |= 0x00000008;
                seq_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional uint32 seq = 9;</code>
             * <p>
             * <pre>
             * 执行顺序，与 t_oper 表中的 seq 进行对应，用作倒推查询
             * </pre>
             */
            public Builder clearSeq() {
                bitField0_ = (bitField0_ & ~0x00000008);
                seq_ = 0;
                onChanged();
                return this;
            }

            // optional bytes sessionid = 10;
            private com.google.protobuf.ByteString sessionid_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes sessionid = 10;</code>
             * <p>
             * <pre>
             * 用户会话ID，指登录4A时产生的会话
             * </pre>
             */
            public boolean hasSessionid() {
                return ((bitField0_ & 0x00000010) == 0x00000010);
            }

            /**
             * <code>optional bytes sessionid = 10;</code>
             * <p>
             * <pre>
             * 用户会话ID，指登录4A时产生的会话
             * </pre>
             */
            public com.google.protobuf.ByteString getSessionid() {
                return sessionid_;
            }

            /**
             * <code>optional bytes sessionid = 10;</code>
             * <p>
             * <pre>
             * 用户会话ID，指登录4A时产生的会话
             * </pre>
             */
            public Builder setSessionid(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000010;
                sessionid_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes sessionid = 10;</code>
             * <p>
             * <pre>
             * 用户会话ID，指登录4A时产生的会话
             * </pre>
             */
            public Builder clearSessionid() {
                bitField0_ = (bitField0_ & ~0x00000010);
                sessionid_ = getDefaultInstance().getSessionid();
                onChanged();
                return this;
            }

            // optional int32 ana_policy_id = 11;
            private int anaPolicyId_;

            /**
             * <code>optional int32 ana_policy_id = 11;</code>
             * <p>
             * <pre>
             * 分析策略ID，经过ABA分析策略处理之后，才会有该值，特用于 ABA
             * </pre>
             */
            public boolean hasAnaPolicyId() {
                return ((bitField0_ & 0x00000020) == 0x00000020);
            }

            /**
             * <code>optional int32 ana_policy_id = 11;</code>
             * <p>
             * <pre>
             * 分析策略ID，经过ABA分析策略处理之后，才会有该值，特用于 ABA
             * </pre>
             */
            public int getAnaPolicyId() {
                return anaPolicyId_;
            }

            /**
             * <code>optional int32 ana_policy_id = 11;</code>
             * <p>
             * <pre>
             * 分析策略ID，经过ABA分析策略处理之后，才会有该值，特用于 ABA
             * </pre>
             */
            public Builder setAnaPolicyId(int value) {
                bitField0_ |= 0x00000020;
                anaPolicyId_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 ana_policy_id = 11;</code>
             * <p>
             * <pre>
             * 分析策略ID，经过ABA分析策略处理之后，才会有该值，特用于 ABA
             * </pre>
             */
            public Builder clearAnaPolicyId() {
                bitField0_ = (bitField0_ & ~0x00000020);
                anaPolicyId_ = 0;
                onChanged();
                return this;
            }

            // required .sp.LOG_TYPE log_type = 12;
            private sp.AuditEnum.LOG_TYPE logType_ = sp.AuditEnum.LOG_TYPE.LOG_UNKNOWN;

            /**
             * <code>required .sp.LOG_TYPE log_type = 12;</code>
             * <p>
             * <pre>
             * 审计日志类型ID，可能取值：LOGON、LOGOFF、FILL_LOG、USER_OPER_LOG、JDBC_LOG、NBA_OPER等
             * </pre>
             */
            public boolean hasLogType() {
                return ((bitField0_ & 0x00000040) == 0x00000040);
            }

            /**
             * <code>required .sp.LOG_TYPE log_type = 12;</code>
             * <p>
             * <pre>
             * 审计日志类型ID，可能取值：LOGON、LOGOFF、FILL_LOG、USER_OPER_LOG、JDBC_LOG、NBA_OPER等
             * </pre>
             */
            public sp.AuditEnum.LOG_TYPE getLogType() {
                return logType_;
            }

            /**
             * <code>required .sp.LOG_TYPE log_type = 12;</code>
             * <p>
             * <pre>
             * 审计日志类型ID，可能取值：LOGON、LOGOFF、FILL_LOG、USER_OPER_LOG、JDBC_LOG、NBA_OPER等
             * </pre>
             */
            public Builder setLogType(sp.AuditEnum.LOG_TYPE value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000040;
                logType_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required .sp.LOG_TYPE log_type = 12;</code>
             * <p>
             * <pre>
             * 审计日志类型ID，可能取值：LOGON、LOGOFF、FILL_LOG、USER_OPER_LOG、JDBC_LOG、NBA_OPER等
             * </pre>
             */
            public Builder clearLogType() {
                bitField0_ = (bitField0_ & ~0x00000040);
                logType_ = sp.AuditEnum.LOG_TYPE.LOG_UNKNOWN;
                onChanged();
                return this;
            }

            // optional int32 audit_logtypeid = 13;
            private int auditLogtypeid_;

            /**
             * <code>optional int32 audit_logtypeid = 13;</code>
             * <p>
             * <pre>
             * 应用ID
             * </pre>
             */
            public boolean hasAuditLogtypeid() {
                return ((bitField0_ & 0x00000080) == 0x00000080);
            }

            /**
             * <code>optional int32 audit_logtypeid = 13;</code>
             * <p>
             * <pre>
             * 应用ID
             * </pre>
             */
            public int getAuditLogtypeid() {
                return auditLogtypeid_;
            }

            /**
             * <code>optional int32 audit_logtypeid = 13;</code>
             * <p>
             * <pre>
             * 应用ID
             * </pre>
             */
            public Builder setAuditLogtypeid(int value) {
                bitField0_ |= 0x00000080;
                auditLogtypeid_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 audit_logtypeid = 13;</code>
             * <p>
             * <pre>
             * 应用ID
             * </pre>
             */
            public Builder clearAuditLogtypeid() {
                bitField0_ = (bitField0_ & ~0x00000080);
                auditLogtypeid_ = 0;
                onChanged();
                return this;
            }

            // optional bytes audit_logtypename = 14;
            private com.google.protobuf.ByteString auditLogtypename_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes audit_logtypename = 14;</code>
             * <p>
             * <pre>
             * 应用名称
             * </pre>
             */
            public boolean hasAuditLogtypename() {
                return ((bitField0_ & 0x00000100) == 0x00000100);
            }

            /**
             * <code>optional bytes audit_logtypename = 14;</code>
             * <p>
             * <pre>
             * 应用名称
             * </pre>
             */
            public com.google.protobuf.ByteString getAuditLogtypename() {
                return auditLogtypename_;
            }

            /**
             * <code>optional bytes audit_logtypename = 14;</code>
             * <p>
             * <pre>
             * 应用名称
             * </pre>
             */
            public Builder setAuditLogtypename(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000100;
                auditLogtypename_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes audit_logtypename = 14;</code>
             * <p>
             * <pre>
             * 应用名称
             * </pre>
             */
            public Builder clearAuditLogtypename() {
                bitField0_ = (bitField0_ & ~0x00000100);
                auditLogtypename_ = getDefaultInstance().getAuditLogtypename();
                onChanged();
                return this;
            }

            // optional int32 ast_id = 15;
            private int astId_;

            /**
             * <code>optional int32 ast_id = 15;</code>
             * <p>
             * <pre>
             * 资产ID
             * </pre>
             */
            public boolean hasAstId() {
                return ((bitField0_ & 0x00000200) == 0x00000200);
            }

            /**
             * <code>optional int32 ast_id = 15;</code>
             * <p>
             * <pre>
             * 资产ID
             * </pre>
             */
            public int getAstId() {
                return astId_;
            }

            /**
             * <code>optional int32 ast_id = 15;</code>
             * <p>
             * <pre>
             * 资产ID
             * </pre>
             */
            public Builder setAstId(int value) {
                bitField0_ |= 0x00000200;
                astId_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 ast_id = 15;</code>
             * <p>
             * <pre>
             * 资产ID
             * </pre>
             */
            public Builder clearAstId() {
                bitField0_ = (bitField0_ & ~0x00000200);
                astId_ = 0;
                onChanged();
                return this;
            }

            // optional bytes ast_ip = 16;
            private com.google.protobuf.ByteString astIp_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes ast_ip = 16;</code>
             * <p>
             * <pre>
             * 资产IP，必须转化为整数后再进行传送，避免非法的IP地址格式
             * </pre>
             */
            public boolean hasAstIp() {
                return ((bitField0_ & 0x00000400) == 0x00000400);
            }

            /**
             * <code>optional bytes ast_ip = 16;</code>
             * <p>
             * <pre>
             * 资产IP，必须转化为整数后再进行传送，避免非法的IP地址格式
             * </pre>
             */
            public com.google.protobuf.ByteString getAstIp() {
                return astIp_;
            }

            /**
             * <code>optional bytes ast_ip = 16;</code>
             * <p>
             * <pre>
             * 资产IP，必须转化为整数后再进行传送，避免非法的IP地址格式
             * </pre>
             */
            public Builder setAstIp(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000400;
                astIp_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes ast_ip = 16;</code>
             * <p>
             * <pre>
             * 资产IP，必须转化为整数后再进行传送，避免非法的IP地址格式
             * </pre>
             */
            public Builder clearAstIp() {
                bitField0_ = (bitField0_ & ~0x00000400);
                astIp_ = getDefaultInstance().getAstIp();
                onChanged();
                return this;
            }

            // optional bytes ast_name = 17;
            private com.google.protobuf.ByteString astName_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes ast_name = 17;</code>
             * <p>
             * <pre>
             * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
             * </pre>
             */
            public boolean hasAstName() {
                return ((bitField0_ & 0x00000800) == 0x00000800);
            }

            /**
             * <code>optional bytes ast_name = 17;</code>
             * <p>
             * <pre>
             * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
             * </pre>
             */
            public com.google.protobuf.ByteString getAstName() {
                return astName_;
            }

            /**
             * <code>optional bytes ast_name = 17;</code>
             * <p>
             * <pre>
             * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
             * </pre>
             */
            public Builder setAstName(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000800;
                astName_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes ast_name = 17;</code>
             * <p>
             * <pre>
             * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
             * </pre>
             */
            public Builder clearAstName() {
                bitField0_ = (bitField0_ & ~0x00000800);
                astName_ = getDefaultInstance().getAstName();
                onChanged();
                return this;
            }

            // optional bytes ast_region_code = 18;
            private com.google.protobuf.ByteString astRegionCode_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes ast_region_code = 18;</code>
             * <p>
             * <pre>
             * 资产地域编码
             * </pre>
             */
            public boolean hasAstRegionCode() {
                return ((bitField0_ & 0x00001000) == 0x00001000);
            }

            /**
             * <code>optional bytes ast_region_code = 18;</code>
             * <p>
             * <pre>
             * 资产地域编码
             * </pre>
             */
            public com.google.protobuf.ByteString getAstRegionCode() {
                return astRegionCode_;
            }

            /**
             * <code>optional bytes ast_region_code = 18;</code>
             * <p>
             * <pre>
             * 资产地域编码
             * </pre>
             */
            public Builder setAstRegionCode(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00001000;
                astRegionCode_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes ast_region_code = 18;</code>
             * <p>
             * <pre>
             * 资产地域编码
             * </pre>
             */
            public Builder clearAstRegionCode() {
                bitField0_ = (bitField0_ & ~0x00001000);
                astRegionCode_ = getDefaultInstance().getAstRegionCode();
                onChanged();
                return this;
            }

            // optional bytes ast_region_name = 19;
            private com.google.protobuf.ByteString astRegionName_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes ast_region_name = 19;</code>
             * <p>
             * <pre>
             * 资产地域名称
             * </pre>
             */
            public boolean hasAstRegionName() {
                return ((bitField0_ & 0x00002000) == 0x00002000);
            }

            /**
             * <code>optional bytes ast_region_name = 19;</code>
             * <p>
             * <pre>
             * 资产地域名称
             * </pre>
             */
            public com.google.protobuf.ByteString getAstRegionName() {
                return astRegionName_;
            }

            /**
             * <code>optional bytes ast_region_name = 19;</code>
             * <p>
             * <pre>
             * 资产地域名称
             * </pre>
             */
            public Builder setAstRegionName(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00002000;
                astRegionName_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes ast_region_name = 19;</code>
             * <p>
             * <pre>
             * 资产地域名称
             * </pre>
             */
            public Builder clearAstRegionName() {
                bitField0_ = (bitField0_ & ~0x00002000);
                astRegionName_ = getDefaultInstance().getAstRegionName();
                onChanged();
                return this;
            }

            // optional int32 hgid = 20;
            private int hgid_;

            /**
             * <code>optional int32 hgid = 20;</code>
             * <p>
             * <pre>
             * 资源组ID；重要，在审计分级管理中起决定性作用
             * </pre>
             */
            public boolean hasHgid() {
                return ((bitField0_ & 0x00004000) == 0x00004000);
            }

            /**
             * <code>optional int32 hgid = 20;</code>
             * <p>
             * <pre>
             * 资源组ID；重要，在审计分级管理中起决定性作用
             * </pre>
             */
            public int getHgid() {
                return hgid_;
            }

            /**
             * <code>optional int32 hgid = 20;</code>
             * <p>
             * <pre>
             * 资源组ID；重要，在审计分级管理中起决定性作用
             * </pre>
             */
            public Builder setHgid(int value) {
                bitField0_ |= 0x00004000;
                hgid_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 hgid = 20;</code>
             * <p>
             * <pre>
             * 资源组ID；重要，在审计分级管理中起决定性作用
             * </pre>
             */
            public Builder clearHgid() {
                bitField0_ = (bitField0_ & ~0x00004000);
                hgid_ = 0;
                onChanged();
                return this;
            }

            // optional bytes hgname = 21;
            private com.google.protobuf.ByteString hgname_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes hgname = 21;</code>
             * <p>
             * <pre>
             * 资源组名称
             * </pre>
             */
            public boolean hasHgname() {
                return ((bitField0_ & 0x00008000) == 0x00008000);
            }

            /**
             * <code>optional bytes hgname = 21;</code>
             * <p>
             * <pre>
             * 资源组名称
             * </pre>
             */
            public com.google.protobuf.ByteString getHgname() {
                return hgname_;
            }

            /**
             * <code>optional bytes hgname = 21;</code>
             * <p>
             * <pre>
             * 资源组名称
             * </pre>
             */
            public Builder setHgname(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00008000;
                hgname_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes hgname = 21;</code>
             * <p>
             * <pre>
             * 资源组名称
             * </pre>
             */
            public Builder clearHgname() {
                bitField0_ = (bitField0_ & ~0x00008000);
                hgname_ = getDefaultInstance().getHgname();
                onChanged();
                return this;
            }

            // optional bytes progkey = 22;
            private com.google.protobuf.ByteString progkey_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes progkey = 22;</code>
             * <p>
             * <pre>
             * 所属IT系统
             * </pre>
             */
            public boolean hasProgkey() {
                return ((bitField0_ & 0x00010000) == 0x00010000);
            }

            /**
             * <code>optional bytes progkey = 22;</code>
             * <p>
             * <pre>
             * 所属IT系统
             * </pre>
             */
            public com.google.protobuf.ByteString getProgkey() {
                return progkey_;
            }

            /**
             * <code>optional bytes progkey = 22;</code>
             * <p>
             * <pre>
             * 所属IT系统
             * </pre>
             */
            public Builder setProgkey(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00010000;
                progkey_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes progkey = 22;</code>
             * <p>
             * <pre>
             * 所属IT系统
             * </pre>
             */
            public Builder clearProgkey() {
                bitField0_ = (bitField0_ & ~0x00010000);
                progkey_ = getDefaultInstance().getProgkey();
                onChanged();
                return this;
            }

            // optional int32 ast_type_id = 23;
            private int astTypeId_;

            /**
             * <code>optional int32 ast_type_id = 23;</code>
             * <p>
             * <pre>
             * 资产类型ID
             * </pre>
             */
            public boolean hasAstTypeId() {
                return ((bitField0_ & 0x00020000) == 0x00020000);
            }

            /**
             * <code>optional int32 ast_type_id = 23;</code>
             * <p>
             * <pre>
             * 资产类型ID
             * </pre>
             */
            public int getAstTypeId() {
                return astTypeId_;
            }

            /**
             * <code>optional int32 ast_type_id = 23;</code>
             * <p>
             * <pre>
             * 资产类型ID
             * </pre>
             */
            public Builder setAstTypeId(int value) {
                bitField0_ |= 0x00020000;
                astTypeId_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 ast_type_id = 23;</code>
             * <p>
             * <pre>
             * 资产类型ID
             * </pre>
             */
            public Builder clearAstTypeId() {
                bitField0_ = (bitField0_ & ~0x00020000);
                astTypeId_ = 0;
                onChanged();
                return this;
            }

            // optional bytes ast_type_code = 24;
            private com.google.protobuf.ByteString astTypeCode_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes ast_type_code = 24;</code>
             * <p>
             * <pre>
             * 资产类型编码
             * </pre>
             */
            public boolean hasAstTypeCode() {
                return ((bitField0_ & 0x00040000) == 0x00040000);
            }

            /**
             * <code>optional bytes ast_type_code = 24;</code>
             * <p>
             * <pre>
             * 资产类型编码
             * </pre>
             */
            public com.google.protobuf.ByteString getAstTypeCode() {
                return astTypeCode_;
            }

            /**
             * <code>optional bytes ast_type_code = 24;</code>
             * <p>
             * <pre>
             * 资产类型编码
             * </pre>
             */
            public Builder setAstTypeCode(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00040000;
                astTypeCode_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes ast_type_code = 24;</code>
             * <p>
             * <pre>
             * 资产类型编码
             * </pre>
             */
            public Builder clearAstTypeCode() {
                bitField0_ = (bitField0_ & ~0x00040000);
                astTypeCode_ = getDefaultInstance().getAstTypeCode();
                onChanged();
                return this;
            }

            // optional bytes ast_type_name = 25;
            private com.google.protobuf.ByteString astTypeName_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes ast_type_name = 25;</code>
             * <p>
             * <pre>
             * 资产类型名称
             * </pre>
             */
            public boolean hasAstTypeName() {
                return ((bitField0_ & 0x00080000) == 0x00080000);
            }

            /**
             * <code>optional bytes ast_type_name = 25;</code>
             * <p>
             * <pre>
             * 资产类型名称
             * </pre>
             */
            public com.google.protobuf.ByteString getAstTypeName() {
                return astTypeName_;
            }

            /**
             * <code>optional bytes ast_type_name = 25;</code>
             * <p>
             * <pre>
             * 资产类型名称
             * </pre>
             */
            public Builder setAstTypeName(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00080000;
                astTypeName_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes ast_type_name = 25;</code>
             * <p>
             * <pre>
             * 资产类型名称
             * </pre>
             */
            public Builder clearAstTypeName() {
                bitField0_ = (bitField0_ & ~0x00080000);
                astTypeName_ = getDefaultInstance().getAstTypeName();
                onChanged();
                return this;
            }

            // optional bytes ast_admin = 26;
            private com.google.protobuf.ByteString astAdmin_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes ast_admin = 26;</code>
             * <p>
             * <pre>
             * 资产管理人员
             * </pre>
             */
            public boolean hasAstAdmin() {
                return ((bitField0_ & 0x00100000) == 0x00100000);
            }

            /**
             * <code>optional bytes ast_admin = 26;</code>
             * <p>
             * <pre>
             * 资产管理人员
             * </pre>
             */
            public com.google.protobuf.ByteString getAstAdmin() {
                return astAdmin_;
            }

            /**
             * <code>optional bytes ast_admin = 26;</code>
             * <p>
             * <pre>
             * 资产管理人员
             * </pre>
             */
            public Builder setAstAdmin(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00100000;
                astAdmin_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes ast_admin = 26;</code>
             * <p>
             * <pre>
             * 资产管理人员
             * </pre>
             */
            public Builder clearAstAdmin() {
                bitField0_ = (bitField0_ & ~0x00100000);
                astAdmin_ = getDefaultInstance().getAstAdmin();
                onChanged();
                return this;
            }

            // optional int32 key_ast = 27;
            private int keyAst_;

            /**
             * <code>optional int32 key_ast = 27;</code>
             * <p>
             * <pre>
             * 资产重要程度（是否关键资产）
             * </pre>
             */
            public boolean hasKeyAst() {
                return ((bitField0_ & 0x00200000) == 0x00200000);
            }

            /**
             * <code>optional int32 key_ast = 27;</code>
             * <p>
             * <pre>
             * 资产重要程度（是否关键资产）
             * </pre>
             */
            public int getKeyAst() {
                return keyAst_;
            }

            /**
             * <code>optional int32 key_ast = 27;</code>
             * <p>
             * <pre>
             * 资产重要程度（是否关键资产）
             * </pre>
             */
            public Builder setKeyAst(int value) {
                bitField0_ |= 0x00200000;
                keyAst_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 key_ast = 27;</code>
             * <p>
             * <pre>
             * 资产重要程度（是否关键资产）
             * </pre>
             */
            public Builder clearKeyAst() {
                bitField0_ = (bitField0_ & ~0x00200000);
                keyAst_ = 0;
                onChanged();
                return this;
            }

            // optional int32 engine_id = 28;
            private int engineId_;

            /**
             * <code>optional int32 engine_id = 28;</code>
             * <p>
             * <pre>
             * 审计引擎ID
             * </pre>
             */
            public boolean hasEngineId() {
                return ((bitField0_ & 0x00400000) == 0x00400000);
            }

            /**
             * <code>optional int32 engine_id = 28;</code>
             * <p>
             * <pre>
             * 审计引擎ID
             * </pre>
             */
            public int getEngineId() {
                return engineId_;
            }

            /**
             * <code>optional int32 engine_id = 28;</code>
             * <p>
             * <pre>
             * 审计引擎ID
             * </pre>
             */
            public Builder setEngineId(int value) {
                bitField0_ |= 0x00400000;
                engineId_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 engine_id = 28;</code>
             * <p>
             * <pre>
             * 审计引擎ID
             * </pre>
             */
            public Builder clearEngineId() {
                bitField0_ = (bitField0_ & ~0x00400000);
                engineId_ = 0;
                onChanged();
                return this;
            }

            // optional .sp.COMPONENT_TYPE engine_type = 29;
            private sp.AuditEnum.COMPONENT_TYPE engineType_ = sp.AuditEnum.COMPONENT_TYPE.ALL;

            /**
             * <code>optional .sp.COMPONENT_TYPE engine_type = 29;</code>
             * <p>
             * <pre>
             * 引擎类型
             * </pre>
             */
            public boolean hasEngineType() {
                return ((bitField0_ & 0x00800000) == 0x00800000);
            }

            /**
             * <code>optional .sp.COMPONENT_TYPE engine_type = 29;</code>
             * <p>
             * <pre>
             * 引擎类型
             * </pre>
             */
            public sp.AuditEnum.COMPONENT_TYPE getEngineType() {
                return engineType_;
            }

            /**
             * <code>optional .sp.COMPONENT_TYPE engine_type = 29;</code>
             * <p>
             * <pre>
             * 引擎类型
             * </pre>
             */
            public Builder setEngineType(sp.AuditEnum.COMPONENT_TYPE value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00800000;
                engineType_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional .sp.COMPONENT_TYPE engine_type = 29;</code>
             * <p>
             * <pre>
             * 引擎类型
             * </pre>
             */
            public Builder clearEngineType() {
                bitField0_ = (bitField0_ & ~0x00800000);
                engineType_ = sp.AuditEnum.COMPONENT_TYPE.ALL;
                onChanged();
                return this;
            }

            // optional bytes engine_ip = 30;
            private com.google.protobuf.ByteString engineIp_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes engine_ip = 30;</code>
             * <p>
             * <pre>
             * 引擎IP
             * </pre>
             */
            public boolean hasEngineIp() {
                return ((bitField0_ & 0x01000000) == 0x01000000);
            }

            /**
             * <code>optional bytes engine_ip = 30;</code>
             * <p>
             * <pre>
             * 引擎IP
             * </pre>
             */
            public com.google.protobuf.ByteString getEngineIp() {
                return engineIp_;
            }

            /**
             * <code>optional bytes engine_ip = 30;</code>
             * <p>
             * <pre>
             * 引擎IP
             * </pre>
             */
            public Builder setEngineIp(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x01000000;
                engineIp_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes engine_ip = 30;</code>
             * <p>
             * <pre>
             * 引擎IP
             * </pre>
             */
            public Builder clearEngineIp() {
                bitField0_ = (bitField0_ & ~0x01000000);
                engineIp_ = getDefaultInstance().getEngineIp();
                onChanged();
                return this;
            }

            // optional bytes engine_type_name = 31;
            private com.google.protobuf.ByteString engineTypeName_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes engine_type_name = 31;</code>
             * <p>
             * <pre>
             * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
             * </pre>
             */
            public boolean hasEngineTypeName() {
                return ((bitField0_ & 0x02000000) == 0x02000000);
            }

            /**
             * <code>optional bytes engine_type_name = 31;</code>
             * <p>
             * <pre>
             * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
             * </pre>
             */
            public com.google.protobuf.ByteString getEngineTypeName() {
                return engineTypeName_;
            }

            /**
             * <code>optional bytes engine_type_name = 31;</code>
             * <p>
             * <pre>
             * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
             * </pre>
             */
            public Builder setEngineTypeName(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x02000000;
                engineTypeName_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes engine_type_name = 31;</code>
             * <p>
             * <pre>
             * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
             * </pre>
             */
            public Builder clearEngineTypeName() {
                bitField0_ = (bitField0_ & ~0x02000000);
                engineTypeName_ = getDefaultInstance().getEngineTypeName();
                onChanged();
                return this;
            }

            // optional bytes log_source_ip = 32;
            private com.google.protobuf.ByteString logSourceIp_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes log_source_ip = 32;</code>
             * <p>
             * <pre>
             * 日志来源IP，4A 3.3、3.4版本中，金库日志使用该字段
             * </pre>
             */
            public boolean hasLogSourceIp() {
                return ((bitField0_ & 0x04000000) == 0x04000000);
            }

            /**
             * <code>optional bytes log_source_ip = 32;</code>
             * <p>
             * <pre>
             * 日志来源IP，4A 3.3、3.4版本中，金库日志使用该字段
             * </pre>
             */
            public com.google.protobuf.ByteString getLogSourceIp() {
                return logSourceIp_;
            }

            /**
             * <code>optional bytes log_source_ip = 32;</code>
             * <p>
             * <pre>
             * 日志来源IP，4A 3.3、3.4版本中，金库日志使用该字段
             * </pre>
             */
            public Builder setLogSourceIp(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x04000000;
                logSourceIp_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes log_source_ip = 32;</code>
             * <p>
             * <pre>
             * 日志来源IP，4A 3.3、3.4版本中，金库日志使用该字段
             * </pre>
             */
            public Builder clearLogSourceIp() {
                bitField0_ = (bitField0_ & ~0x04000000);
                logSourceIp_ = getDefaultInstance().getLogSourceIp();
                onChanged();
                return this;
            }

            // optional int32 userid = 33;
            private int userid_;

            /**
             * <code>optional int32 userid = 33;</code>
             * <p>
             * <pre>
             * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
             * </pre>
             */
            public boolean hasUserid() {
                return ((bitField0_ & 0x08000000) == 0x08000000);
            }

            /**
             * <code>optional int32 userid = 33;</code>
             * <p>
             * <pre>
             * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
             * </pre>
             */
            public int getUserid() {
                return userid_;
            }

            /**
             * <code>optional int32 userid = 33;</code>
             * <p>
             * <pre>
             * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
             * </pre>
             */
            public Builder setUserid(int value) {
                bitField0_ |= 0x08000000;
                userid_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 userid = 33;</code>
             * <p>
             * <pre>
             * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
             * </pre>
             */
            public Builder clearUserid() {
                bitField0_ = (bitField0_ & ~0x08000000);
                userid_ = 0;
                onChanged();
                return this;
            }

            // optional bytes logname = 34;
            private com.google.protobuf.ByteString logname_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes logname = 34;</code>
             * <p>
             * <pre>
             * 主帐号
             * </pre>
             */
            public boolean hasLogname() {
                return ((bitField0_ & 0x10000000) == 0x10000000);
            }

            /**
             * <code>optional bytes logname = 34;</code>
             * <p>
             * <pre>
             * 主帐号
             * </pre>
             */
            public com.google.protobuf.ByteString getLogname() {
                return logname_;
            }

            /**
             * <code>optional bytes logname = 34;</code>
             * <p>
             * <pre>
             * 主帐号
             * </pre>
             */
            public Builder setLogname(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x10000000;
                logname_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes logname = 34;</code>
             * <p>
             * <pre>
             * 主帐号
             * </pre>
             */
            public Builder clearLogname() {
                bitField0_ = (bitField0_ & ~0x10000000);
                logname_ = getDefaultInstance().getLogname();
                onChanged();
                return this;
            }

            // optional bytes uname = 35;
            private com.google.protobuf.ByteString uname_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes uname = 35;</code>
             * <p>
             * <pre>
             * 用户姓名
             * </pre>
             */
            public boolean hasUname() {
                return ((bitField0_ & 0x20000000) == 0x20000000);
            }

            /**
             * <code>optional bytes uname = 35;</code>
             * <p>
             * <pre>
             * 用户姓名
             * </pre>
             */
            public com.google.protobuf.ByteString getUname() {
                return uname_;
            }

            /**
             * <code>optional bytes uname = 35;</code>
             * <p>
             * <pre>
             * 用户姓名
             * </pre>
             */
            public Builder setUname(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x20000000;
                uname_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes uname = 35;</code>
             * <p>
             * <pre>
             * 用户姓名
             * </pre>
             */
            public Builder clearUname() {
                bitField0_ = (bitField0_ & ~0x20000000);
                uname_ = getDefaultInstance().getUname();
                onChanged();
                return this;
            }

            // optional int32 ouid = 36;
            private int ouid_;

            /**
             * <code>optional int32 ouid = 36;</code>
             * <p>
             * <pre>
             * 组织机构ID；重要，在审计分级管理中起决定性作用
             * </pre>
             */
            public boolean hasOuid() {
                return ((bitField0_ & 0x40000000) == 0x40000000);
            }

            /**
             * <code>optional int32 ouid = 36;</code>
             * <p>
             * <pre>
             * 组织机构ID；重要，在审计分级管理中起决定性作用
             * </pre>
             */
            public int getOuid() {
                return ouid_;
            }

            /**
             * <code>optional int32 ouid = 36;</code>
             * <p>
             * <pre>
             * 组织机构ID；重要，在审计分级管理中起决定性作用
             * </pre>
             */
            public Builder setOuid(int value) {
                bitField0_ |= 0x40000000;
                ouid_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 ouid = 36;</code>
             * <p>
             * <pre>
             * 组织机构ID；重要，在审计分级管理中起决定性作用
             * </pre>
             */
            public Builder clearOuid() {
                bitField0_ = (bitField0_ & ~0x40000000);
                ouid_ = 0;
                onChanged();
                return this;
            }

            // optional bytes ouname = 37;
            private com.google.protobuf.ByteString ouname_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes ouname = 37;</code>
             * <p>
             * <pre>
             * 组织机构名称
             * </pre>
             */
            public boolean hasOuname() {
                return ((bitField0_ & 0x80000000) == 0x80000000);
            }

            /**
             * <code>optional bytes ouname = 37;</code>
             * <p>
             * <pre>
             * 组织机构名称
             * </pre>
             */
            public com.google.protobuf.ByteString getOuname() {
                return ouname_;
            }

            /**
             * <code>optional bytes ouname = 37;</code>
             * <p>
             * <pre>
             * 组织机构名称
             * </pre>
             */
            public Builder setOuname(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x80000000;
                ouname_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes ouname = 37;</code>
             * <p>
             * <pre>
             * 组织机构名称
             * </pre>
             */
            public Builder clearOuname() {
                bitField0_ = (bitField0_ & ~0x80000000);
                ouname_ = getDefaultInstance().getOuname();
                onChanged();
                return this;
            }

            // optional int32 logname_type_id = 38;
            private int lognameTypeId_;

            /**
             * <code>optional int32 logname_type_id = 38;</code>
             * <p>
             * <pre>
             * 主帐号类型ID
             * </pre>
             */
            public boolean hasLognameTypeId() {
                return ((bitField1_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>optional int32 logname_type_id = 38;</code>
             * <p>
             * <pre>
             * 主帐号类型ID
             * </pre>
             */
            public int getLognameTypeId() {
                return lognameTypeId_;
            }

            /**
             * <code>optional int32 logname_type_id = 38;</code>
             * <p>
             * <pre>
             * 主帐号类型ID
             * </pre>
             */
            public Builder setLognameTypeId(int value) {
                bitField1_ |= 0x00000001;
                lognameTypeId_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 logname_type_id = 38;</code>
             * <p>
             * <pre>
             * 主帐号类型ID
             * </pre>
             */
            public Builder clearLognameTypeId() {
                bitField1_ = (bitField1_ & ~0x00000001);
                lognameTypeId_ = 0;
                onChanged();
                return this;
            }

            // optional bytes logname_type = 39;
            private com.google.protobuf.ByteString lognameType_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes logname_type = 39;</code>
             * <p>
             * <pre>
             * 主帐号类型，如：营业员、客服坐席、渠道、大客户经理等
             * </pre>
             */
            public boolean hasLognameType() {
                return ((bitField1_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>optional bytes logname_type = 39;</code>
             * <p>
             * <pre>
             * 主帐号类型，如：营业员、客服坐席、渠道、大客户经理等
             * </pre>
             */
            public com.google.protobuf.ByteString getLognameType() {
                return lognameType_;
            }

            /**
             * <code>optional bytes logname_type = 39;</code>
             * <p>
             * <pre>
             * 主帐号类型，如：营业员、客服坐席、渠道、大客户经理等
             * </pre>
             */
            public Builder setLognameType(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField1_ |= 0x00000002;
                lognameType_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes logname_type = 39;</code>
             * <p>
             * <pre>
             * 主帐号类型，如：营业员、客服坐席、渠道、大客户经理等
             * </pre>
             */
            public Builder clearLognameType() {
                bitField1_ = (bitField1_ & ~0x00000002);
                lognameType_ = getDefaultInstance().getLognameType();
                onChanged();
                return this;
            }

            // optional bytes logname_region_code = 40;
            private com.google.protobuf.ByteString lognameRegionCode_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes logname_region_code = 40;</code>
             * <p>
             * <pre>
             * 主帐号地域编码
             * </pre>
             */
            public boolean hasLognameRegionCode() {
                return ((bitField1_ & 0x00000004) == 0x00000004);
            }

            /**
             * <code>optional bytes logname_region_code = 40;</code>
             * <p>
             * <pre>
             * 主帐号地域编码
             * </pre>
             */
            public com.google.protobuf.ByteString getLognameRegionCode() {
                return lognameRegionCode_;
            }

            /**
             * <code>optional bytes logname_region_code = 40;</code>
             * <p>
             * <pre>
             * 主帐号地域编码
             * </pre>
             */
            public Builder setLognameRegionCode(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField1_ |= 0x00000004;
                lognameRegionCode_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes logname_region_code = 40;</code>
             * <p>
             * <pre>
             * 主帐号地域编码
             * </pre>
             */
            public Builder clearLognameRegionCode() {
                bitField1_ = (bitField1_ & ~0x00000004);
                lognameRegionCode_ = getDefaultInstance().getLognameRegionCode();
                onChanged();
                return this;
            }

            // optional bytes logname_region = 41;
            private com.google.protobuf.ByteString lognameRegion_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes logname_region = 41;</code>
             * <p>
             * <pre>
             * 主帐号地域
             * </pre>
             */
            public boolean hasLognameRegion() {
                return ((bitField1_ & 0x00000008) == 0x00000008);
            }

            /**
             * <code>optional bytes logname_region = 41;</code>
             * <p>
             * <pre>
             * 主帐号地域
             * </pre>
             */
            public com.google.protobuf.ByteString getLognameRegion() {
                return lognameRegion_;
            }

            /**
             * <code>optional bytes logname_region = 41;</code>
             * <p>
             * <pre>
             * 主帐号地域
             * </pre>
             */
            public Builder setLognameRegion(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField1_ |= 0x00000008;
                lognameRegion_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes logname_region = 41;</code>
             * <p>
             * <pre>
             * 主帐号地域
             * </pre>
             */
            public Builder clearLognameRegion() {
                bitField1_ = (bitField1_ & ~0x00000008);
                lognameRegion_ = getDefaultInstance().getLognameRegion();
                onChanged();
                return this;
            }

            // optional int32 logname_status = 42;
            private int lognameStatus_;

            /**
             * <code>optional int32 logname_status = 42;</code>
             * <p>
             * <pre>
             * 主帐号状态：正常/锁定/删除
             * </pre>
             */
            public boolean hasLognameStatus() {
                return ((bitField1_ & 0x00000010) == 0x00000010);
            }

            /**
             * <code>optional int32 logname_status = 42;</code>
             * <p>
             * <pre>
             * 主帐号状态：正常/锁定/删除
             * </pre>
             */
            public int getLognameStatus() {
                return lognameStatus_;
            }

            /**
             * <code>optional int32 logname_status = 42;</code>
             * <p>
             * <pre>
             * 主帐号状态：正常/锁定/删除
             * </pre>
             */
            public Builder setLognameStatus(int value) {
                bitField1_ |= 0x00000010;
                lognameStatus_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 logname_status = 42;</code>
             * <p>
             * <pre>
             * 主帐号状态：正常/锁定/删除
             * </pre>
             */
            public Builder clearLognameStatus() {
                bitField1_ = (bitField1_ & ~0x00000010);
                lognameStatus_ = 0;
                onChanged();
                return this;
            }

            // optional int32 treasury_log_type = 43;
            private int treasuryLogType_;

            /**
             * <code>optional int32 treasury_log_type = 43;</code>
             * <p>
             * <pre>
             * 金库日志类型:1-金库操作申请日志
             * </pre>
             */
            public boolean hasTreasuryLogType() {
                return ((bitField1_ & 0x00000020) == 0x00000020);
            }

            /**
             * <code>optional int32 treasury_log_type = 43;</code>
             * <p>
             * <pre>
             * 金库日志类型:1-金库操作申请日志
             * </pre>
             */
            public int getTreasuryLogType() {
                return treasuryLogType_;
            }

            /**
             * <code>optional int32 treasury_log_type = 43;</code>
             * <p>
             * <pre>
             * 金库日志类型:1-金库操作申请日志
             * </pre>
             */
            public Builder setTreasuryLogType(int value) {
                bitField1_ |= 0x00000020;
                treasuryLogType_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 treasury_log_type = 43;</code>
             * <p>
             * <pre>
             * 金库日志类型:1-金库操作申请日志
             * </pre>
             */
            public Builder clearTreasuryLogType() {
                bitField1_ = (bitField1_ & ~0x00000020);
                treasuryLogType_ = 0;
                onChanged();
                return this;
            }

            // optional int32 co_userid = 44;
            private int coUserid_;

            /**
             * <code>optional int32 co_userid = 44;</code>
             * <p>
             * <pre>
             * 2-金库授权审批日志
             * 3-金库动态码确认日志
             * 4-金库操作日志
             * 5-金库应急切换日志
             * 6-金库自身管理日志
             * 7-金库信息关联日志  提供给山西boss系统使用
             * </pre>
             */
            public boolean hasCoUserid() {
                return ((bitField1_ & 0x00000040) == 0x00000040);
            }

            /**
             * <code>optional int32 co_userid = 44;</code>
             * <p>
             * <pre>
             * 2-金库授权审批日志
             * 3-金库动态码确认日志
             * 4-金库操作日志
             * 5-金库应急切换日志
             * 6-金库自身管理日志
             * 7-金库信息关联日志  提供给山西boss系统使用
             * </pre>
             */
            public int getCoUserid() {
                return coUserid_;
            }

            /**
             * <code>optional int32 co_userid = 44;</code>
             * <p>
             * <pre>
             * 2-金库授权审批日志
             * 3-金库动态码确认日志
             * 4-金库操作日志
             * 5-金库应急切换日志
             * 6-金库自身管理日志
             * 7-金库信息关联日志  提供给山西boss系统使用
             * </pre>
             */
            public Builder setCoUserid(int value) {
                bitField1_ |= 0x00000040;
                coUserid_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 co_userid = 44;</code>
             * <p>
             * <pre>
             * 2-金库授权审批日志
             * 3-金库动态码确认日志
             * 4-金库操作日志
             * 5-金库应急切换日志
             * 6-金库自身管理日志
             * 7-金库信息关联日志  提供给山西boss系统使用
             * </pre>
             */
            public Builder clearCoUserid() {
                bitField1_ = (bitField1_ & ~0x00000040);
                coUserid_ = 0;
                onChanged();
                return this;
            }

            // optional bytes co_user_logname = 45;
            private com.google.protobuf.ByteString coUserLogname_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes co_user_logname = 45;</code>
             * <p>
             * <pre>
             * 协同操作人主帐号
             * </pre>
             */
            public boolean hasCoUserLogname() {
                return ((bitField1_ & 0x00000080) == 0x00000080);
            }

            /**
             * <code>optional bytes co_user_logname = 45;</code>
             * <p>
             * <pre>
             * 协同操作人主帐号
             * </pre>
             */
            public com.google.protobuf.ByteString getCoUserLogname() {
                return coUserLogname_;
            }

            /**
             * <code>optional bytes co_user_logname = 45;</code>
             * <p>
             * <pre>
             * 协同操作人主帐号
             * </pre>
             */
            public Builder setCoUserLogname(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField1_ |= 0x00000080;
                coUserLogname_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes co_user_logname = 45;</code>
             * <p>
             * <pre>
             * 协同操作人主帐号
             * </pre>
             */
            public Builder clearCoUserLogname() {
                bitField1_ = (bitField1_ & ~0x00000080);
                coUserLogname_ = getDefaultInstance().getCoUserLogname();
                onChanged();
                return this;
            }

            // optional bytes co_user_name = 46;
            private com.google.protobuf.ByteString coUserName_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes co_user_name = 46;</code>
             * <p>
             * <pre>
             * 协同操作人姓名
             * </pre>
             */
            public boolean hasCoUserName() {
                return ((bitField1_ & 0x00000100) == 0x00000100);
            }

            /**
             * <code>optional bytes co_user_name = 46;</code>
             * <p>
             * <pre>
             * 协同操作人姓名
             * </pre>
             */
            public com.google.protobuf.ByteString getCoUserName() {
                return coUserName_;
            }

            /**
             * <code>optional bytes co_user_name = 46;</code>
             * <p>
             * <pre>
             * 协同操作人姓名
             * </pre>
             */
            public Builder setCoUserName(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField1_ |= 0x00000100;
                coUserName_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes co_user_name = 46;</code>
             * <p>
             * <pre>
             * 协同操作人姓名
             * </pre>
             */
            public Builder clearCoUserName() {
                bitField1_ = (bitField1_ & ~0x00000100);
                coUserName_ = getDefaultInstance().getCoUserName();
                onChanged();
                return this;
            }

            // optional int32 co_user_org_id = 47;
            private int coUserOrgId_;

            /**
             * <code>optional int32 co_user_org_id = 47;</code>
             * <p>
             * <pre>
             * 协同操作人组织机构ID
             * </pre>
             */
            public boolean hasCoUserOrgId() {
                return ((bitField1_ & 0x00000200) == 0x00000200);
            }

            /**
             * <code>optional int32 co_user_org_id = 47;</code>
             * <p>
             * <pre>
             * 协同操作人组织机构ID
             * </pre>
             */
            public int getCoUserOrgId() {
                return coUserOrgId_;
            }

            /**
             * <code>optional int32 co_user_org_id = 47;</code>
             * <p>
             * <pre>
             * 协同操作人组织机构ID
             * </pre>
             */
            public Builder setCoUserOrgId(int value) {
                bitField1_ |= 0x00000200;
                coUserOrgId_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 co_user_org_id = 47;</code>
             * <p>
             * <pre>
             * 协同操作人组织机构ID
             * </pre>
             */
            public Builder clearCoUserOrgId() {
                bitField1_ = (bitField1_ & ~0x00000200);
                coUserOrgId_ = 0;
                onChanged();
                return this;
            }

            // optional bytes co_user_org_name = 48;
            private com.google.protobuf.ByteString coUserOrgName_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes co_user_org_name = 48;</code>
             * <p>
             * <pre>
             * 协同操作人组织机构名称
             * </pre>
             */
            public boolean hasCoUserOrgName() {
                return ((bitField1_ & 0x00000400) == 0x00000400);
            }

            /**
             * <code>optional bytes co_user_org_name = 48;</code>
             * <p>
             * <pre>
             * 协同操作人组织机构名称
             * </pre>
             */
            public com.google.protobuf.ByteString getCoUserOrgName() {
                return coUserOrgName_;
            }

            /**
             * <code>optional bytes co_user_org_name = 48;</code>
             * <p>
             * <pre>
             * 协同操作人组织机构名称
             * </pre>
             */
            public Builder setCoUserOrgName(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField1_ |= 0x00000400;
                coUserOrgName_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes co_user_org_name = 48;</code>
             * <p>
             * <pre>
             * 协同操作人组织机构名称
             * </pre>
             */
            public Builder clearCoUserOrgName() {
                bitField1_ = (bitField1_ & ~0x00000400);
                coUserOrgName_ = getDefaultInstance().getCoUserOrgName();
                onChanged();
                return this;
            }

            // optional bytes co_user_mobile = 49;
            private com.google.protobuf.ByteString coUserMobile_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes co_user_mobile = 49;</code>
             * <p>
             * <pre>
             * 协同操作人手机号码
             * </pre>
             */
            public boolean hasCoUserMobile() {
                return ((bitField1_ & 0x00000800) == 0x00000800);
            }

            /**
             * <code>optional bytes co_user_mobile = 49;</code>
             * <p>
             * <pre>
             * 协同操作人手机号码
             * </pre>
             */
            public com.google.protobuf.ByteString getCoUserMobile() {
                return coUserMobile_;
            }

            /**
             * <code>optional bytes co_user_mobile = 49;</code>
             * <p>
             * <pre>
             * 协同操作人手机号码
             * </pre>
             */
            public Builder setCoUserMobile(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField1_ |= 0x00000800;
                coUserMobile_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes co_user_mobile = 49;</code>
             * <p>
             * <pre>
             * 协同操作人手机号码
             * </pre>
             */
            public Builder clearCoUserMobile() {
                bitField1_ = (bitField1_ & ~0x00000800);
                coUserMobile_ = getDefaultInstance().getCoUserMobile();
                onChanged();
                return this;
            }

            // optional int32 treasury_scene_type = 50;
            private int treasurySceneType_;

            /**
             * <code>optional int32 treasury_scene_type = 50;</code>
             * <p>
             * <pre>
             * 金库场景类型:1:VPN登陆场景
             * </pre>
             */
            public boolean hasTreasurySceneType() {
                return ((bitField1_ & 0x00001000) == 0x00001000);
            }

            /**
             * <code>optional int32 treasury_scene_type = 50;</code>
             * <p>
             * <pre>
             * 金库场景类型:1:VPN登陆场景
             * </pre>
             */
            public int getTreasurySceneType() {
                return treasurySceneType_;
            }

            /**
             * <code>optional int32 treasury_scene_type = 50;</code>
             * <p>
             * <pre>
             * 金库场景类型:1:VPN登陆场景
             * </pre>
             */
            public Builder setTreasurySceneType(int value) {
                bitField1_ |= 0x00001000;
                treasurySceneType_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 treasury_scene_type = 50;</code>
             * <p>
             * <pre>
             * 金库场景类型:1:VPN登陆场景
             * </pre>
             */
            public Builder clearTreasurySceneType() {
                bitField1_ = (bitField1_ & ~0x00001000);
                treasurySceneType_ = 0;
                onChanged();
                return this;
            }

            // optional bytes treasury_scene_id = 51;
            private com.google.protobuf.ByteString treasurySceneId_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes treasury_scene_id = 51;</code>
             * <p>
             * <pre>
             * 2:内网登陆场景
             * 3:单点登陆场景
             * 4:高风险操作场景
             * 5:4A操作类场景
             * </pre>
             */
            public boolean hasTreasurySceneId() {
                return ((bitField1_ & 0x00002000) == 0x00002000);
            }

            /**
             * <code>optional bytes treasury_scene_id = 51;</code>
             * <p>
             * <pre>
             * 2:内网登陆场景
             * 3:单点登陆场景
             * 4:高风险操作场景
             * 5:4A操作类场景
             * </pre>
             */
            public com.google.protobuf.ByteString getTreasurySceneId() {
                return treasurySceneId_;
            }

            /**
             * <code>optional bytes treasury_scene_id = 51;</code>
             * <p>
             * <pre>
             * 2:内网登陆场景
             * 3:单点登陆场景
             * 4:高风险操作场景
             * 5:4A操作类场景
             * </pre>
             */
            public Builder setTreasurySceneId(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField1_ |= 0x00002000;
                treasurySceneId_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes treasury_scene_id = 51;</code>
             * <p>
             * <pre>
             * 2:内网登陆场景
             * 3:单点登陆场景
             * 4:高风险操作场景
             * 5:4A操作类场景
             * </pre>
             */
            public Builder clearTreasurySceneId() {
                bitField1_ = (bitField1_ & ~0x00002000);
                treasurySceneId_ = getDefaultInstance().getTreasurySceneId();
                onChanged();
                return this;
            }

            // optional bytes treasury_scene_name = 52;
            private com.google.protobuf.ByteString treasurySceneName_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes treasury_scene_name = 52;</code>
             * <p>
             * <pre>
             * 金库场景名称
             * </pre>
             */
            public boolean hasTreasurySceneName() {
                return ((bitField1_ & 0x00004000) == 0x00004000);
            }

            /**
             * <code>optional bytes treasury_scene_name = 52;</code>
             * <p>
             * <pre>
             * 金库场景名称
             * </pre>
             */
            public com.google.protobuf.ByteString getTreasurySceneName() {
                return treasurySceneName_;
            }

            /**
             * <code>optional bytes treasury_scene_name = 52;</code>
             * <p>
             * <pre>
             * 金库场景名称
             * </pre>
             */
            public Builder setTreasurySceneName(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField1_ |= 0x00004000;
                treasurySceneName_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes treasury_scene_name = 52;</code>
             * <p>
             * <pre>
             * 金库场景名称
             * </pre>
             */
            public Builder clearTreasurySceneName() {
                bitField1_ = (bitField1_ & ~0x00004000);
                treasurySceneName_ = getDefaultInstance().getTreasurySceneName();
                onChanged();
                return this;
            }

            // optional int32 treasury_auth_type = 53;
            private int treasuryAuthType_;

            /**
             * <code>optional int32 treasury_auth_type = 53;</code>
             * <p>
             * <pre>
             * 金库授权方式: 1:远程授权 2:现场授权 3:工单授权
             * </pre>
             */
            public boolean hasTreasuryAuthType() {
                return ((bitField1_ & 0x00008000) == 0x00008000);
            }

            /**
             * <code>optional int32 treasury_auth_type = 53;</code>
             * <p>
             * <pre>
             * 金库授权方式: 1:远程授权 2:现场授权 3:工单授权
             * </pre>
             */
            public int getTreasuryAuthType() {
                return treasuryAuthType_;
            }

            /**
             * <code>optional int32 treasury_auth_type = 53;</code>
             * <p>
             * <pre>
             * 金库授权方式: 1:远程授权 2:现场授权 3:工单授权
             * </pre>
             */
            public Builder setTreasuryAuthType(int value) {
                bitField1_ |= 0x00008000;
                treasuryAuthType_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 treasury_auth_type = 53;</code>
             * <p>
             * <pre>
             * 金库授权方式: 1:远程授权 2:现场授权 3:工单授权
             * </pre>
             */
            public Builder clearTreasuryAuthType() {
                bitField1_ = (bitField1_ & ~0x00008000);
                treasuryAuthType_ = 0;
                onChanged();
                return this;
            }

            // optional bytes access_type = 54;
            private com.google.protobuf.ByteString accessType_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes access_type = 54;</code>
             * <p>
             * <pre>
             * 金库访问方式
             * </pre>
             */
            public boolean hasAccessType() {
                return ((bitField1_ & 0x00010000) == 0x00010000);
            }

            /**
             * <code>optional bytes access_type = 54;</code>
             * <p>
             * <pre>
             * 金库访问方式
             * </pre>
             */
            public com.google.protobuf.ByteString getAccessType() {
                return accessType_;
            }

            /**
             * <code>optional bytes access_type = 54;</code>
             * <p>
             * <pre>
             * 金库访问方式
             * </pre>
             */
            public Builder setAccessType(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField1_ |= 0x00010000;
                accessType_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes access_type = 54;</code>
             * <p>
             * <pre>
             * 金库访问方式
             * </pre>
             */
            public Builder clearAccessType() {
                bitField1_ = (bitField1_ & ~0x00010000);
                accessType_ = getDefaultInstance().getAccessType();
                onChanged();
                return this;
            }

            // optional bytes apply_time_slot = 55;
            private com.google.protobuf.ByteString applyTimeSlot_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes apply_time_slot = 55;</code>
             * <p>
             * <pre>
             * 金库申请使用时间段
             * </pre>
             */
            public boolean hasApplyTimeSlot() {
                return ((bitField1_ & 0x00020000) == 0x00020000);
            }

            /**
             * <code>optional bytes apply_time_slot = 55;</code>
             * <p>
             * <pre>
             * 金库申请使用时间段
             * </pre>
             */
            public com.google.protobuf.ByteString getApplyTimeSlot() {
                return applyTimeSlot_;
            }

            /**
             * <code>optional bytes apply_time_slot = 55;</code>
             * <p>
             * <pre>
             * 金库申请使用时间段
             * </pre>
             */
            public Builder setApplyTimeSlot(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField1_ |= 0x00020000;
                applyTimeSlot_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes apply_time_slot = 55;</code>
             * <p>
             * <pre>
             * 金库申请使用时间段
             * </pre>
             */
            public Builder clearApplyTimeSlot() {
                bitField1_ = (bitField1_ & ~0x00020000);
                applyTimeSlot_ = getDefaultInstance().getApplyTimeSlot();
                onChanged();
                return this;
            }

            // optional int32 treasury_status = 56;
            private int treasuryStatus_;

            /**
             * <code>optional int32 treasury_status = 56;</code>
             * <p>
             * <pre>
             * 金库状态: 1:正常 0:应急 2：已授权 3：未知
             * </pre>
             */
            public boolean hasTreasuryStatus() {
                return ((bitField1_ & 0x00040000) == 0x00040000);
            }

            /**
             * <code>optional int32 treasury_status = 56;</code>
             * <p>
             * <pre>
             * 金库状态: 1:正常 0:应急 2：已授权 3：未知
             * </pre>
             */
            public int getTreasuryStatus() {
                return treasuryStatus_;
            }

            /**
             * <code>optional int32 treasury_status = 56;</code>
             * <p>
             * <pre>
             * 金库状态: 1:正常 0:应急 2：已授权 3：未知
             * </pre>
             */
            public Builder setTreasuryStatus(int value) {
                bitField1_ |= 0x00040000;
                treasuryStatus_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 treasury_status = 56;</code>
             * <p>
             * <pre>
             * 金库状态: 1:正常 0:应急 2：已授权 3：未知
             * </pre>
             */
            public Builder clearTreasuryStatus() {
                bitField1_ = (bitField1_ & ~0x00040000);
                treasuryStatus_ = 0;
                onChanged();
                return this;
            }

            // optional bytes special_service_num = 57;
            private com.google.protobuf.ByteString specialServiceNum_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes special_service_num = 57;</code>
             * <p>
             * <pre>
             * 金库特服码
             * </pre>
             */
            public boolean hasSpecialServiceNum() {
                return ((bitField1_ & 0x00080000) == 0x00080000);
            }

            /**
             * <code>optional bytes special_service_num = 57;</code>
             * <p>
             * <pre>
             * 金库特服码
             * </pre>
             */
            public com.google.protobuf.ByteString getSpecialServiceNum() {
                return specialServiceNum_;
            }

            /**
             * <code>optional bytes special_service_num = 57;</code>
             * <p>
             * <pre>
             * 金库特服码
             * </pre>
             */
            public Builder setSpecialServiceNum(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField1_ |= 0x00080000;
                specialServiceNum_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes special_service_num = 57;</code>
             * <p>
             * <pre>
             * 金库特服码
             * </pre>
             */
            public Builder clearSpecialServiceNum() {
                bitField1_ = (bitField1_ & ~0x00080000);
                specialServiceNum_ = getDefaultInstance().getSpecialServiceNum();
                onChanged();
                return this;
            }

            // optional bytes auth_result = 58;
            private com.google.protobuf.ByteString authResult_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes auth_result = 58;</code>
             * <p>
             * <pre>
             * 金库授权结果
             * </pre>
             */
            public boolean hasAuthResult() {
                return ((bitField1_ & 0x00100000) == 0x00100000);
            }

            /**
             * <code>optional bytes auth_result = 58;</code>
             * <p>
             * <pre>
             * 金库授权结果
             * </pre>
             */
            public com.google.protobuf.ByteString getAuthResult() {
                return authResult_;
            }

            /**
             * <code>optional bytes auth_result = 58;</code>
             * <p>
             * <pre>
             * 金库授权结果
             * </pre>
             */
            public Builder setAuthResult(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField1_ |= 0x00100000;
                authResult_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes auth_result = 58;</code>
             * <p>
             * <pre>
             * 金库授权结果
             * </pre>
             */
            public Builder clearAuthResult() {
                bitField1_ = (bitField1_ & ~0x00100000);
                authResult_ = getDefaultInstance().getAuthResult();
                onChanged();
                return this;
            }

            // optional bytes sms_content = 59;
            private com.google.protobuf.ByteString smsContent_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes sms_content = 59;</code>
             * <p>
             * <pre>
             * 金库短信内容
             * </pre>
             */
            public boolean hasSmsContent() {
                return ((bitField1_ & 0x00200000) == 0x00200000);
            }

            /**
             * <code>optional bytes sms_content = 59;</code>
             * <p>
             * <pre>
             * 金库短信内容
             * </pre>
             */
            public com.google.protobuf.ByteString getSmsContent() {
                return smsContent_;
            }

            /**
             * <code>optional bytes sms_content = 59;</code>
             * <p>
             * <pre>
             * 金库短信内容
             * </pre>
             */
            public Builder setSmsContent(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField1_ |= 0x00200000;
                smsContent_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes sms_content = 59;</code>
             * <p>
             * <pre>
             * 金库短信内容
             * </pre>
             */
            public Builder clearSmsContent() {
                bitField1_ = (bitField1_ & ~0x00200000);
                smsContent_ = getDefaultInstance().getSmsContent();
                onChanged();
                return this;
            }

            // optional int32 account_id = 60;
            private int accountId_;

            /**
             * <code>optional int32 account_id = 60;</code>
             * <p>
             * <pre>
             * 从帐号ID
             * </pre>
             */
            public boolean hasAccountId() {
                return ((bitField1_ & 0x00400000) == 0x00400000);
            }

            /**
             * <code>optional int32 account_id = 60;</code>
             * <p>
             * <pre>
             * 从帐号ID
             * </pre>
             */
            public int getAccountId() {
                return accountId_;
            }

            /**
             * <code>optional int32 account_id = 60;</code>
             * <p>
             * <pre>
             * 从帐号ID
             * </pre>
             */
            public Builder setAccountId(int value) {
                bitField1_ |= 0x00400000;
                accountId_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 account_id = 60;</code>
             * <p>
             * <pre>
             * 从帐号ID
             * </pre>
             */
            public Builder clearAccountId() {
                bitField1_ = (bitField1_ & ~0x00400000);
                accountId_ = 0;
                onChanged();
                return this;
            }

            // optional bytes account = 61;
            private com.google.protobuf.ByteString account_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes account = 61;</code>
             * <p>
             * <pre>
             * 从帐号
             * </pre>
             */
            public boolean hasAccount() {
                return ((bitField1_ & 0x00800000) == 0x00800000);
            }

            /**
             * <code>optional bytes account = 61;</code>
             * <p>
             * <pre>
             * 从帐号
             * </pre>
             */
            public com.google.protobuf.ByteString getAccount() {
                return account_;
            }

            /**
             * <code>optional bytes account = 61;</code>
             * <p>
             * <pre>
             * 从帐号
             * </pre>
             */
            public Builder setAccount(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField1_ |= 0x00800000;
                account_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes account = 61;</code>
             * <p>
             * <pre>
             * 从帐号
             * </pre>
             */
            public Builder clearAccount() {
                bitField1_ = (bitField1_ & ~0x00800000);
                account_ = getDefaultInstance().getAccount();
                onChanged();
                return this;
            }

            // optional bytes app_ouname = 62;
            private com.google.protobuf.ByteString appOuname_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes app_ouname = 62;</code>
             * <p>
             * <pre>
             * 从帐号组织
             * </pre>
             */
            public boolean hasAppOuname() {
                return ((bitField1_ & 0x01000000) == 0x01000000);
            }

            /**
             * <code>optional bytes app_ouname = 62;</code>
             * <p>
             * <pre>
             * 从帐号组织
             * </pre>
             */
            public com.google.protobuf.ByteString getAppOuname() {
                return appOuname_;
            }

            /**
             * <code>optional bytes app_ouname = 62;</code>
             * <p>
             * <pre>
             * 从帐号组织
             * </pre>
             */
            public Builder setAppOuname(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField1_ |= 0x01000000;
                appOuname_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes app_ouname = 62;</code>
             * <p>
             * <pre>
             * 从帐号组织
             * </pre>
             */
            public Builder clearAppOuname() {
                bitField1_ = (bitField1_ & ~0x01000000);
                appOuname_ = getDefaultInstance().getAppOuname();
                onChanged();
                return this;
            }

            // optional int32 account_type_id = 63;
            private int accountTypeId_;

            /**
             * <code>optional int32 account_type_id = 63;</code>
             * <p>
             * <pre>
             * 从帐号类型ID
             * </pre>
             */
            public boolean hasAccountTypeId() {
                return ((bitField1_ & 0x02000000) == 0x02000000);
            }

            /**
             * <code>optional int32 account_type_id = 63;</code>
             * <p>
             * <pre>
             * 从帐号类型ID
             * </pre>
             */
            public int getAccountTypeId() {
                return accountTypeId_;
            }

            /**
             * <code>optional int32 account_type_id = 63;</code>
             * <p>
             * <pre>
             * 从帐号类型ID
             * </pre>
             */
            public Builder setAccountTypeId(int value) {
                bitField1_ |= 0x02000000;
                accountTypeId_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 account_type_id = 63;</code>
             * <p>
             * <pre>
             * 从帐号类型ID
             * </pre>
             */
            public Builder clearAccountTypeId() {
                bitField1_ = (bitField1_ & ~0x02000000);
                accountTypeId_ = 0;
                onChanged();
                return this;
            }

            // optional bytes account_type_name = 64;
            private com.google.protobuf.ByteString accountTypeName_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes account_type_name = 64;</code>
             * <p>
             * <pre>
             * 从帐号类型名称
             * </pre>
             */
            public boolean hasAccountTypeName() {
                return ((bitField1_ & 0x04000000) == 0x04000000);
            }

            /**
             * <code>optional bytes account_type_name = 64;</code>
             * <p>
             * <pre>
             * 从帐号类型名称
             * </pre>
             */
            public com.google.protobuf.ByteString getAccountTypeName() {
                return accountTypeName_;
            }

            /**
             * <code>optional bytes account_type_name = 64;</code>
             * <p>
             * <pre>
             * 从帐号类型名称
             * </pre>
             */
            public Builder setAccountTypeName(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField1_ |= 0x04000000;
                accountTypeName_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes account_type_name = 64;</code>
             * <p>
             * <pre>
             * 从帐号类型名称
             * </pre>
             */
            public Builder clearAccountTypeName() {
                bitField1_ = (bitField1_ & ~0x04000000);
                accountTypeName_ = getDefaultInstance().getAccountTypeName();
                onChanged();
                return this;
            }

            // optional bytes account_region_code = 65;
            private com.google.protobuf.ByteString accountRegionCode_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes account_region_code = 65;</code>
             * <p>
             * <pre>
             * 从帐号地域编码
             * </pre>
             */
            public boolean hasAccountRegionCode() {
                return ((bitField1_ & 0x08000000) == 0x08000000);
            }

            /**
             * <code>optional bytes account_region_code = 65;</code>
             * <p>
             * <pre>
             * 从帐号地域编码
             * </pre>
             */
            public com.google.protobuf.ByteString getAccountRegionCode() {
                return accountRegionCode_;
            }

            /**
             * <code>optional bytes account_region_code = 65;</code>
             * <p>
             * <pre>
             * 从帐号地域编码
             * </pre>
             */
            public Builder setAccountRegionCode(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField1_ |= 0x08000000;
                accountRegionCode_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes account_region_code = 65;</code>
             * <p>
             * <pre>
             * 从帐号地域编码
             * </pre>
             */
            public Builder clearAccountRegionCode() {
                bitField1_ = (bitField1_ & ~0x08000000);
                accountRegionCode_ = getDefaultInstance().getAccountRegionCode();
                onChanged();
                return this;
            }

            // optional bytes account_region = 66;
            private com.google.protobuf.ByteString accountRegion_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes account_region = 66;</code>
             * <p>
             * <pre>
             * 从帐号地域
             * </pre>
             */
            public boolean hasAccountRegion() {
                return ((bitField1_ & 0x10000000) == 0x10000000);
            }

            /**
             * <code>optional bytes account_region = 66;</code>
             * <p>
             * <pre>
             * 从帐号地域
             * </pre>
             */
            public com.google.protobuf.ByteString getAccountRegion() {
                return accountRegion_;
            }

            /**
             * <code>optional bytes account_region = 66;</code>
             * <p>
             * <pre>
             * 从帐号地域
             * </pre>
             */
            public Builder setAccountRegion(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField1_ |= 0x10000000;
                accountRegion_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes account_region = 66;</code>
             * <p>
             * <pre>
             * 从帐号地域
             * </pre>
             */
            public Builder clearAccountRegion() {
                bitField1_ = (bitField1_ & ~0x10000000);
                accountRegion_ = getDefaultInstance().getAccountRegion();
                onChanged();
                return this;
            }

            // optional int32 account_status = 67;
            private int accountStatus_;

            /**
             * <code>optional int32 account_status = 67;</code>
             * <p>
             * <pre>
             * 从帐号状态
             * </pre>
             */
            public boolean hasAccountStatus() {
                return ((bitField1_ & 0x20000000) == 0x20000000);
            }

            /**
             * <code>optional int32 account_status = 67;</code>
             * <p>
             * <pre>
             * 从帐号状态
             * </pre>
             */
            public int getAccountStatus() {
                return accountStatus_;
            }

            /**
             * <code>optional int32 account_status = 67;</code>
             * <p>
             * <pre>
             * 从帐号状态
             * </pre>
             */
            public Builder setAccountStatus(int value) {
                bitField1_ |= 0x20000000;
                accountStatus_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 account_status = 67;</code>
             * <p>
             * <pre>
             * 从帐号状态
             * </pre>
             */
            public Builder clearAccountStatus() {
                bitField1_ = (bitField1_ & ~0x20000000);
                accountStatus_ = 0;
                onChanged();
                return this;
            }

            // required uint64 logtime_sec = 68;
            private long logtimeSec_;

            /**
             * <code>required uint64 logtime_sec = 68;</code>
             * <p>
             * <pre>
             * 操作时间：秒
             * </pre>
             */
            public boolean hasLogtimeSec() {
                return ((bitField1_ & 0x40000000) == 0x40000000);
            }

            /**
             * <code>required uint64 logtime_sec = 68;</code>
             * <p>
             * <pre>
             * 操作时间：秒
             * </pre>
             */
            public long getLogtimeSec() {
                return logtimeSec_;
            }

            /**
             * <code>required uint64 logtime_sec = 68;</code>
             * <p>
             * <pre>
             * 操作时间：秒
             * </pre>
             */
            public Builder setLogtimeSec(long value) {
                bitField1_ |= 0x40000000;
                logtimeSec_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required uint64 logtime_sec = 68;</code>
             * <p>
             * <pre>
             * 操作时间：秒
             * </pre>
             */
            public Builder clearLogtimeSec() {
                bitField1_ = (bitField1_ & ~0x40000000);
                logtimeSec_ = 0L;
                onChanged();
                return this;
            }

            // optional uint64 logtime_msec = 69;
            private long logtimeMsec_;

            /**
             * <code>optional uint64 logtime_msec = 69;</code>
             * <p>
             * <pre>
             * 操作时间：毫秒
             * </pre>
             */
            public boolean hasLogtimeMsec() {
                return ((bitField1_ & 0x80000000) == 0x80000000);
            }

            /**
             * <code>optional uint64 logtime_msec = 69;</code>
             * <p>
             * <pre>
             * 操作时间：毫秒
             * </pre>
             */
            public long getLogtimeMsec() {
                return logtimeMsec_;
            }

            /**
             * <code>optional uint64 logtime_msec = 69;</code>
             * <p>
             * <pre>
             * 操作时间：毫秒
             * </pre>
             */
            public Builder setLogtimeMsec(long value) {
                bitField1_ |= 0x80000000;
                logtimeMsec_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional uint64 logtime_msec = 69;</code>
             * <p>
             * <pre>
             * 操作时间：毫秒
             * </pre>
             */
            public Builder clearLogtimeMsec() {
                bitField1_ = (bitField1_ & ~0x80000000);
                logtimeMsec_ = 0L;
                onChanged();
                return this;
            }

            // optional bytes endtime = 70;
            private com.google.protobuf.ByteString endtime_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes endtime = 70;</code>
             * <p>
             * <pre>
             * 结束时间
             * </pre>
             */
            public boolean hasEndtime() {
                return ((bitField2_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>optional bytes endtime = 70;</code>
             * <p>
             * <pre>
             * 结束时间
             * </pre>
             */
            public com.google.protobuf.ByteString getEndtime() {
                return endtime_;
            }

            /**
             * <code>optional bytes endtime = 70;</code>
             * <p>
             * <pre>
             * 结束时间
             * </pre>
             */
            public Builder setEndtime(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField2_ |= 0x00000001;
                endtime_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes endtime = 70;</code>
             * <p>
             * <pre>
             * 结束时间
             * </pre>
             */
            public Builder clearEndtime() {
                bitField2_ = (bitField2_ & ~0x00000001);
                endtime_ = getDefaultInstance().getEndtime();
                onChanged();
                return this;
            }

            // optional uint64 gather_sec = 71;
            private long gatherSec_;

            /**
             * <code>optional uint64 gather_sec = 71;</code>
             * <p>
             * <pre>
             * 采集时间：秒
             * </pre>
             */
            public boolean hasGatherSec() {
                return ((bitField2_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>optional uint64 gather_sec = 71;</code>
             * <p>
             * <pre>
             * 采集时间：秒
             * </pre>
             */
            public long getGatherSec() {
                return gatherSec_;
            }

            /**
             * <code>optional uint64 gather_sec = 71;</code>
             * <p>
             * <pre>
             * 采集时间：秒
             * </pre>
             */
            public Builder setGatherSec(long value) {
                bitField2_ |= 0x00000002;
                gatherSec_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional uint64 gather_sec = 71;</code>
             * <p>
             * <pre>
             * 采集时间：秒
             * </pre>
             */
            public Builder clearGatherSec() {
                bitField2_ = (bitField2_ & ~0x00000002);
                gatherSec_ = 0L;
                onChanged();
                return this;
            }

            // optional uint64 gather_msec = 72;
            private long gatherMsec_;

            /**
             * <code>optional uint64 gather_msec = 72;</code>
             * <p>
             * <pre>
             * 采集时间：毫秒
             * </pre>
             */
            public boolean hasGatherMsec() {
                return ((bitField2_ & 0x00000004) == 0x00000004);
            }

            /**
             * <code>optional uint64 gather_msec = 72;</code>
             * <p>
             * <pre>
             * 采集时间：毫秒
             * </pre>
             */
            public long getGatherMsec() {
                return gatherMsec_;
            }

            /**
             * <code>optional uint64 gather_msec = 72;</code>
             * <p>
             * <pre>
             * 采集时间：毫秒
             * </pre>
             */
            public Builder setGatherMsec(long value) {
                bitField2_ |= 0x00000004;
                gatherMsec_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional uint64 gather_msec = 72;</code>
             * <p>
             * <pre>
             * 采集时间：毫秒
             * </pre>
             */
            public Builder clearGatherMsec() {
                bitField2_ = (bitField2_ & ~0x00000004);
                gatherMsec_ = 0L;
                onChanged();
                return this;
            }

            // optional bytes sip = 73;
            private com.google.protobuf.ByteString sip_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes sip = 73;</code>
             * <p>
             * <pre>
             * 源IP，必须转化为整数后再进行传送，避免非法的IP地址格式
             * </pre>
             */
            public boolean hasSip() {
                return ((bitField2_ & 0x00000008) == 0x00000008);
            }

            /**
             * <code>optional bytes sip = 73;</code>
             * <p>
             * <pre>
             * 源IP，必须转化为整数后再进行传送，避免非法的IP地址格式
             * </pre>
             */
            public com.google.protobuf.ByteString getSip() {
                return sip_;
            }

            /**
             * <code>optional bytes sip = 73;</code>
             * <p>
             * <pre>
             * 源IP，必须转化为整数后再进行传送，避免非法的IP地址格式
             * </pre>
             */
            public Builder setSip(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField2_ |= 0x00000008;
                sip_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes sip = 73;</code>
             * <p>
             * <pre>
             * 源IP，必须转化为整数后再进行传送，避免非法的IP地址格式
             * </pre>
             */
            public Builder clearSip() {
                bitField2_ = (bitField2_ & ~0x00000008);
                sip_ = getDefaultInstance().getSip();
                onChanged();
                return this;
            }

            // optional bytes smac = 74;
            private com.google.protobuf.ByteString smac_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes smac = 74;</code>
             * <p>
             * <pre>
             * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
             * </pre>
             */
            public boolean hasSmac() {
                return ((bitField2_ & 0x00000010) == 0x00000010);
            }

            /**
             * <code>optional bytes smac = 74;</code>
             * <p>
             * <pre>
             * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
             * </pre>
             */
            public com.google.protobuf.ByteString getSmac() {
                return smac_;
            }

            /**
             * <code>optional bytes smac = 74;</code>
             * <p>
             * <pre>
             * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
             * </pre>
             */
            public Builder setSmac(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField2_ |= 0x00000010;
                smac_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes smac = 74;</code>
             * <p>
             * <pre>
             * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
             * </pre>
             */
            public Builder clearSmac() {
                bitField2_ = (bitField2_ & ~0x00000010);
                smac_ = getDefaultInstance().getSmac();
                onChanged();
                return this;
            }

            // optional uint32 sport = 75;
            private int sport_;

            /**
             * <code>optional uint32 sport = 75;</code>
             * <p>
             * <pre>
             * 源端口
             * </pre>
             */
            public boolean hasSport() {
                return ((bitField2_ & 0x00000020) == 0x00000020);
            }

            /**
             * <code>optional uint32 sport = 75;</code>
             * <p>
             * <pre>
             * 源端口
             * </pre>
             */
            public int getSport() {
                return sport_;
            }

            /**
             * <code>optional uint32 sport = 75;</code>
             * <p>
             * <pre>
             * 源端口
             * </pre>
             */
            public Builder setSport(int value) {
                bitField2_ |= 0x00000020;
                sport_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional uint32 sport = 75;</code>
             * <p>
             * <pre>
             * 源端口
             * </pre>
             */
            public Builder clearSport() {
                bitField2_ = (bitField2_ & ~0x00000020);
                sport_ = 0;
                onChanged();
                return this;
            }

            // optional bytes dip = 76;
            private com.google.protobuf.ByteString dip_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes dip = 76;</code>
             * <p>
             * <pre>
             * 目的IP，必须转化为整数后再进行传送，避免非法的IP地址格式
             * </pre>
             */
            public boolean hasDip() {
                return ((bitField2_ & 0x00000040) == 0x00000040);
            }

            /**
             * <code>optional bytes dip = 76;</code>
             * <p>
             * <pre>
             * 目的IP，必须转化为整数后再进行传送，避免非法的IP地址格式
             * </pre>
             */
            public com.google.protobuf.ByteString getDip() {
                return dip_;
            }

            /**
             * <code>optional bytes dip = 76;</code>
             * <p>
             * <pre>
             * 目的IP，必须转化为整数后再进行传送，避免非法的IP地址格式
             * </pre>
             */
            public Builder setDip(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField2_ |= 0x00000040;
                dip_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes dip = 76;</code>
             * <p>
             * <pre>
             * 目的IP，必须转化为整数后再进行传送，避免非法的IP地址格式
             * </pre>
             */
            public Builder clearDip() {
                bitField2_ = (bitField2_ & ~0x00000040);
                dip_ = getDefaultInstance().getDip();
                onChanged();
                return this;
            }

            // optional bytes dmac = 77;
            private com.google.protobuf.ByteString dmac_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes dmac = 77;</code>
             * <p>
             * <pre>
             * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
             * </pre>
             */
            public boolean hasDmac() {
                return ((bitField2_ & 0x00000080) == 0x00000080);
            }

            /**
             * <code>optional bytes dmac = 77;</code>
             * <p>
             * <pre>
             * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
             * </pre>
             */
            public com.google.protobuf.ByteString getDmac() {
                return dmac_;
            }

            /**
             * <code>optional bytes dmac = 77;</code>
             * <p>
             * <pre>
             * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
             * </pre>
             */
            public Builder setDmac(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField2_ |= 0x00000080;
                dmac_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes dmac = 77;</code>
             * <p>
             * <pre>
             * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
             * </pre>
             */
            public Builder clearDmac() {
                bitField2_ = (bitField2_ & ~0x00000080);
                dmac_ = getDefaultInstance().getDmac();
                onChanged();
                return this;
            }

            // optional uint32 dport = 78;
            private int dport_;

            /**
             * <code>optional uint32 dport = 78;</code>
             * <p>
             * <pre>
             * 目的端口
             * </pre>
             */
            public boolean hasDport() {
                return ((bitField2_ & 0x00000100) == 0x00000100);
            }

            /**
             * <code>optional uint32 dport = 78;</code>
             * <p>
             * <pre>
             * 目的端口
             * </pre>
             */
            public int getDport() {
                return dport_;
            }

            /**
             * <code>optional uint32 dport = 78;</code>
             * <p>
             * <pre>
             * 目的端口
             * </pre>
             */
            public Builder setDport(int value) {
                bitField2_ |= 0x00000100;
                dport_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional uint32 dport = 78;</code>
             * <p>
             * <pre>
             * 目的端口
             * </pre>
             */
            public Builder clearDport() {
                bitField2_ = (bitField2_ & ~0x00000100);
                dport_ = 0;
                onChanged();
                return this;
            }

            // optional int32 eventid = 79;
            private int eventid_;

            /**
             * <code>optional int32 eventid = 79;</code>
             * <p>
             * <pre>
             * 事件ID，原有版本中有用，现不用
             * </pre>
             */
            public boolean hasEventid() {
                return ((bitField2_ & 0x00000200) == 0x00000200);
            }

            /**
             * <code>optional int32 eventid = 79;</code>
             * <p>
             * <pre>
             * 事件ID，原有版本中有用，现不用
             * </pre>
             */
            public int getEventid() {
                return eventid_;
            }

            /**
             * <code>optional int32 eventid = 79;</code>
             * <p>
             * <pre>
             * 事件ID，原有版本中有用，现不用
             * </pre>
             */
            public Builder setEventid(int value) {
                bitField2_ |= 0x00000200;
                eventid_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 eventid = 79;</code>
             * <p>
             * <pre>
             * 事件ID，原有版本中有用，现不用
             * </pre>
             */
            public Builder clearEventid() {
                bitField2_ = (bitField2_ & ~0x00000200);
                eventid_ = 0;
                onChanged();
                return this;
            }

            // optional .sp.RISK_LEVEL risk_level = 80;
            private sp.AuditEnum.RISK_LEVEL riskLevel_ = sp.AuditEnum.RISK_LEVEL.RED;

            /**
             * <code>optional .sp.RISK_LEVEL risk_level = 80;</code>
             * <p>
             * <pre>
             * 事件级别：标准化之后，每个操作均有一个级别
             * </pre>
             */
            public boolean hasRiskLevel() {
                return ((bitField2_ & 0x00000400) == 0x00000400);
            }

            /**
             * <code>optional .sp.RISK_LEVEL risk_level = 80;</code>
             * <p>
             * <pre>
             * 事件级别：标准化之后，每个操作均有一个级别
             * </pre>
             */
            public sp.AuditEnum.RISK_LEVEL getRiskLevel() {
                return riskLevel_;
            }

            /**
             * <code>optional .sp.RISK_LEVEL risk_level = 80;</code>
             * <p>
             * <pre>
             * 事件级别：标准化之后，每个操作均有一个级别
             * </pre>
             */
            public Builder setRiskLevel(sp.AuditEnum.RISK_LEVEL value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField2_ |= 0x00000400;
                riskLevel_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional .sp.RISK_LEVEL risk_level = 80;</code>
             * <p>
             * <pre>
             * 事件级别：标准化之后，每个操作均有一个级别
             * </pre>
             */
            public Builder clearRiskLevel() {
                bitField2_ = (bitField2_ & ~0x00000400);
                riskLevel_ = sp.AuditEnum.RISK_LEVEL.RED;
                onChanged();
                return this;
            }

            // optional bytes operate = 81;
            private com.google.protobuf.ByteString operate_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes operate = 81;</code>
             * <p>
             * <pre>
             * 操作
             * </pre>
             */
            public boolean hasOperate() {
                return ((bitField2_ & 0x00000800) == 0x00000800);
            }

            /**
             * <code>optional bytes operate = 81;</code>
             * <p>
             * <pre>
             * 操作
             * </pre>
             */
            public com.google.protobuf.ByteString getOperate() {
                return operate_;
            }

            /**
             * <code>optional bytes operate = 81;</code>
             * <p>
             * <pre>
             * 操作
             * </pre>
             */
            public Builder setOperate(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField2_ |= 0x00000800;
                operate_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes operate = 81;</code>
             * <p>
             * <pre>
             * 操作
             * </pre>
             */
            public Builder clearOperate() {
                bitField2_ = (bitField2_ & ~0x00000800);
                operate_ = getDefaultInstance().getOperate();
                onChanged();
                return this;
            }

            // optional bytes obj_id = 82;
            private com.google.protobuf.ByteString objId_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes obj_id = 82;</code>
             * <p>
             * <pre>
             * 操作对象ID，一个UUID值，IAM日志中用
             * </pre>
             */
            public boolean hasObjId() {
                return ((bitField2_ & 0x00001000) == 0x00001000);
            }

            /**
             * <code>optional bytes obj_id = 82;</code>
             * <p>
             * <pre>
             * 操作对象ID，一个UUID值，IAM日志中用
             * </pre>
             */
            public com.google.protobuf.ByteString getObjId() {
                return objId_;
            }

            /**
             * <code>optional bytes obj_id = 82;</code>
             * <p>
             * <pre>
             * 操作对象ID，一个UUID值，IAM日志中用
             * </pre>
             */
            public Builder setObjId(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField2_ |= 0x00001000;
                objId_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes obj_id = 82;</code>
             * <p>
             * <pre>
             * 操作对象ID，一个UUID值，IAM日志中用
             * </pre>
             */
            public Builder clearObjId() {
                bitField2_ = (bitField2_ & ~0x00001000);
                objId_ = getDefaultInstance().getObjId();
                onChanged();
                return this;
            }

            // optional bytes obj = 83;
            private com.google.protobuf.ByteString obj_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes obj = 83;</code>
             * <p>
             * <pre>
             * 操作对象
             * </pre>
             */
            public boolean hasObj() {
                return ((bitField2_ & 0x00002000) == 0x00002000);
            }

            /**
             * <code>optional bytes obj = 83;</code>
             * <p>
             * <pre>
             * 操作对象
             * </pre>
             */
            public com.google.protobuf.ByteString getObj() {
                return obj_;
            }

            /**
             * <code>optional bytes obj = 83;</code>
             * <p>
             * <pre>
             * 操作对象
             * </pre>
             */
            public Builder setObj(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField2_ |= 0x00002000;
                obj_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes obj = 83;</code>
             * <p>
             * <pre>
             * 操作对象
             * </pre>
             */
            public Builder clearObj() {
                bitField2_ = (bitField2_ & ~0x00002000);
                obj_ = getDefaultInstance().getObj();
                onChanged();
                return this;
            }

            // optional bytes obj_parent_id = 84;
            private com.google.protobuf.ByteString objParentId_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes obj_parent_id = 84;</code>
             * <p>
             * <pre>
             * 操作对象父ID，IAM日志中用
             * </pre>
             */
            public boolean hasObjParentId() {
                return ((bitField2_ & 0x00004000) == 0x00004000);
            }

            /**
             * <code>optional bytes obj_parent_id = 84;</code>
             * <p>
             * <pre>
             * 操作对象父ID，IAM日志中用
             * </pre>
             */
            public com.google.protobuf.ByteString getObjParentId() {
                return objParentId_;
            }

            /**
             * <code>optional bytes obj_parent_id = 84;</code>
             * <p>
             * <pre>
             * 操作对象父ID，IAM日志中用
             * </pre>
             */
            public Builder setObjParentId(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField2_ |= 0x00004000;
                objParentId_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes obj_parent_id = 84;</code>
             * <p>
             * <pre>
             * 操作对象父ID，IAM日志中用
             * </pre>
             */
            public Builder clearObjParentId() {
                bitField2_ = (bitField2_ & ~0x00004000);
                objParentId_ = getDefaultInstance().getObjParentId();
                onChanged();
                return this;
            }

            // optional bytes obj_parent_name = 85;
            private com.google.protobuf.ByteString objParentName_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes obj_parent_name = 85;</code>
             * <p>
             * <pre>
             * 操作对象父名称，IAM日志中用
             * </pre>
             */
            public boolean hasObjParentName() {
                return ((bitField2_ & 0x00008000) == 0x00008000);
            }

            /**
             * <code>optional bytes obj_parent_name = 85;</code>
             * <p>
             * <pre>
             * 操作对象父名称，IAM日志中用
             * </pre>
             */
            public com.google.protobuf.ByteString getObjParentName() {
                return objParentName_;
            }

            /**
             * <code>optional bytes obj_parent_name = 85;</code>
             * <p>
             * <pre>
             * 操作对象父名称，IAM日志中用
             * </pre>
             */
            public Builder setObjParentName(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField2_ |= 0x00008000;
                objParentName_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes obj_parent_name = 85;</code>
             * <p>
             * <pre>
             * 操作对象父名称，IAM日志中用
             * </pre>
             */
            public Builder clearObjParentName() {
                bitField2_ = (bitField2_ & ~0x00008000);
                objParentName_ = getDefaultInstance().getObjParentName();
                onChanged();
                return this;
            }

            // optional bytes objectstation_code = 86;
            private com.google.protobuf.ByteString objectstationCode_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes objectstation_code = 86;</code>
             * <p>
             * <pre>
             * 操作对象岗位ID，IAM日志中用  原来为INT型?
             * </pre>
             */
            public boolean hasObjectstationCode() {
                return ((bitField2_ & 0x00010000) == 0x00010000);
            }

            /**
             * <code>optional bytes objectstation_code = 86;</code>
             * <p>
             * <pre>
             * 操作对象岗位ID，IAM日志中用  原来为INT型?
             * </pre>
             */
            public com.google.protobuf.ByteString getObjectstationCode() {
                return objectstationCode_;
            }

            /**
             * <code>optional bytes objectstation_code = 86;</code>
             * <p>
             * <pre>
             * 操作对象岗位ID，IAM日志中用  原来为INT型?
             * </pre>
             */
            public Builder setObjectstationCode(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField2_ |= 0x00010000;
                objectstationCode_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes objectstation_code = 86;</code>
             * <p>
             * <pre>
             * 操作对象岗位ID，IAM日志中用  原来为INT型?
             * </pre>
             */
            public Builder clearObjectstationCode() {
                bitField2_ = (bitField2_ & ~0x00010000);
                objectstationCode_ = getDefaultInstance().getObjectstationCode();
                onChanged();
                return this;
            }

            // optional bytes objectstation_name = 87;
            private com.google.protobuf.ByteString objectstationName_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes objectstation_name = 87;</code>
             * <p>
             * <pre>
             * 操作对象岗位，IAM日志中用
             * </pre>
             */
            public boolean hasObjectstationName() {
                return ((bitField2_ & 0x00020000) == 0x00020000);
            }

            /**
             * <code>optional bytes objectstation_name = 87;</code>
             * <p>
             * <pre>
             * 操作对象岗位，IAM日志中用
             * </pre>
             */
            public com.google.protobuf.ByteString getObjectstationName() {
                return objectstationName_;
            }

            /**
             * <code>optional bytes objectstation_name = 87;</code>
             * <p>
             * <pre>
             * 操作对象岗位，IAM日志中用
             * </pre>
             */
            public Builder setObjectstationName(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField2_ |= 0x00020000;
                objectstationName_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes objectstation_name = 87;</code>
             * <p>
             * <pre>
             * 操作对象岗位，IAM日志中用
             * </pre>
             */
            public Builder clearObjectstationName() {
                bitField2_ = (bitField2_ & ~0x00020000);
                objectstationName_ = getDefaultInstance().getObjectstationName();
                onChanged();
                return this;
            }

            // optional bytes result = 88;
            private com.google.protobuf.ByteString result_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes result = 88;</code>
             * <p>
             * <pre>
             * 操作结果
             * </pre>
             */
            public boolean hasResult() {
                return ((bitField2_ & 0x00040000) == 0x00040000);
            }

            /**
             * <code>optional bytes result = 88;</code>
             * <p>
             * <pre>
             * 操作结果
             * </pre>
             */
            public com.google.protobuf.ByteString getResult() {
                return result_;
            }

            /**
             * <code>optional bytes result = 88;</code>
             * <p>
             * <pre>
             * 操作结果
             * </pre>
             */
            public Builder setResult(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField2_ |= 0x00040000;
                result_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes result = 88;</code>
             * <p>
             * <pre>
             * 操作结果
             * </pre>
             */
            public Builder clearResult() {
                bitField2_ = (bitField2_ & ~0x00040000);
                result_ = getDefaultInstance().getResult();
                onChanged();
                return this;
            }

            // optional int32 retcode = 89;
            private int retcode_;

            /**
             * <code>optional int32 retcode = 89;</code>
             * <p>
             * <pre>
             * 操作返回值
             * </pre>
             */
            public boolean hasRetcode() {
                return ((bitField2_ & 0x00080000) == 0x00080000);
            }

            /**
             * <code>optional int32 retcode = 89;</code>
             * <p>
             * <pre>
             * 操作返回值
             * </pre>
             */
            public int getRetcode() {
                return retcode_;
            }

            /**
             * <code>optional int32 retcode = 89;</code>
             * <p>
             * <pre>
             * 操作返回值
             * </pre>
             */
            public Builder setRetcode(int value) {
                bitField2_ |= 0x00080000;
                retcode_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 retcode = 89;</code>
             * <p>
             * <pre>
             * 操作返回值
             * </pre>
             */
            public Builder clearRetcode() {
                bitField2_ = (bitField2_ & ~0x00080000);
                retcode_ = 0;
                onChanged();
                return this;
            }

            // optional bytes processname = 90;
            private com.google.protobuf.ByteString processname_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes processname = 90;</code>
             * <p>
             * <pre>
             * 进程名
             * </pre>
             */
            public boolean hasProcessname() {
                return ((bitField2_ & 0x00100000) == 0x00100000);
            }

            /**
             * <code>optional bytes processname = 90;</code>
             * <p>
             * <pre>
             * 进程名
             * </pre>
             */
            public com.google.protobuf.ByteString getProcessname() {
                return processname_;
            }

            /**
             * <code>optional bytes processname = 90;</code>
             * <p>
             * <pre>
             * 进程名
             * </pre>
             */
            public Builder setProcessname(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField2_ |= 0x00100000;
                processname_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes processname = 90;</code>
             * <p>
             * <pre>
             * 进程名
             * </pre>
             */
            public Builder clearProcessname() {
                bitField2_ = (bitField2_ & ~0x00100000);
                processname_ = getDefaultInstance().getProcessname();
                onChanged();
                return this;
            }

            // optional bytes workinfo = 91;
            private com.google.protobuf.ByteString workinfo_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes workinfo = 91;</code>
             * <p>
             * <pre>
             * 工单信息
             * </pre>
             */
            public boolean hasWorkinfo() {
                return ((bitField2_ & 0x00200000) == 0x00200000);
            }

            /**
             * <code>optional bytes workinfo = 91;</code>
             * <p>
             * <pre>
             * 工单信息
             * </pre>
             */
            public com.google.protobuf.ByteString getWorkinfo() {
                return workinfo_;
            }

            /**
             * <code>optional bytes workinfo = 91;</code>
             * <p>
             * <pre>
             * 工单信息
             * </pre>
             */
            public Builder setWorkinfo(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField2_ |= 0x00200000;
                workinfo_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes workinfo = 91;</code>
             * <p>
             * <pre>
             * 工单信息
             * </pre>
             */
            public Builder clearWorkinfo() {
                bitField2_ = (bitField2_ & ~0x00200000);
                workinfo_ = getDefaultInstance().getWorkinfo();
                onChanged();
                return this;
            }

            // optional bytes logreason = 92;
            private com.google.protobuf.ByteString logreason_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes logreason = 92;</code>
             * <p>
             * <pre>
             * 操作原因
             * </pre>
             */
            public boolean hasLogreason() {
                return ((bitField2_ & 0x00400000) == 0x00400000);
            }

            /**
             * <code>optional bytes logreason = 92;</code>
             * <p>
             * <pre>
             * 操作原因
             * </pre>
             */
            public com.google.protobuf.ByteString getLogreason() {
                return logreason_;
            }

            /**
             * <code>optional bytes logreason = 92;</code>
             * <p>
             * <pre>
             * 操作原因
             * </pre>
             */
            public Builder setLogreason(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField2_ |= 0x00400000;
                logreason_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes logreason = 92;</code>
             * <p>
             * <pre>
             * 操作原因
             * </pre>
             */
            public Builder clearLogreason() {
                bitField2_ = (bitField2_ & ~0x00400000);
                logreason_ = getDefaultInstance().getLogreason();
                onChanged();
                return this;
            }

            // optional bytes vdata = 93;
            private com.google.protobuf.ByteString vdata_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes vdata = 93;</code>
             * <p>
             * <pre>
             * 原始日志
             * </pre>
             */
            public boolean hasVdata() {
                return ((bitField2_ & 0x00800000) == 0x00800000);
            }

            /**
             * <code>optional bytes vdata = 93;</code>
             * <p>
             * <pre>
             * 原始日志
             * </pre>
             */
            public com.google.protobuf.ByteString getVdata() {
                return vdata_;
            }

            /**
             * <code>optional bytes vdata = 93;</code>
             * <p>
             * <pre>
             * 原始日志
             * </pre>
             */
            public Builder setVdata(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField2_ |= 0x00800000;
                vdata_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes vdata = 93;</code>
             * <p>
             * <pre>
             * 原始日志
             * </pre>
             */
            public Builder clearVdata() {
                bitField2_ = (bitField2_ & ~0x00800000);
                vdata_ = getDefaultInstance().getVdata();
                onChanged();
                return this;
            }

            // optional int32 facility = 94;
            private int facility_;

            /**
             * <code>optional int32 facility = 94;</code>
             * <p>
             * <pre>
             * 原始日志类型
             * </pre>
             */
            public boolean hasFacility() {
                return ((bitField2_ & 0x01000000) == 0x01000000);
            }

            /**
             * <code>optional int32 facility = 94;</code>
             * <p>
             * <pre>
             * 原始日志类型
             * </pre>
             */
            public int getFacility() {
                return facility_;
            }

            /**
             * <code>optional int32 facility = 94;</code>
             * <p>
             * <pre>
             * 原始日志类型
             * </pre>
             */
            public Builder setFacility(int value) {
                bitField2_ |= 0x01000000;
                facility_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 facility = 94;</code>
             * <p>
             * <pre>
             * 原始日志类型
             * </pre>
             */
            public Builder clearFacility() {
                bitField2_ = (bitField2_ & ~0x01000000);
                facility_ = 0;
                onChanged();
                return this;
            }

            // optional int32 severity = 95;
            private int severity_;

            /**
             * <code>optional int32 severity = 95;</code>
             * <p>
             * <pre>
             * 原始日志级别
             * </pre>
             */
            public boolean hasSeverity() {
                return ((bitField2_ & 0x02000000) == 0x02000000);
            }

            /**
             * <code>optional int32 severity = 95;</code>
             * <p>
             * <pre>
             * 原始日志级别
             * </pre>
             */
            public int getSeverity() {
                return severity_;
            }

            /**
             * <code>optional int32 severity = 95;</code>
             * <p>
             * <pre>
             * 原始日志级别
             * </pre>
             */
            public Builder setSeverity(int value) {
                bitField2_ |= 0x02000000;
                severity_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 severity = 95;</code>
             * <p>
             * <pre>
             * 原始日志级别
             * </pre>
             */
            public Builder clearSeverity() {
                bitField2_ = (bitField2_ & ~0x02000000);
                severity_ = 0;
                onChanged();
                return this;
            }

            // optional bytes memo = 96;
            private com.google.protobuf.ByteString memo_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes memo = 96;</code>
             * <p>
             * <pre>
             * 描述
             * </pre>
             */
            public boolean hasMemo() {
                return ((bitField2_ & 0x04000000) == 0x04000000);
            }

            /**
             * <code>optional bytes memo = 96;</code>
             * <p>
             * <pre>
             * 描述
             * </pre>
             */
            public com.google.protobuf.ByteString getMemo() {
                return memo_;
            }

            /**
             * <code>optional bytes memo = 96;</code>
             * <p>
             * <pre>
             * 描述
             * </pre>
             */
            public Builder setMemo(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField2_ |= 0x04000000;
                memo_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes memo = 96;</code>
             * <p>
             * <pre>
             * 描述
             * </pre>
             */
            public Builder clearMemo() {
                bitField2_ = (bitField2_ & ~0x04000000);
                memo_ = getDefaultInstance().getMemo();
                onChanged();
                return this;
            }

            // optional bytes hbasession = 97;
            private com.google.protobuf.ByteString hbasession_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes hbasession = 97;</code>
             * <p>
             * <pre>
             * 原始日志(金库)会话ID
             * </pre>
             */
            public boolean hasHbasession() {
                return ((bitField2_ & 0x08000000) == 0x08000000);
            }

            /**
             * <code>optional bytes hbasession = 97;</code>
             * <p>
             * <pre>
             * 原始日志(金库)会话ID
             * </pre>
             */
            public com.google.protobuf.ByteString getHbasession() {
                return hbasession_;
            }

            /**
             * <code>optional bytes hbasession = 97;</code>
             * <p>
             * <pre>
             * 原始日志(金库)会话ID
             * </pre>
             */
            public Builder setHbasession(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField2_ |= 0x08000000;
                hbasession_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes hbasession = 97;</code>
             * <p>
             * <pre>
             * 原始日志(金库)会话ID
             * </pre>
             */
            public Builder clearHbasession() {
                bitField2_ = (bitField2_ & ~0x08000000);
                hbasession_ = getDefaultInstance().getHbasession();
                onChanged();
                return this;
            }

            // optional int32 op_type_id = 98;
            private int opTypeId_;

            /**
             * <code>optional int32 op_type_id = 98;</code>
             * <p>
             * <pre>
             * 操作类型ID
             * </pre>
             */
            public boolean hasOpTypeId() {
                return ((bitField2_ & 0x10000000) == 0x10000000);
            }

            /**
             * <code>optional int32 op_type_id = 98;</code>
             * <p>
             * <pre>
             * 操作类型ID
             * </pre>
             */
            public int getOpTypeId() {
                return opTypeId_;
            }

            /**
             * <code>optional int32 op_type_id = 98;</code>
             * <p>
             * <pre>
             * 操作类型ID
             * </pre>
             */
            public Builder setOpTypeId(int value) {
                bitField2_ |= 0x10000000;
                opTypeId_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 op_type_id = 98;</code>
             * <p>
             * <pre>
             * 操作类型ID
             * </pre>
             */
            public Builder clearOpTypeId() {
                bitField2_ = (bitField2_ & ~0x10000000);
                opTypeId_ = 0;
                onChanged();
                return this;
            }

            // optional bytes op_type = 99;
            private com.google.protobuf.ByteString opType_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes op_type = 99;</code>
             * <p>
             * <pre>
             * 操作类型
             * </pre>
             */
            public boolean hasOpType() {
                return ((bitField2_ & 0x20000000) == 0x20000000);
            }

            /**
             * <code>optional bytes op_type = 99;</code>
             * <p>
             * <pre>
             * 操作类型
             * </pre>
             */
            public com.google.protobuf.ByteString getOpType() {
                return opType_;
            }

            /**
             * <code>optional bytes op_type = 99;</code>
             * <p>
             * <pre>
             * 操作类型
             * </pre>
             */
            public Builder setOpType(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField2_ |= 0x20000000;
                opType_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes op_type = 99;</code>
             * <p>
             * <pre>
             * 操作类型
             * </pre>
             */
            public Builder clearOpType() {
                bitField2_ = (bitField2_ & ~0x20000000);
                opType_ = getDefaultInstance().getOpType();
                onChanged();
                return this;
            }

            // optional int32 op_class_id = 100;
            private int opClassId_;

            /**
             * <code>optional int32 op_class_id = 100;</code>
             * <p>
             * <pre>
             * 操作子类ID
             * </pre>
             */
            public boolean hasOpClassId() {
                return ((bitField2_ & 0x40000000) == 0x40000000);
            }

            /**
             * <code>optional int32 op_class_id = 100;</code>
             * <p>
             * <pre>
             * 操作子类ID
             * </pre>
             */
            public int getOpClassId() {
                return opClassId_;
            }

            /**
             * <code>optional int32 op_class_id = 100;</code>
             * <p>
             * <pre>
             * 操作子类ID
             * </pre>
             */
            public Builder setOpClassId(int value) {
                bitField2_ |= 0x40000000;
                opClassId_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 op_class_id = 100;</code>
             * <p>
             * <pre>
             * 操作子类ID
             * </pre>
             */
            public Builder clearOpClassId() {
                bitField2_ = (bitField2_ & ~0x40000000);
                opClassId_ = 0;
                onChanged();
                return this;
            }

            // optional bytes op_class = 101;
            private com.google.protobuf.ByteString opClass_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes op_class = 101;</code>
             * <p>
             * <pre>
             * 操作子类
             * </pre>
             */
            public boolean hasOpClass() {
                return ((bitField2_ & 0x80000000) == 0x80000000);
            }

            /**
             * <code>optional bytes op_class = 101;</code>
             * <p>
             * <pre>
             * 操作子类
             * </pre>
             */
            public com.google.protobuf.ByteString getOpClass() {
                return opClass_;
            }

            /**
             * <code>optional bytes op_class = 101;</code>
             * <p>
             * <pre>
             * 操作子类
             * </pre>
             */
            public Builder setOpClass(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField2_ |= 0x80000000;
                opClass_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes op_class = 101;</code>
             * <p>
             * <pre>
             * 操作子类
             * </pre>
             */
            public Builder clearOpClass() {
                bitField2_ = (bitField2_ & ~0x80000000);
                opClass_ = getDefaultInstance().getOpClass();
                onChanged();
                return this;
            }

            // optional int32 op_item_id = 102;
            private int opItemId_;

            /**
             * <code>optional int32 op_item_id = 102;</code>
             * <p>
             * <pre>
             * 操作细项ID
             * </pre>
             */
            public boolean hasOpItemId() {
                return ((bitField3_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>optional int32 op_item_id = 102;</code>
             * <p>
             * <pre>
             * 操作细项ID
             * </pre>
             */
            public int getOpItemId() {
                return opItemId_;
            }

            /**
             * <code>optional int32 op_item_id = 102;</code>
             * <p>
             * <pre>
             * 操作细项ID
             * </pre>
             */
            public Builder setOpItemId(int value) {
                bitField3_ |= 0x00000001;
                opItemId_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 op_item_id = 102;</code>
             * <p>
             * <pre>
             * 操作细项ID
             * </pre>
             */
            public Builder clearOpItemId() {
                bitField3_ = (bitField3_ & ~0x00000001);
                opItemId_ = 0;
                onChanged();
                return this;
            }

            // optional bytes op_item = 103;
            private com.google.protobuf.ByteString opItem_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes op_item = 103;</code>
             * <p>
             * <pre>
             * 操作细项
             * </pre>
             */
            public boolean hasOpItem() {
                return ((bitField3_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>optional bytes op_item = 103;</code>
             * <p>
             * <pre>
             * 操作细项
             * </pre>
             */
            public com.google.protobuf.ByteString getOpItem() {
                return opItem_;
            }

            /**
             * <code>optional bytes op_item = 103;</code>
             * <p>
             * <pre>
             * 操作细项
             * </pre>
             */
            public Builder setOpItem(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField3_ |= 0x00000002;
                opItem_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes op_item = 103;</code>
             * <p>
             * <pre>
             * 操作细项
             * </pre>
             */
            public Builder clearOpItem() {
                bitField3_ = (bitField3_ & ~0x00000002);
                opItem_ = getDefaultInstance().getOpItem();
                onChanged();
                return this;
            }

            // optional bytes op_code = 104;
            private com.google.protobuf.ByteString opCode_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes op_code = 104;</code>
             * <p>
             * <pre>
             * 操作编码
             * </pre>
             */
            public boolean hasOpCode() {
                return ((bitField3_ & 0x00000004) == 0x00000004);
            }

            /**
             * <code>optional bytes op_code = 104;</code>
             * <p>
             * <pre>
             * 操作编码
             * </pre>
             */
            public com.google.protobuf.ByteString getOpCode() {
                return opCode_;
            }

            /**
             * <code>optional bytes op_code = 104;</code>
             * <p>
             * <pre>
             * 操作编码
             * </pre>
             */
            public Builder setOpCode(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField3_ |= 0x00000004;
                opCode_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes op_code = 104;</code>
             * <p>
             * <pre>
             * 操作编码
             * </pre>
             */
            public Builder clearOpCode() {
                bitField3_ = (bitField3_ & ~0x00000004);
                opCode_ = getDefaultInstance().getOpCode();
                onChanged();
                return this;
            }

            // optional int32 op_key_id = 105;
            private int opKeyId_;

            /**
             * <code>optional int32 op_key_id = 105;</code>
             * <p>
             * <pre>
             * 操作关键字ID（标准化策略ID）
             * </pre>
             */
            public boolean hasOpKeyId() {
                return ((bitField3_ & 0x00000008) == 0x00000008);
            }

            /**
             * <code>optional int32 op_key_id = 105;</code>
             * <p>
             * <pre>
             * 操作关键字ID（标准化策略ID）
             * </pre>
             */
            public int getOpKeyId() {
                return opKeyId_;
            }

            /**
             * <code>optional int32 op_key_id = 105;</code>
             * <p>
             * <pre>
             * 操作关键字ID（标准化策略ID）
             * </pre>
             */
            public Builder setOpKeyId(int value) {
                bitField3_ |= 0x00000008;
                opKeyId_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 op_key_id = 105;</code>
             * <p>
             * <pre>
             * 操作关键字ID（标准化策略ID）
             * </pre>
             */
            public Builder clearOpKeyId() {
                bitField3_ = (bitField3_ & ~0x00000008);
                opKeyId_ = 0;
                onChanged();
                return this;
            }

            // optional bytes op_key = 106;
            private com.google.protobuf.ByteString opKey_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes op_key = 106;</code>
             * <p>
             * <pre>
             * 操作关键字（标准化策略正则表达式）
             * </pre>
             */
            public boolean hasOpKey() {
                return ((bitField3_ & 0x00000010) == 0x00000010);
            }

            /**
             * <code>optional bytes op_key = 106;</code>
             * <p>
             * <pre>
             * 操作关键字（标准化策略正则表达式）
             * </pre>
             */
            public com.google.protobuf.ByteString getOpKey() {
                return opKey_;
            }

            /**
             * <code>optional bytes op_key = 106;</code>
             * <p>
             * <pre>
             * 操作关键字（标准化策略正则表达式）
             * </pre>
             */
            public Builder setOpKey(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField3_ |= 0x00000010;
                opKey_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes op_key = 106;</code>
             * <p>
             * <pre>
             * 操作关键字（标准化策略正则表达式）
             * </pre>
             */
            public Builder clearOpKey() {
                bitField3_ = (bitField3_ & ~0x00000010);
                opKey_ = getDefaultInstance().getOpKey();
                onChanged();
                return this;
            }

            // optional bytes operatetypeid = 107;
            private com.google.protobuf.ByteString operatetypeid_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes operatetypeid = 107;</code>
             * <p>
             * <pre>
             * 原始操作类型（应用系统日志扩展）
             * </pre>
             */
            public boolean hasOperatetypeid() {
                return ((bitField3_ & 0x00000020) == 0x00000020);
            }

            /**
             * <code>optional bytes operatetypeid = 107;</code>
             * <p>
             * <pre>
             * 原始操作类型（应用系统日志扩展）
             * </pre>
             */
            public com.google.protobuf.ByteString getOperatetypeid() {
                return operatetypeid_;
            }

            /**
             * <code>optional bytes operatetypeid = 107;</code>
             * <p>
             * <pre>
             * 原始操作类型（应用系统日志扩展）
             * </pre>
             */
            public Builder setOperatetypeid(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField3_ |= 0x00000020;
                operatetypeid_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes operatetypeid = 107;</code>
             * <p>
             * <pre>
             * 原始操作类型（应用系统日志扩展）
             * </pre>
             */
            public Builder clearOperatetypeid() {
                bitField3_ = (bitField3_ & ~0x00000020);
                operatetypeid_ = getDefaultInstance().getOperatetypeid();
                onChanged();
                return this;
            }

            // optional bytes operatetypename = 108;
            private com.google.protobuf.ByteString operatetypename_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes operatetypename = 108;</code>
             * <p>
             * <pre>
             * 原始操作名称（应用系统日志扩展）
             * </pre>
             */
            public boolean hasOperatetypename() {
                return ((bitField3_ & 0x00000040) == 0x00000040);
            }

            /**
             * <code>optional bytes operatetypename = 108;</code>
             * <p>
             * <pre>
             * 原始操作名称（应用系统日志扩展）
             * </pre>
             */
            public com.google.protobuf.ByteString getOperatetypename() {
                return operatetypename_;
            }

            /**
             * <code>optional bytes operatetypename = 108;</code>
             * <p>
             * <pre>
             * 原始操作名称（应用系统日志扩展）
             * </pre>
             */
            public Builder setOperatetypename(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField3_ |= 0x00000040;
                operatetypename_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes operatetypename = 108;</code>
             * <p>
             * <pre>
             * 原始操作名称（应用系统日志扩展）
             * </pre>
             */
            public Builder clearOperatetypename() {
                bitField3_ = (bitField3_ & ~0x00000040);
                operatetypename_ = getDefaultInstance().getOperatetypename();
                onChanged();
                return this;
            }

            // optional bytes authtype = 109;
            private com.google.protobuf.ByteString authtype_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes authtype = 109;</code>
             * <p>
             * <pre>
             * 认证类型（应用系统日志扩展）
             * </pre>
             */
            public boolean hasAuthtype() {
                return ((bitField3_ & 0x00000080) == 0x00000080);
            }

            /**
             * <code>optional bytes authtype = 109;</code>
             * <p>
             * <pre>
             * 认证类型（应用系统日志扩展）
             * </pre>
             */
            public com.google.protobuf.ByteString getAuthtype() {
                return authtype_;
            }

            /**
             * <code>optional bytes authtype = 109;</code>
             * <p>
             * <pre>
             * 认证类型（应用系统日志扩展）
             * </pre>
             */
            public Builder setAuthtype(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField3_ |= 0x00000080;
                authtype_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes authtype = 109;</code>
             * <p>
             * <pre>
             * 认证类型（应用系统日志扩展）
             * </pre>
             */
            public Builder clearAuthtype() {
                bitField3_ = (bitField3_ & ~0x00000080);
                authtype_ = getDefaultInstance().getAuthtype();
                onChanged();
                return this;
            }

            // optional bytes logid = 110;
            private com.google.protobuf.ByteString logid_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes logid = 110;</code>
             * <p>
             * <pre>
             * 原始日志ID（应用系统日志扩展）
             * </pre>
             */
            public boolean hasLogid() {
                return ((bitField3_ & 0x00000100) == 0x00000100);
            }

            /**
             * <code>optional bytes logid = 110;</code>
             * <p>
             * <pre>
             * 原始日志ID（应用系统日志扩展）
             * </pre>
             */
            public com.google.protobuf.ByteString getLogid() {
                return logid_;
            }

            /**
             * <code>optional bytes logid = 110;</code>
             * <p>
             * <pre>
             * 原始日志ID（应用系统日志扩展）
             * </pre>
             */
            public Builder setLogid(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField3_ |= 0x00000100;
                logid_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes logid = 110;</code>
             * <p>
             * <pre>
             * 原始日志ID（应用系统日志扩展）
             * </pre>
             */
            public Builder clearLogid() {
                bitField3_ = (bitField3_ & ~0x00000100);
                logid_ = getDefaultInstance().getLogid();
                onChanged();
                return this;
            }

            // optional bytes orgname = 111;
            private com.google.protobuf.ByteString orgname_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes orgname = 111;</code>
             * <p>
             * <pre>
             * 原始日志组织名称（应用系统日志扩展）
             * </pre>
             */
            public boolean hasOrgname() {
                return ((bitField3_ & 0x00000200) == 0x00000200);
            }

            /**
             * <code>optional bytes orgname = 111;</code>
             * <p>
             * <pre>
             * 原始日志组织名称（应用系统日志扩展）
             * </pre>
             */
            public com.google.protobuf.ByteString getOrgname() {
                return orgname_;
            }

            /**
             * <code>optional bytes orgname = 111;</code>
             * <p>
             * <pre>
             * 原始日志组织名称（应用系统日志扩展）
             * </pre>
             */
            public Builder setOrgname(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField3_ |= 0x00000200;
                orgname_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes orgname = 111;</code>
             * <p>
             * <pre>
             * 原始日志组织名称（应用系统日志扩展）
             * </pre>
             */
            public Builder clearOrgname() {
                bitField3_ = (bitField3_ & ~0x00000200);
                orgname_ = getDefaultInstance().getOrgname();
                onChanged();
                return this;
            }

            // optional bytes recdefid = 112;
            private com.google.protobuf.ByteString recdefid_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes recdefid = 112;</code>
             * <p>
             * <pre>
             * 受理类型（应用系统日志扩展）
             * </pre>
             */
            public boolean hasRecdefid() {
                return ((bitField3_ & 0x00000400) == 0x00000400);
            }

            /**
             * <code>optional bytes recdefid = 112;</code>
             * <p>
             * <pre>
             * 受理类型（应用系统日志扩展）
             * </pre>
             */
            public com.google.protobuf.ByteString getRecdefid() {
                return recdefid_;
            }

            /**
             * <code>optional bytes recdefid = 112;</code>
             * <p>
             * <pre>
             * 受理类型（应用系统日志扩展）
             * </pre>
             */
            public Builder setRecdefid(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField3_ |= 0x00000400;
                recdefid_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes recdefid = 112;</code>
             * <p>
             * <pre>
             * 受理类型（应用系统日志扩展）
             * </pre>
             */
            public Builder clearRecdefid() {
                bitField3_ = (bitField3_ & ~0x00000400);
                recdefid_ = getDefaultInstance().getRecdefid();
                onChanged();
                return this;
            }

            // optional bytes recdedate = 113;
            private com.google.protobuf.ByteString recdedate_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes recdedate = 113;</code>
             * <p>
             * <pre>
             * 受理时间（应用系统日志扩展）
             * </pre>
             */
            public boolean hasRecdedate() {
                return ((bitField3_ & 0x00000800) == 0x00000800);
            }

            /**
             * <code>optional bytes recdedate = 113;</code>
             * <p>
             * <pre>
             * 受理时间（应用系统日志扩展）
             * </pre>
             */
            public com.google.protobuf.ByteString getRecdedate() {
                return recdedate_;
            }

            /**
             * <code>optional bytes recdedate = 113;</code>
             * <p>
             * <pre>
             * 受理时间（应用系统日志扩展）
             * </pre>
             */
            public Builder setRecdedate(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField3_ |= 0x00000800;
                recdedate_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes recdedate = 113;</code>
             * <p>
             * <pre>
             * 受理时间（应用系统日志扩展）
             * </pre>
             */
            public Builder clearRecdedate() {
                bitField3_ = (bitField3_ & ~0x00000800);
                recdedate_ = getDefaultInstance().getRecdedate();
                onChanged();
                return this;
            }

            // optional bytes formnum = 114;
            private com.google.protobuf.ByteString formnum_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes formnum = 114;</code>
             * <p>
             * <pre>
             * 流水号（应用系统日志扩展）
             * </pre>
             */
            public boolean hasFormnum() {
                return ((bitField3_ & 0x00001000) == 0x00001000);
            }

            /**
             * <code>optional bytes formnum = 114;</code>
             * <p>
             * <pre>
             * 流水号（应用系统日志扩展）
             * </pre>
             */
            public com.google.protobuf.ByteString getFormnum() {
                return formnum_;
            }

            /**
             * <code>optional bytes formnum = 114;</code>
             * <p>
             * <pre>
             * 流水号（应用系统日志扩展）
             * </pre>
             */
            public Builder setFormnum(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField3_ |= 0x00001000;
                formnum_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes formnum = 114;</code>
             * <p>
             * <pre>
             * 流水号（应用系统日志扩展）
             * </pre>
             */
            public Builder clearFormnum() {
                bitField3_ = (bitField3_ & ~0x00001000);
                formnum_ = getDefaultInstance().getFormnum();
                onChanged();
                return this;
            }

            // optional bytes jobcount = 115;
            private com.google.protobuf.ByteString jobcount_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes jobcount = 115;</code>
             * <p>
             * <pre>
             * 数量（应用系统日志扩展）
             * </pre>
             */
            public boolean hasJobcount() {
                return ((bitField3_ & 0x00002000) == 0x00002000);
            }

            /**
             * <code>optional bytes jobcount = 115;</code>
             * <p>
             * <pre>
             * 数量（应用系统日志扩展）
             * </pre>
             */
            public com.google.protobuf.ByteString getJobcount() {
                return jobcount_;
            }

            /**
             * <code>optional bytes jobcount = 115;</code>
             * <p>
             * <pre>
             * 数量（应用系统日志扩展）
             * </pre>
             */
            public Builder setJobcount(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField3_ |= 0x00002000;
                jobcount_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes jobcount = 115;</code>
             * <p>
             * <pre>
             * 数量（应用系统日志扩展）
             * </pre>
             */
            public Builder clearJobcount() {
                bitField3_ = (bitField3_ & ~0x00002000);
                jobcount_ = getDefaultInstance().getJobcount();
                onChanged();
                return this;
            }

            // optional bytes okcount = 116;
            private com.google.protobuf.ByteString okcount_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes okcount = 116;</code>
             * <p>
             * <pre>
             * 成功条数（应用系统日志扩展）
             * </pre>
             */
            public boolean hasOkcount() {
                return ((bitField3_ & 0x00004000) == 0x00004000);
            }

            /**
             * <code>optional bytes okcount = 116;</code>
             * <p>
             * <pre>
             * 成功条数（应用系统日志扩展）
             * </pre>
             */
            public com.google.protobuf.ByteString getOkcount() {
                return okcount_;
            }

            /**
             * <code>optional bytes okcount = 116;</code>
             * <p>
             * <pre>
             * 成功条数（应用系统日志扩展）
             * </pre>
             */
            public Builder setOkcount(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField3_ |= 0x00004000;
                okcount_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes okcount = 116;</code>
             * <p>
             * <pre>
             * 成功条数（应用系统日志扩展）
             * </pre>
             */
            public Builder clearOkcount() {
                bitField3_ = (bitField3_ & ~0x00004000);
                okcount_ = getDefaultInstance().getOkcount();
                onChanged();
                return this;
            }

            // optional bytes failcount = 117;
            private com.google.protobuf.ByteString failcount_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes failcount = 117;</code>
             * <p>
             * <pre>
             * 失败条数（应用系统日志扩展）
             * </pre>
             */
            public boolean hasFailcount() {
                return ((bitField3_ & 0x00008000) == 0x00008000);
            }

            /**
             * <code>optional bytes failcount = 117;</code>
             * <p>
             * <pre>
             * 失败条数（应用系统日志扩展）
             * </pre>
             */
            public com.google.protobuf.ByteString getFailcount() {
                return failcount_;
            }

            /**
             * <code>optional bytes failcount = 117;</code>
             * <p>
             * <pre>
             * 失败条数（应用系统日志扩展）
             * </pre>
             */
            public Builder setFailcount(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField3_ |= 0x00008000;
                failcount_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes failcount = 117;</code>
             * <p>
             * <pre>
             * 失败条数（应用系统日志扩展）
             * </pre>
             */
            public Builder clearFailcount() {
                bitField3_ = (bitField3_ & ~0x00008000);
                failcount_ = getDefaultInstance().getFailcount();
                onChanged();
                return this;
            }

            // optional bytes servnumber = 118;
            private com.google.protobuf.ByteString servnumber_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes servnumber = 118;</code>
             * <p>
             * <pre>
             * 受理代码（应用系统日志扩展）
             * </pre>
             */
            public boolean hasServnumber() {
                return ((bitField3_ & 0x00010000) == 0x00010000);
            }

            /**
             * <code>optional bytes servnumber = 118;</code>
             * <p>
             * <pre>
             * 受理代码（应用系统日志扩展）
             * </pre>
             */
            public com.google.protobuf.ByteString getServnumber() {
                return servnumber_;
            }

            /**
             * <code>optional bytes servnumber = 118;</code>
             * <p>
             * <pre>
             * 受理代码（应用系统日志扩展）
             * </pre>
             */
            public Builder setServnumber(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField3_ |= 0x00010000;
                servnumber_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes servnumber = 118;</code>
             * <p>
             * <pre>
             * 受理代码（应用系统日志扩展）
             * </pre>
             */
            public Builder clearServnumber() {
                bitField3_ = (bitField3_ & ~0x00010000);
                servnumber_ = getDefaultInstance().getServnumber();
                onChanged();
                return this;
            }

            // optional bytes recname = 119;
            private com.google.protobuf.ByteString recname_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes recname = 119;</code>
             * <p>
             * <pre>
             * 业务名称（应用系统日志扩展）
             * </pre>
             */
            public boolean hasRecname() {
                return ((bitField3_ & 0x00020000) == 0x00020000);
            }

            /**
             * <code>optional bytes recname = 119;</code>
             * <p>
             * <pre>
             * 业务名称（应用系统日志扩展）
             * </pre>
             */
            public com.google.protobuf.ByteString getRecname() {
                return recname_;
            }

            /**
             * <code>optional bytes recname = 119;</code>
             * <p>
             * <pre>
             * 业务名称（应用系统日志扩展）
             * </pre>
             */
            public Builder setRecname(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField3_ |= 0x00020000;
                recname_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes recname = 119;</code>
             * <p>
             * <pre>
             * 业务名称（应用系统日志扩展）
             * </pre>
             */
            public Builder clearRecname() {
                bitField3_ = (bitField3_ & ~0x00020000);
                recname_ = getDefaultInstance().getRecname();
                onChanged();
                return this;
            }

            // optional bytes status = 120;
            private com.google.protobuf.ByteString status_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes status = 120;</code>
             * <p>
             * <pre>
             * 状态（应用系统日志扩展）
             * </pre>
             */
            public boolean hasStatus() {
                return ((bitField3_ & 0x00040000) == 0x00040000);
            }

            /**
             * <code>optional bytes status = 120;</code>
             * <p>
             * <pre>
             * 状态（应用系统日志扩展）
             * </pre>
             */
            public com.google.protobuf.ByteString getStatus() {
                return status_;
            }

            /**
             * <code>optional bytes status = 120;</code>
             * <p>
             * <pre>
             * 状态（应用系统日志扩展）
             * </pre>
             */
            public Builder setStatus(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField3_ |= 0x00040000;
                status_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes status = 120;</code>
             * <p>
             * <pre>
             * 状态（应用系统日志扩展）
             * </pre>
             */
            public Builder clearStatus() {
                bitField3_ = (bitField3_ & ~0x00040000);
                status_ = getDefaultInstance().getStatus();
                onChanged();
                return this;
            }

            // optional bytes filluuid = 121;
            private com.google.protobuf.ByteString filluuid_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes filluuid = 121;</code>
             * <p>
             * <pre>
             * 4A代填UUID，，IAM日志中用
             * </pre>
             */
            public boolean hasFilluuid() {
                return ((bitField3_ & 0x00080000) == 0x00080000);
            }

            /**
             * <code>optional bytes filluuid = 121;</code>
             * <p>
             * <pre>
             * 4A代填UUID，，IAM日志中用
             * </pre>
             */
            public com.google.protobuf.ByteString getFilluuid() {
                return filluuid_;
            }

            /**
             * <code>optional bytes filluuid = 121;</code>
             * <p>
             * <pre>
             * 4A代填UUID，，IAM日志中用
             * </pre>
             */
            public Builder setFilluuid(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField3_ |= 0x00080000;
                filluuid_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes filluuid = 121;</code>
             * <p>
             * <pre>
             * 4A代填UUID，，IAM日志中用
             * </pre>
             */
            public Builder clearFilluuid() {
                bitField3_ = (bitField3_ & ~0x00080000);
                filluuid_ = getDefaultInstance().getFilluuid();
                onChanged();
                return this;
            }

            // optional bytes reserved0 = 122;
            private com.google.protobuf.ByteString reserved0_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes reserved0 = 122;</code>
             */
            public boolean hasReserved0() {
                return ((bitField3_ & 0x00100000) == 0x00100000);
            }

            /**
             * <code>optional bytes reserved0 = 122;</code>
             */
            public com.google.protobuf.ByteString getReserved0() {
                return reserved0_;
            }

            /**
             * <code>optional bytes reserved0 = 122;</code>
             */
            public Builder setReserved0(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField3_ |= 0x00100000;
                reserved0_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes reserved0 = 122;</code>
             */
            public Builder clearReserved0() {
                bitField3_ = (bitField3_ & ~0x00100000);
                reserved0_ = getDefaultInstance().getReserved0();
                onChanged();
                return this;
            }

            // optional bytes reserved1 = 123;
            private com.google.protobuf.ByteString reserved1_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes reserved1 = 123;</code>
             */
            public boolean hasReserved1() {
                return ((bitField3_ & 0x00200000) == 0x00200000);
            }

            /**
             * <code>optional bytes reserved1 = 123;</code>
             */
            public com.google.protobuf.ByteString getReserved1() {
                return reserved1_;
            }

            /**
             * <code>optional bytes reserved1 = 123;</code>
             */
            public Builder setReserved1(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField3_ |= 0x00200000;
                reserved1_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes reserved1 = 123;</code>
             */
            public Builder clearReserved1() {
                bitField3_ = (bitField3_ & ~0x00200000);
                reserved1_ = getDefaultInstance().getReserved1();
                onChanged();
                return this;
            }

            // optional bytes reserved2 = 124;
            private com.google.protobuf.ByteString reserved2_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes reserved2 = 124;</code>
             */
            public boolean hasReserved2() {
                return ((bitField3_ & 0x00400000) == 0x00400000);
            }

            /**
             * <code>optional bytes reserved2 = 124;</code>
             */
            public com.google.protobuf.ByteString getReserved2() {
                return reserved2_;
            }

            /**
             * <code>optional bytes reserved2 = 124;</code>
             */
            public Builder setReserved2(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField3_ |= 0x00400000;
                reserved2_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes reserved2 = 124;</code>
             */
            public Builder clearReserved2() {
                bitField3_ = (bitField3_ & ~0x00400000);
                reserved2_ = getDefaultInstance().getReserved2();
                onChanged();
                return this;
            }

            // optional bytes reserved3 = 125;
            private com.google.protobuf.ByteString reserved3_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes reserved3 = 125;</code>
             */
            public boolean hasReserved3() {
                return ((bitField3_ & 0x00800000) == 0x00800000);
            }

            /**
             * <code>optional bytes reserved3 = 125;</code>
             */
            public com.google.protobuf.ByteString getReserved3() {
                return reserved3_;
            }

            /**
             * <code>optional bytes reserved3 = 125;</code>
             */
            public Builder setReserved3(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField3_ |= 0x00800000;
                reserved3_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes reserved3 = 125;</code>
             */
            public Builder clearReserved3() {
                bitField3_ = (bitField3_ & ~0x00800000);
                reserved3_ = getDefaultInstance().getReserved3();
                onChanged();
                return this;
            }

            // optional bytes reserved4 = 126;
            private com.google.protobuf.ByteString reserved4_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes reserved4 = 126;</code>
             * <p>
             * <pre>
             * 2014-02-27新增：告警申诉原因（申诉人填写）
             * </pre>
             */
            public boolean hasReserved4() {
                return ((bitField3_ & 0x01000000) == 0x01000000);
            }

            /**
             * <code>optional bytes reserved4 = 126;</code>
             * <p>
             * <pre>
             * 2014-02-27新增：告警申诉原因（申诉人填写）
             * </pre>
             */
            public com.google.protobuf.ByteString getReserved4() {
                return reserved4_;
            }

            /**
             * <code>optional bytes reserved4 = 126;</code>
             * <p>
             * <pre>
             * 2014-02-27新增：告警申诉原因（申诉人填写）
             * </pre>
             */
            public Builder setReserved4(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField3_ |= 0x01000000;
                reserved4_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes reserved4 = 126;</code>
             * <p>
             * <pre>
             * 2014-02-27新增：告警申诉原因（申诉人填写）
             * </pre>
             */
            public Builder clearReserved4() {
                bitField3_ = (bitField3_ & ~0x01000000);
                reserved4_ = getDefaultInstance().getReserved4();
                onChanged();
                return this;
            }

            // optional bytes reserved5 = 127;
            private com.google.protobuf.ByteString reserved5_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes reserved5 = 127;</code>
             * <p>
             * <pre>
             * 2014-02-27新增：告警审计管理员理由（申诉失败，用户会看原因）
             * </pre>
             */
            public boolean hasReserved5() {
                return ((bitField3_ & 0x02000000) == 0x02000000);
            }

            /**
             * <code>optional bytes reserved5 = 127;</code>
             * <p>
             * <pre>
             * 2014-02-27新增：告警审计管理员理由（申诉失败，用户会看原因）
             * </pre>
             */
            public com.google.protobuf.ByteString getReserved5() {
                return reserved5_;
            }

            /**
             * <code>optional bytes reserved5 = 127;</code>
             * <p>
             * <pre>
             * 2014-02-27新增：告警审计管理员理由（申诉失败，用户会看原因）
             * </pre>
             */
            public Builder setReserved5(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField3_ |= 0x02000000;
                reserved5_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes reserved5 = 127;</code>
             * <p>
             * <pre>
             * 2014-02-27新增：告警审计管理员理由（申诉失败，用户会看原因）
             * </pre>
             */
            public Builder clearReserved5() {
                bitField3_ = (bitField3_ & ~0x02000000);
                reserved5_ = getDefaultInstance().getReserved5();
                onChanged();
                return this;
            }

            // optional bytes reserved6 = 128;
            private com.google.protobuf.ByteString reserved6_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes reserved6 = 128;</code>
             * <p>
             * <pre>
             * 2014-04-14新增：告警申诉时间
             * </pre>
             */
            public boolean hasReserved6() {
                return ((bitField3_ & 0x04000000) == 0x04000000);
            }

            /**
             * <code>optional bytes reserved6 = 128;</code>
             * <p>
             * <pre>
             * 2014-04-14新增：告警申诉时间
             * </pre>
             */
            public com.google.protobuf.ByteString getReserved6() {
                return reserved6_;
            }

            /**
             * <code>optional bytes reserved6 = 128;</code>
             * <p>
             * <pre>
             * 2014-04-14新增：告警申诉时间
             * </pre>
             */
            public Builder setReserved6(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField3_ |= 0x04000000;
                reserved6_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes reserved6 = 128;</code>
             * <p>
             * <pre>
             * 2014-04-14新增：告警申诉时间
             * </pre>
             */
            public Builder clearReserved6() {
                bitField3_ = (bitField3_ & ~0x04000000);
                reserved6_ = getDefaultInstance().getReserved6();
                onChanged();
                return this;
            }

            // optional bytes reserved7 = 129;
            private com.google.protobuf.ByteString reserved7_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes reserved7 = 129;</code>
             * <p>
             * <pre>
             * 2014-04-14新增：告警申诉处理时间
             * </pre>
             */
            public boolean hasReserved7() {
                return ((bitField3_ & 0x08000000) == 0x08000000);
            }

            /**
             * <code>optional bytes reserved7 = 129;</code>
             * <p>
             * <pre>
             * 2014-04-14新增：告警申诉处理时间
             * </pre>
             */
            public com.google.protobuf.ByteString getReserved7() {
                return reserved7_;
            }

            /**
             * <code>optional bytes reserved7 = 129;</code>
             * <p>
             * <pre>
             * 2014-04-14新增：告警申诉处理时间
             * </pre>
             */
            public Builder setReserved7(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField3_ |= 0x08000000;
                reserved7_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes reserved7 = 129;</code>
             * <p>
             * <pre>
             * 2014-04-14新增：告警申诉处理时间
             * </pre>
             */
            public Builder clearReserved7() {
                bitField3_ = (bitField3_ & ~0x08000000);
                reserved7_ = getDefaultInstance().getReserved7();
                onChanged();
                return this;
            }

            // optional bytes reserved8 = 130;
            private com.google.protobuf.ByteString reserved8_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes reserved8 = 130;</code>
             */
            public boolean hasReserved8() {
                return ((bitField3_ & 0x10000000) == 0x10000000);
            }

            /**
             * <code>optional bytes reserved8 = 130;</code>
             */
            public com.google.protobuf.ByteString getReserved8() {
                return reserved8_;
            }

            /**
             * <code>optional bytes reserved8 = 130;</code>
             */
            public Builder setReserved8(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField3_ |= 0x10000000;
                reserved8_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes reserved8 = 130;</code>
             */
            public Builder clearReserved8() {
                bitField3_ = (bitField3_ & ~0x10000000);
                reserved8_ = getDefaultInstance().getReserved8();
                onChanged();
                return this;
            }

            // optional bytes reserved9 = 131;
            private com.google.protobuf.ByteString reserved9_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes reserved9 = 131;</code>
             */
            public boolean hasReserved9() {
                return ((bitField3_ & 0x20000000) == 0x20000000);
            }

            /**
             * <code>optional bytes reserved9 = 131;</code>
             */
            public com.google.protobuf.ByteString getReserved9() {
                return reserved9_;
            }

            /**
             * <code>optional bytes reserved9 = 131;</code>
             */
            public Builder setReserved9(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField3_ |= 0x20000000;
                reserved9_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes reserved9 = 131;</code>
             */
            public Builder clearReserved9() {
                bitField3_ = (bitField3_ & ~0x20000000);
                reserved9_ = getDefaultInstance().getReserved9();
                onChanged();
                return this;
            }

            // optional bytes res_key = 132;
            private com.google.protobuf.ByteString resKey_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes res_key = 132;</code>
             * <p>
             * <pre>
             * 资源KEY，UUID
             * </pre>
             */
            public boolean hasResKey() {
                return ((bitField3_ & 0x40000000) == 0x40000000);
            }

            /**
             * <code>optional bytes res_key = 132;</code>
             * <p>
             * <pre>
             * 资源KEY，UUID
             * </pre>
             */
            public com.google.protobuf.ByteString getResKey() {
                return resKey_;
            }

            /**
             * <code>optional bytes res_key = 132;</code>
             * <p>
             * <pre>
             * 资源KEY，UUID
             * </pre>
             */
            public Builder setResKey(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField3_ |= 0x40000000;
                resKey_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes res_key = 132;</code>
             * <p>
             * <pre>
             * 资源KEY，UUID
             * </pre>
             */
            public Builder clearResKey() {
                bitField3_ = (bitField3_ & ~0x40000000);
                resKey_ = getDefaultInstance().getResKey();
                onChanged();
                return this;
            }

            // optional bytes logtable = 133;
            private com.google.protobuf.ByteString logtable_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes logtable = 133;</code>
             * <p>
             * <pre>
             * 专题数据分拣时，对应的专题表名
             * </pre>
             */
            public boolean hasLogtable() {
                return ((bitField3_ & 0x80000000) == 0x80000000);
            }

            /**
             * <code>optional bytes logtable = 133;</code>
             * <p>
             * <pre>
             * 专题数据分拣时，对应的专题表名
             * </pre>
             */
            public com.google.protobuf.ByteString getLogtable() {
                return logtable_;
            }

            /**
             * <code>optional bytes logtable = 133;</code>
             * <p>
             * <pre>
             * 专题数据分拣时，对应的专题表名
             * </pre>
             */
            public Builder setLogtable(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField3_ |= 0x80000000;
                logtable_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes logtable = 133;</code>
             * <p>
             * <pre>
             * 专题数据分拣时，对应的专题表名
             * </pre>
             */
            public Builder clearLogtable() {
                bitField3_ = (bitField3_ & ~0x80000000);
                logtable_ = getDefaultInstance().getLogtable();
                onChanged();
                return this;
            }

            // optional int32 functionid = 134;
            private int functionid_;

            /**
             * <code>optional int32 functionid = 134;</code>
             * <p>
             * <pre>
             * 功能ID，特用于IAM日志
             * </pre>
             */
            public boolean hasFunctionid() {
                return ((bitField4_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>optional int32 functionid = 134;</code>
             * <p>
             * <pre>
             * 功能ID，特用于IAM日志
             * </pre>
             */
            public int getFunctionid() {
                return functionid_;
            }

            /**
             * <code>optional int32 functionid = 134;</code>
             * <p>
             * <pre>
             * 功能ID，特用于IAM日志
             * </pre>
             */
            public Builder setFunctionid(int value) {
                bitField4_ |= 0x00000001;
                functionid_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 functionid = 134;</code>
             * <p>
             * <pre>
             * 功能ID，特用于IAM日志
             * </pre>
             */
            public Builder clearFunctionid() {
                bitField4_ = (bitField4_ & ~0x00000001);
                functionid_ = 0;
                onChanged();
                return this;
            }

            // optional bytes functionname = 135;
            private com.google.protobuf.ByteString functionname_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes functionname = 135;</code>
             * <p>
             * <pre>
             * 功能名称，特用于IAM日志
             * </pre>
             */
            public boolean hasFunctionname() {
                return ((bitField4_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>optional bytes functionname = 135;</code>
             * <p>
             * <pre>
             * 功能名称，特用于IAM日志
             * </pre>
             */
            public com.google.protobuf.ByteString getFunctionname() {
                return functionname_;
            }

            /**
             * <code>optional bytes functionname = 135;</code>
             * <p>
             * <pre>
             * 功能名称，特用于IAM日志
             * </pre>
             */
            public Builder setFunctionname(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField4_ |= 0x00000002;
                functionname_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes functionname = 135;</code>
             * <p>
             * <pre>
             * 功能名称，特用于IAM日志
             * </pre>
             */
            public Builder clearFunctionname() {
                bitField4_ = (bitField4_ & ~0x00000002);
                functionname_ = getDefaultInstance().getFunctionname();
                onChanged();
                return this;
            }

            // optional int32 direction = 136;
            private int direction_;

            /**
             * <code>optional int32 direction = 136;</code>
             * <p>
             * <pre>
             * 上下行标识，特用于NBA、GBA操作日志
             * </pre>
             */
            public boolean hasDirection() {
                return ((bitField4_ & 0x00000004) == 0x00000004);
            }

            /**
             * <code>optional int32 direction = 136;</code>
             * <p>
             * <pre>
             * 上下行标识，特用于NBA、GBA操作日志
             * </pre>
             */
            public int getDirection() {
                return direction_;
            }

            /**
             * <code>optional int32 direction = 136;</code>
             * <p>
             * <pre>
             * 上下行标识，特用于NBA、GBA操作日志
             * </pre>
             */
            public Builder setDirection(int value) {
                bitField4_ |= 0x00000004;
                direction_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 direction = 136;</code>
             * <p>
             * <pre>
             * 上下行标识，特用于NBA、GBA操作日志
             * </pre>
             */
            public Builder clearDirection() {
                bitField4_ = (bitField4_ & ~0x00000004);
                direction_ = 0;
                onChanged();
                return this;
            }

            // optional int32 nreserved0 = 137;
            private int nreserved0_;

            /**
             * <code>optional int32 nreserved0 = 137;</code>
             */
            public boolean hasNreserved0() {
                return ((bitField4_ & 0x00000008) == 0x00000008);
            }

            /**
             * <code>optional int32 nreserved0 = 137;</code>
             */
            public int getNreserved0() {
                return nreserved0_;
            }

            /**
             * <code>optional int32 nreserved0 = 137;</code>
             */
            public Builder setNreserved0(int value) {
                bitField4_ |= 0x00000008;
                nreserved0_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 nreserved0 = 137;</code>
             */
            public Builder clearNreserved0() {
                bitField4_ = (bitField4_ & ~0x00000008);
                nreserved0_ = 0;
                onChanged();
                return this;
            }

            // optional int32 nreserved1 = 138;
            private int nreserved1_;

            /**
             * <code>optional int32 nreserved1 = 138;</code>
             * <p>
             * <pre>
             * 缓存NBA会话状态
             * </pre>
             */
            public boolean hasNreserved1() {
                return ((bitField4_ & 0x00000010) == 0x00000010);
            }

            /**
             * <code>optional int32 nreserved1 = 138;</code>
             * <p>
             * <pre>
             * 缓存NBA会话状态
             * </pre>
             */
            public int getNreserved1() {
                return nreserved1_;
            }

            /**
             * <code>optional int32 nreserved1 = 138;</code>
             * <p>
             * <pre>
             * 缓存NBA会话状态
             * </pre>
             */
            public Builder setNreserved1(int value) {
                bitField4_ |= 0x00000010;
                nreserved1_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 nreserved1 = 138;</code>
             * <p>
             * <pre>
             * 缓存NBA会话状态
             * </pre>
             */
            public Builder clearNreserved1() {
                bitField4_ = (bitField4_ & ~0x00000010);
                nreserved1_ = 0;
                onChanged();
                return this;
            }

            // optional int32 nreserved2 = 139;
            private int nreserved2_;

            /**
             * <code>optional int32 nreserved2 = 139;</code>
             * <p>
             * <pre>
             * 2014-02-27新增：告警申诉状态（需要有未申诉、处理中、申诉失败标识，申诉人可改变此状态）
             * </pre>
             */
            public boolean hasNreserved2() {
                return ((bitField4_ & 0x00000020) == 0x00000020);
            }

            /**
             * <code>optional int32 nreserved2 = 139;</code>
             * <p>
             * <pre>
             * 2014-02-27新增：告警申诉状态（需要有未申诉、处理中、申诉失败标识，申诉人可改变此状态）
             * </pre>
             */
            public int getNreserved2() {
                return nreserved2_;
            }

            /**
             * <code>optional int32 nreserved2 = 139;</code>
             * <p>
             * <pre>
             * 2014-02-27新增：告警申诉状态（需要有未申诉、处理中、申诉失败标识，申诉人可改变此状态）
             * </pre>
             */
            public Builder setNreserved2(int value) {
                bitField4_ |= 0x00000020;
                nreserved2_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 nreserved2 = 139;</code>
             * <p>
             * <pre>
             * 2014-02-27新增：告警申诉状态（需要有未申诉、处理中、申诉失败标识，申诉人可改变此状态）
             * </pre>
             */
            public Builder clearNreserved2() {
                bitField4_ = (bitField4_ & ~0x00000020);
                nreserved2_ = 0;
                onChanged();
                return this;
            }

            // optional int32 nreserved3 = 140;
            private int nreserved3_;

            /**
             * <code>optional int32 nreserved3 = 140;</code>
             * <p>
             * <pre>
             *
             * </pre>
             */
            public boolean hasNreserved3() {
                return ((bitField4_ & 0x00000040) == 0x00000040);
            }

            /**
             * <code>optional int32 nreserved3 = 140;</code>
             * <p>
             * <pre>
             *
             * </pre>
             */
            public int getNreserved3() {
                return nreserved3_;
            }

            /**
             * <code>optional int32 nreserved3 = 140;</code>
             * <p>
             * <pre>
             *
             * </pre>
             */
            public Builder setNreserved3(int value) {
                bitField4_ |= 0x00000040;
                nreserved3_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 nreserved3 = 140;</code>
             * <p>
             * <pre>
             *
             * </pre>
             */
            public Builder clearNreserved3() {
                bitField4_ = (bitField4_ & ~0x00000040);
                nreserved3_ = 0;
                onChanged();
                return this;
            }

            // optional int32 nreserved4 = 141;
            private int nreserved4_;

            /**
             * <code>optional int32 nreserved4 = 141;</code>
             */
            public boolean hasNreserved4() {
                return ((bitField4_ & 0x00000080) == 0x00000080);
            }

            /**
             * <code>optional int32 nreserved4 = 141;</code>
             */
            public int getNreserved4() {
                return nreserved4_;
            }

            /**
             * <code>optional int32 nreserved4 = 141;</code>
             */
            public Builder setNreserved4(int value) {
                bitField4_ |= 0x00000080;
                nreserved4_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 nreserved4 = 141;</code>
             */
            public Builder clearNreserved4() {
                bitField4_ = (bitField4_ & ~0x00000080);
                nreserved4_ = 0;
                onChanged();
                return this;
            }

            // optional .sp.ANA_POLICY_TYPE ana_policy_type = 142;
            private sp.AuditEnum.ANA_POLICY_TYPE anaPolicyType_ = sp.AuditEnum.ANA_POLICY_TYPE.FILTER_POLICY;

            /**
             * <code>optional .sp.ANA_POLICY_TYPE ana_policy_type = 142;</code>
             * <p>
             * <pre>
             * 分析策略类型ID，经过ABA分析策略处理之后，才会有该值，特用于 ABA
             * </pre>
             */
            public boolean hasAnaPolicyType() {
                return ((bitField4_ & 0x00000100) == 0x00000100);
            }

            /**
             * <code>optional .sp.ANA_POLICY_TYPE ana_policy_type = 142;</code>
             * <p>
             * <pre>
             * 分析策略类型ID，经过ABA分析策略处理之后，才会有该值，特用于 ABA
             * </pre>
             */
            public sp.AuditEnum.ANA_POLICY_TYPE getAnaPolicyType() {
                return anaPolicyType_;
            }

            /**
             * <code>optional .sp.ANA_POLICY_TYPE ana_policy_type = 142;</code>
             * <p>
             * <pre>
             * 分析策略类型ID，经过ABA分析策略处理之后，才会有该值，特用于 ABA
             * </pre>
             */
            public Builder setAnaPolicyType(sp.AuditEnum.ANA_POLICY_TYPE value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField4_ |= 0x00000100;
                anaPolicyType_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional .sp.ANA_POLICY_TYPE ana_policy_type = 142;</code>
             * <p>
             * <pre>
             * 分析策略类型ID，经过ABA分析策略处理之后，才会有该值，特用于 ABA
             * </pre>
             */
            public Builder clearAnaPolicyType() {
                bitField4_ = (bitField4_ & ~0x00000100);
                anaPolicyType_ = sp.AuditEnum.ANA_POLICY_TYPE.FILTER_POLICY;
                onChanged();
                return this;
            }

            // optional bytes ana_policy_name = 143;
            private com.google.protobuf.ByteString anaPolicyName_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes ana_policy_name = 143;</code>
             * <p>
             * <pre>
             * 分析策略名称，经过ABA分析策略处理之后，才会有该值，特用于 ABA
             * </pre>
             */
            public boolean hasAnaPolicyName() {
                return ((bitField4_ & 0x00000200) == 0x00000200);
            }

            /**
             * <code>optional bytes ana_policy_name = 143;</code>
             * <p>
             * <pre>
             * 分析策略名称，经过ABA分析策略处理之后，才会有该值，特用于 ABA
             * </pre>
             */
            public com.google.protobuf.ByteString getAnaPolicyName() {
                return anaPolicyName_;
            }

            /**
             * <code>optional bytes ana_policy_name = 143;</code>
             * <p>
             * <pre>
             * 分析策略名称，经过ABA分析策略处理之后，才会有该值，特用于 ABA
             * </pre>
             */
            public Builder setAnaPolicyName(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField4_ |= 0x00000200;
                anaPolicyName_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes ana_policy_name = 143;</code>
             * <p>
             * <pre>
             * 分析策略名称，经过ABA分析策略处理之后，才会有该值，特用于 ABA
             * </pre>
             */
            public Builder clearAnaPolicyName() {
                bitField4_ = (bitField4_ & ~0x00000200);
                anaPolicyName_ = getDefaultInstance().getAnaPolicyName();
                onChanged();
                return this;
            }

            // optional int32 boss_trea_scene_type = 144;
            private int bossTreaSceneType_;

            /**
             * <code>optional int32 boss_trea_scene_type = 144;</code>
             * <p>
             * <pre>
             * 业支专用金库场景类型ID
             * </pre>
             */
            public boolean hasBossTreaSceneType() {
                return ((bitField4_ & 0x00000400) == 0x00000400);
            }

            /**
             * <code>optional int32 boss_trea_scene_type = 144;</code>
             * <p>
             * <pre>
             * 业支专用金库场景类型ID
             * </pre>
             */
            public int getBossTreaSceneType() {
                return bossTreaSceneType_;
            }

            /**
             * <code>optional int32 boss_trea_scene_type = 144;</code>
             * <p>
             * <pre>
             * 业支专用金库场景类型ID
             * </pre>
             */
            public Builder setBossTreaSceneType(int value) {
                bitField4_ |= 0x00000400;
                bossTreaSceneType_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 boss_trea_scene_type = 144;</code>
             * <p>
             * <pre>
             * 业支专用金库场景类型ID
             * </pre>
             */
            public Builder clearBossTreaSceneType() {
                bitField4_ = (bitField4_ & ~0x00000400);
                bossTreaSceneType_ = 0;
                onChanged();
                return this;
            }

            // optional bytes boss_trea_scene_name = 145;
            private com.google.protobuf.ByteString bossTreaSceneName_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes boss_trea_scene_name = 145;</code>
             * <p>
             * <pre>
             * 业支专用金库场景类型名称
             * </pre>
             */
            public boolean hasBossTreaSceneName() {
                return ((bitField4_ & 0x00000800) == 0x00000800);
            }

            /**
             * <code>optional bytes boss_trea_scene_name = 145;</code>
             * <p>
             * <pre>
             * 业支专用金库场景类型名称
             * </pre>
             */
            public com.google.protobuf.ByteString getBossTreaSceneName() {
                return bossTreaSceneName_;
            }

            /**
             * <code>optional bytes boss_trea_scene_name = 145;</code>
             * <p>
             * <pre>
             * 业支专用金库场景类型名称
             * </pre>
             */
            public Builder setBossTreaSceneName(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField4_ |= 0x00000800;
                bossTreaSceneName_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes boss_trea_scene_name = 145;</code>
             * <p>
             * <pre>
             * 业支专用金库场景类型名称
             * </pre>
             */
            public Builder clearBossTreaSceneName() {
                bitField4_ = (bitField4_ & ~0x00000800);
                bossTreaSceneName_ = getDefaultInstance().getBossTreaSceneName();
                onChanged();
                return this;
            }

            // optional bytes clientip = 146;
            private com.google.protobuf.ByteString clientip_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes clientip = 146;</code>
             * <p>
             * <pre>
             * 客户端IP，补全后的客户端真实源IP
             * </pre>
             */
            public boolean hasClientip() {
                return ((bitField4_ & 0x00001000) == 0x00001000);
            }

            /**
             * <code>optional bytes clientip = 146;</code>
             * <p>
             * <pre>
             * 客户端IP，补全后的客户端真实源IP
             * </pre>
             */
            public com.google.protobuf.ByteString getClientip() {
                return clientip_;
            }

            /**
             * <code>optional bytes clientip = 146;</code>
             * <p>
             * <pre>
             * 客户端IP，补全后的客户端真实源IP
             * </pre>
             */
            public Builder setClientip(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField4_ |= 0x00001000;
                clientip_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes clientip = 146;</code>
             * <p>
             * <pre>
             * 客户端IP，补全后的客户端真实源IP
             * </pre>
             */
            public Builder clearClientip() {
                bitField4_ = (bitField4_ & ~0x00001000);
                clientip_ = getDefaultInstance().getClientip();
                onChanged();
                return this;
            }

            // optional uint32 processid = 147;
            private int processid_;

            /**
             * <code>optional uint32 processid = 147;</code>
             * <p>
             * <pre>
             * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
             * </pre>
             */
            public boolean hasProcessid() {
                return ((bitField4_ & 0x00002000) == 0x00002000);
            }

            /**
             * <code>optional uint32 processid = 147;</code>
             * <p>
             * <pre>
             * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
             * </pre>
             */
            public int getProcessid() {
                return processid_;
            }

            /**
             * <code>optional uint32 processid = 147;</code>
             * <p>
             * <pre>
             * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
             * </pre>
             */
            public Builder setProcessid(int value) {
                bitField4_ |= 0x00002000;
                processid_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional uint32 processid = 147;</code>
             * <p>
             * <pre>
             * 2014-03-06: 兼容IPv6，故只能改为用字符串传送
             * </pre>
             */
            public Builder clearProcessid() {
                bitField4_ = (bitField4_ & ~0x00002000);
                processid_ = 0;
                onChanged();
                return this;
            }

            // optional bytes proc_starttime = 148;
            private com.google.protobuf.ByteString procStarttime_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes proc_starttime = 148;</code>
             * <p>
             * <pre>
             * 进程启动时间
             * </pre>
             */
            public boolean hasProcStarttime() {
                return ((bitField4_ & 0x00004000) == 0x00004000);
            }

            /**
             * <code>optional bytes proc_starttime = 148;</code>
             * <p>
             * <pre>
             * 进程启动时间
             * </pre>
             */
            public com.google.protobuf.ByteString getProcStarttime() {
                return procStarttime_;
            }

            /**
             * <code>optional bytes proc_starttime = 148;</code>
             * <p>
             * <pre>
             * 进程启动时间
             * </pre>
             */
            public Builder setProcStarttime(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField4_ |= 0x00004000;
                procStarttime_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes proc_starttime = 148;</code>
             * <p>
             * <pre>
             * 进程启动时间
             * </pre>
             */
            public Builder clearProcStarttime() {
                bitField4_ = (bitField4_ & ~0x00004000);
                procStarttime_ = getDefaultInstance().getProcStarttime();
                onChanged();
                return this;
            }

            // optional uint32 duration = 149;
            private int duration_;

            /**
             * <code>optional uint32 duration = 149;</code>
             * <p>
             * <pre>
             * 持续时长
             * </pre>
             */
            public boolean hasDuration() {
                return ((bitField4_ & 0x00008000) == 0x00008000);
            }

            /**
             * <code>optional uint32 duration = 149;</code>
             * <p>
             * <pre>
             * 持续时长
             * </pre>
             */
            public int getDuration() {
                return duration_;
            }

            /**
             * <code>optional uint32 duration = 149;</code>
             * <p>
             * <pre>
             * 持续时长
             * </pre>
             */
            public Builder setDuration(int value) {
                bitField4_ |= 0x00008000;
                duration_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional uint32 duration = 149;</code>
             * <p>
             * <pre>
             * 持续时长
             * </pre>
             */
            public Builder clearDuration() {
                bitField4_ = (bitField4_ & ~0x00008000);
                duration_ = 0;
                onChanged();
                return this;
            }

            // optional int32 protocol = 150;
            private int protocol_;

            /**
             * <code>optional int32 protocol = 150;</code>
             * <p>
             * <pre>
             * 协议
             * </pre>
             */
            public boolean hasProtocol() {
                return ((bitField4_ & 0x00010000) == 0x00010000);
            }

            /**
             * <code>optional int32 protocol = 150;</code>
             * <p>
             * <pre>
             * 协议
             * </pre>
             */
            public int getProtocol() {
                return protocol_;
            }

            /**
             * <code>optional int32 protocol = 150;</code>
             * <p>
             * <pre>
             * 协议
             * </pre>
             */
            public Builder setProtocol(int value) {
                bitField4_ |= 0x00010000;
                protocol_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 protocol = 150;</code>
             * <p>
             * <pre>
             * 协议
             * </pre>
             */
            public Builder clearProtocol() {
                bitField4_ = (bitField4_ & ~0x00010000);
                protocol_ = 0;
                onChanged();
                return this;
            }

            // optional uint32 serv_port = 151;
            private int servPort_;

            /**
             * <code>optional uint32 serv_port = 151;</code>
             * <p>
             * <pre>
             * 服务端口
             * </pre>
             */
            public boolean hasServPort() {
                return ((bitField4_ & 0x00020000) == 0x00020000);
            }

            /**
             * <code>optional uint32 serv_port = 151;</code>
             * <p>
             * <pre>
             * 服务端口
             * </pre>
             */
            public int getServPort() {
                return servPort_;
            }

            /**
             * <code>optional uint32 serv_port = 151;</code>
             * <p>
             * <pre>
             * 服务端口
             * </pre>
             */
            public Builder setServPort(int value) {
                bitField4_ |= 0x00020000;
                servPort_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional uint32 serv_port = 151;</code>
             * <p>
             * <pre>
             * 服务端口
             * </pre>
             */
            public Builder clearServPort() {
                bitField4_ = (bitField4_ & ~0x00020000);
                servPort_ = 0;
                onChanged();
                return this;
            }

            // optional float flownum = 152;
            private float flownum_;

            /**
             * <code>optional float flownum = 152;</code>
             * <p>
             * <pre>
             * 流量
             * </pre>
             */
            public boolean hasFlownum() {
                return ((bitField4_ & 0x00040000) == 0x00040000);
            }

            /**
             * <code>optional float flownum = 152;</code>
             * <p>
             * <pre>
             * 流量
             * </pre>
             */
            public float getFlownum() {
                return flownum_;
            }

            /**
             * <code>optional float flownum = 152;</code>
             * <p>
             * <pre>
             * 流量
             * </pre>
             */
            public Builder setFlownum(float value) {
                bitField4_ |= 0x00040000;
                flownum_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional float flownum = 152;</code>
             * <p>
             * <pre>
             * 流量
             * </pre>
             */
            public Builder clearFlownum() {
                bitField4_ = (bitField4_ & ~0x00040000);
                flownum_ = 0F;
                onChanged();
                return this;
            }

            // optional uint32 recnum = 153;
            private int recnum_;

            /**
             * <code>optional uint32 recnum = 153;</code>
             * <p>
             * <pre>
             * 操作记录数
             * </pre>
             */
            public boolean hasRecnum() {
                return ((bitField4_ & 0x00080000) == 0x00080000);
            }

            /**
             * <code>optional uint32 recnum = 153;</code>
             * <p>
             * <pre>
             * 操作记录数
             * </pre>
             */
            public int getRecnum() {
                return recnum_;
            }

            /**
             * <code>optional uint32 recnum = 153;</code>
             * <p>
             * <pre>
             * 操作记录数
             * </pre>
             */
            public Builder setRecnum(int value) {
                bitField4_ |= 0x00080000;
                recnum_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional uint32 recnum = 153;</code>
             * <p>
             * <pre>
             * 操作记录数
             * </pre>
             */
            public Builder clearRecnum() {
                bitField4_ = (bitField4_ & ~0x00080000);
                recnum_ = 0;
                onChanged();
                return this;
            }

            // optional bytes clientinfo = 154;
            private com.google.protobuf.ByteString clientinfo_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes clientinfo = 154;</code>
             * <p>
             * <pre>
             * 客户端信息
             * </pre>
             */
            public boolean hasClientinfo() {
                return ((bitField4_ & 0x00100000) == 0x00100000);
            }

            /**
             * <code>optional bytes clientinfo = 154;</code>
             * <p>
             * <pre>
             * 客户端信息
             * </pre>
             */
            public com.google.protobuf.ByteString getClientinfo() {
                return clientinfo_;
            }

            /**
             * <code>optional bytes clientinfo = 154;</code>
             * <p>
             * <pre>
             * 客户端信息
             * </pre>
             */
            public Builder setClientinfo(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField4_ |= 0x00100000;
                clientinfo_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes clientinfo = 154;</code>
             * <p>
             * <pre>
             * 客户端信息
             * </pre>
             */
            public Builder clearClientinfo() {
                bitField4_ = (bitField4_ & ~0x00100000);
                clientinfo_ = getDefaultInstance().getClientinfo();
                onChanged();
                return this;
            }

            // optional bytes serverinfo = 155;
            private com.google.protobuf.ByteString serverinfo_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes serverinfo = 155;</code>
             * <p>
             * <pre>
             * 服务端信息
             * </pre>
             */
            public boolean hasServerinfo() {
                return ((bitField4_ & 0x00200000) == 0x00200000);
            }

            /**
             * <code>optional bytes serverinfo = 155;</code>
             * <p>
             * <pre>
             * 服务端信息
             * </pre>
             */
            public com.google.protobuf.ByteString getServerinfo() {
                return serverinfo_;
            }

            /**
             * <code>optional bytes serverinfo = 155;</code>
             * <p>
             * <pre>
             * 服务端信息
             * </pre>
             */
            public Builder setServerinfo(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField4_ |= 0x00200000;
                serverinfo_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes serverinfo = 155;</code>
             * <p>
             * <pre>
             * 服务端信息
             * </pre>
             */
            public Builder clearServerinfo() {
                bitField4_ = (bitField4_ & ~0x00200000);
                serverinfo_ = getDefaultInstance().getServerinfo();
                onChanged();
                return this;
            }

            // optional int32 logclass = 156;
            private int logclass_;

            /**
             * <code>optional int32 logclass = 156;</code>
             * <p>
             * <pre>
             * 日志种类
             * </pre>
             */
            public boolean hasLogclass() {
                return ((bitField4_ & 0x00400000) == 0x00400000);
            }

            /**
             * <code>optional int32 logclass = 156;</code>
             * <p>
             * <pre>
             * 日志种类
             * </pre>
             */
            public int getLogclass() {
                return logclass_;
            }

            /**
             * <code>optional int32 logclass = 156;</code>
             * <p>
             * <pre>
             * 日志种类
             * </pre>
             */
            public Builder setLogclass(int value) {
                bitField4_ |= 0x00400000;
                logclass_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 logclass = 156;</code>
             * <p>
             * <pre>
             * 日志种类
             * </pre>
             */
            public Builder clearLogclass() {
                bitField4_ = (bitField4_ & ~0x00400000);
                logclass_ = 0;
                onChanged();
                return this;
            }

            // optional int32 gbasport = 157;
            private int gbasport_;

            /**
             * <code>optional int32 gbasport = 157;</code>
             * <p>
             * <pre>
             * GBA连接设备时使用的源端口，内部使用
             * </pre>
             */
            public boolean hasGbasport() {
                return ((bitField4_ & 0x00800000) == 0x00800000);
            }

            /**
             * <code>optional int32 gbasport = 157;</code>
             * <p>
             * <pre>
             * GBA连接设备时使用的源端口，内部使用
             * </pre>
             */
            public int getGbasport() {
                return gbasport_;
            }

            /**
             * <code>optional int32 gbasport = 157;</code>
             * <p>
             * <pre>
             * GBA连接设备时使用的源端口，内部使用
             * </pre>
             */
            public Builder setGbasport(int value) {
                bitField4_ |= 0x00800000;
                gbasport_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional int32 gbasport = 157;</code>
             * <p>
             * <pre>
             * GBA连接设备时使用的源端口，内部使用
             * </pre>
             */
            public Builder clearGbasport() {
                bitField4_ = (bitField4_ & ~0x00800000);
                gbasport_ = 0;
                onChanged();
                return this;
            }

            // optional bytes iba_fillmemo = 158;
            private com.google.protobuf.ByteString ibaFillmemo_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>optional bytes iba_fillmemo = 158;</code>
             * <p>
             * <pre>
             * IBA补全依据(内部使用)
             * </pre>
             */
            public boolean hasIbaFillmemo() {
                return ((bitField4_ & 0x01000000) == 0x01000000);
            }

            /**
             * <code>optional bytes iba_fillmemo = 158;</code>
             * <p>
             * <pre>
             * IBA补全依据(内部使用)
             * </pre>
             */
            public com.google.protobuf.ByteString getIbaFillmemo() {
                return ibaFillmemo_;
            }

            /**
             * <code>optional bytes iba_fillmemo = 158;</code>
             * <p>
             * <pre>
             * IBA补全依据(内部使用)
             * </pre>
             */
            public Builder setIbaFillmemo(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField4_ |= 0x01000000;
                ibaFillmemo_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional bytes iba_fillmemo = 158;</code>
             * <p>
             * <pre>
             * IBA补全依据(内部使用)
             * </pre>
             */
            public Builder clearIbaFillmemo() {
                bitField4_ = (bitField4_ & ~0x01000000);
                ibaFillmemo_ = getDefaultInstance().getIbaFillmemo();
                onChanged();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:sp.T_AUDIT_LOG)
        }

        static {
            defaultInstance = new T_AUDIT_LOG(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:sp.T_AUDIT_LOG)
    }

    private static com.google.protobuf.Descriptors.Descriptor
            internal_static_sp_T_ALARM_LOG_descriptor;
    private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internal_static_sp_T_ALARM_LOG_fieldAccessorTable;
    private static com.google.protobuf.Descriptors.Descriptor
            internal_static_sp_T_AUDIT_LOG_descriptor;
    private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internal_static_sp_T_AUDIT_LOG_fieldAccessorTable;

    public static com.google.protobuf.Descriptors.FileDescriptor
    getDescriptor() {
        return descriptor;
    }

    private static com.google.protobuf.Descriptors.FileDescriptor
            descriptor;

    static {
        java.lang.String[] descriptorData = {
                "\n\017audit_log.proto\022\002sp\032\020audit_enum.proto\"" +
                        "\230\001\n\013T_ALARM_LOG\022\020\n\010alarm_id\030\001 \001(\005\022\022\n\nala" +
                        "rm_name\030\002 \001(\014\022\017\n\007content\030\003 \001(\014\022\020\n\010soluti" +
                        "on\030\004 \001(\005\022\014\n\004mail\030\005 \001(\014\022\r\n\005phone\030\006 \001(\014\022\021\n" +
                        "\tsyslog_ip\030\007 \001(\014\022\020\n\010relay_ip\030\010 \001(\014\"\200\031\n\013T" +
                        "_AUDIT_LOG\022\013\n\003sid\030\001 \002(\014\022\036\n\005alarm\030\002 \001(\0132\017" +
                        ".sp.T_ALARM_LOG\022\014\n\004mark\030\010 \001(\005\022\013\n\003seq\030\t \001" +
                        "(\r\022\021\n\tsessionid\030\n \001(\014\022\025\n\rana_policy_id\030\013" +
                        " \001(\005\022\036\n\010log_type\030\014 \002(\0162\014.sp.LOG_TYPE\022\027\n\017" +
                        "audit_logtypeid\030\r \001(\005\022\031\n\021audit_logtypena",
                "me\030\016 \001(\014\022\016\n\006ast_id\030\017 \001(\005\022\016\n\006ast_ip\030\020 \001(\014" +
                        "\022\020\n\010ast_name\030\021 \001(\014\022\027\n\017ast_region_code\030\022 " +
                        "\001(\014\022\027\n\017ast_region_name\030\023 \001(\014\022\014\n\004hgid\030\024 \001" +
                        "(\005\022\016\n\006hgname\030\025 \001(\014\022\017\n\007progkey\030\026 \001(\014\022\023\n\013a" +
                        "st_type_id\030\027 \001(\005\022\025\n\rast_type_code\030\030 \001(\014\022" +
                        "\025\n\rast_type_name\030\031 \001(\014\022\021\n\tast_admin\030\032 \001(" +
                        "\014\022\017\n\007key_ast\030\033 \001(\005\022\021\n\tengine_id\030\034 \001(\005\022\'\n" +
                        "\013engine_type\030\035 \001(\0162\022.sp.COMPONENT_TYPE\022\021" +
                        "\n\tengine_ip\030\036 \001(\014\022\030\n\020engine_type_name\030\037 " +
                        "\001(\014\022\025\n\rlog_source_ip\030  \001(\014\022\016\n\006userid\030! \001",
                "(\005\022\017\n\007logname\030\" \001(\014\022\r\n\005uname\030# \001(\014\022\014\n\004ou" +
                        "id\030$ \001(\005\022\016\n\006ouname\030% \001(\014\022\027\n\017logname_type" +
                        "_id\030& \001(\005\022\024\n\014logname_type\030\' \001(\014\022\033\n\023logna" +
                        "me_region_code\030( \001(\014\022\026\n\016logname_region\030)" +
                        " \001(\014\022\026\n\016logname_status\030* \001(\005\022\031\n\021treasury" +
                        "_log_type\030+ \001(\005\022\021\n\tco_userid\030, \001(\005\022\027\n\017co" +
                        "_user_logname\030- \001(\014\022\024\n\014co_user_name\030. \001(" +
                        "\014\022\026\n\016co_user_org_id\030/ \001(\005\022\030\n\020co_user_org" +
                        "_name\0300 \001(\014\022\026\n\016co_user_mobile\0301 \001(\014\022\033\n\023t" +
                        "reasury_scene_type\0302 \001(\005\022\031\n\021treasury_sce",
                "ne_id\0303 \001(\014\022\033\n\023treasury_scene_name\0304 \001(\014" +
                        "\022\032\n\022treasury_auth_type\0305 \001(\005\022\023\n\013access_t" +
                        "ype\0306 \001(\014\022\027\n\017apply_time_slot\0307 \001(\014\022\027\n\017tr" +
                        "easury_status\0308 \001(\005\022\033\n\023special_service_n" +
                        "um\0309 \001(\014\022\023\n\013auth_result\030: \001(\014\022\023\n\013sms_con" +
                        "tent\030; \001(\014\022\022\n\naccount_id\030< \001(\005\022\017\n\007accoun" +
                        "t\030= \001(\014\022\022\n\napp_ouname\030> \001(\014\022\027\n\017account_t" +
                        "ype_id\030? \001(\005\022\031\n\021account_type_name\030@ \001(\014\022" +
                        "\033\n\023account_region_code\030A \001(\014\022\026\n\016account_" +
                        "region\030B \001(\014\022\026\n\016account_status\030C \001(\005\022\023\n\013",
                "logtime_sec\030D \002(\004\022\024\n\014logtime_msec\030E \001(\004\022" +
                        "\017\n\007endtime\030F \001(\014\022\022\n\ngather_sec\030G \001(\004\022\023\n\013" +
                        "gather_msec\030H \001(\004\022\013\n\003sip\030I \001(\014\022\014\n\004smac\030J" +
                        " \001(\014\022\r\n\005sport\030K \001(\r\022\013\n\003dip\030L \001(\014\022\014\n\004dmac" +
                        "\030M \001(\014\022\r\n\005dport\030N \001(\r\022\017\n\007eventid\030O \001(\005\022\"" +
                        "\n\nrisk_level\030P \001(\0162\016.sp.RISK_LEVEL\022\017\n\007op" +
                        "erate\030Q \001(\014\022\016\n\006obj_id\030R \001(\014\022\013\n\003obj\030S \001(\014" +
                        "\022\025\n\robj_parent_id\030T \001(\014\022\027\n\017obj_parent_na" +
                        "me\030U \001(\014\022\032\n\022objectstation_code\030V \001(\014\022\032\n\022" +
                        "objectstation_name\030W \001(\014\022\016\n\006result\030X \001(\014",
                "\022\017\n\007retcode\030Y \001(\005\022\023\n\013processname\030Z \001(\014\022\020" +
                        "\n\010workinfo\030[ \001(\014\022\021\n\tlogreason\030\\ \001(\014\022\r\n\005v" +
                        "data\030] \001(\014\022\020\n\010facility\030^ \001(\005\022\020\n\010severity" +
                        "\030_ \001(\005\022\014\n\004memo\030` \001(\014\022\022\n\nhbasession\030a \001(\014" +
                        "\022\022\n\nop_type_id\030b \001(\005\022\017\n\007op_type\030c \001(\014\022\023\n" +
                        "\013op_class_id\030d \001(\005\022\020\n\010op_class\030e \001(\014\022\022\n\n" +
                        "op_item_id\030f \001(\005\022\017\n\007op_item\030g \001(\014\022\017\n\007op_" +
                        "code\030h \001(\014\022\021\n\top_key_id\030i \001(\005\022\016\n\006op_key\030" +
                        "j \001(\014\022\025\n\roperatetypeid\030k \001(\014\022\027\n\017operatet" +
                        "ypename\030l \001(\014\022\020\n\010authtype\030m \001(\014\022\r\n\005logid",
                "\030n \001(\014\022\017\n\007orgname\030o \001(\014\022\020\n\010recdefid\030p \001(" +
                        "\014\022\021\n\trecdedate\030q \001(\014\022\017\n\007formnum\030r \001(\014\022\020\n" +
                        "\010jobcount\030s \001(\014\022\017\n\007okcount\030t \001(\014\022\021\n\tfail" +
                        "count\030u \001(\014\022\022\n\nservnumber\030v \001(\014\022\017\n\007recna" +
                        "me\030w \001(\014\022\016\n\006status\030x \001(\014\022\020\n\010filluuid\030y \001" +
                        "(\014\022\021\n\treserved0\030z \001(\014\022\021\n\treserved1\030{ \001(\014" +
                        "\022\021\n\treserved2\030| \001(\014\022\021\n\treserved3\030} \001(\014\022\021" +
                        "\n\treserved4\030~ \001(\014\022\021\n\treserved5\030\177 \001(\014\022\022\n\t" +
                        "reserved6\030\200\001 \001(\014\022\022\n\treserved7\030\201\001 \001(\014\022\022\n\t" +
                        "reserved8\030\202\001 \001(\014\022\022\n\treserved9\030\203\001 \001(\014\022\020\n\007",
                "res_key\030\204\001 \001(\014\022\021\n\010logtable\030\205\001 \001(\014\022\023\n\nfun" +
                        "ctionid\030\206\001 \001(\005\022\025\n\014functionname\030\207\001 \001(\014\022\022\n" +
                        "\tdirection\030\210\001 \001(\005\022\023\n\nnreserved0\030\211\001 \001(\005\022\023" +
                        "\n\nnreserved1\030\212\001 \001(\005\022\023\n\nnreserved2\030\213\001 \001(\005" +
                        "\022\023\n\nnreserved3\030\214\001 \001(\005\022\023\n\nnreserved4\030\215\001 \001" +
                        "(\005\022-\n\017ana_policy_type\030\216\001 \001(\0162\023.sp.ANA_PO" +
                        "LICY_TYPE\022\030\n\017ana_policy_name\030\217\001 \001(\014\022\035\n\024b" +
                        "oss_trea_scene_type\030\220\001 \001(\005\022\035\n\024boss_trea_" +
                        "scene_name\030\221\001 \001(\014\022\021\n\010clientip\030\222\001 \001(\014\022\022\n\t" +
                        "processid\030\223\001 \001(\r\022\027\n\016proc_starttime\030\224\001 \001(",
                "\014\022\021\n\010duration\030\225\001 \001(\r\022\021\n\010protocol\030\226\001 \001(\005\022" +
                        "\022\n\tserv_port\030\227\001 \001(\r\022\020\n\007flownum\030\230\001 \001(\002\022\017\n" +
                        "\006recnum\030\231\001 \001(\r\022\023\n\nclientinfo\030\232\001 \001(\014\022\023\n\ns" +
                        "erverinfo\030\233\001 \001(\014\022\021\n\010logclass\030\234\001 \001(\005\022\021\n\010g" +
                        "basport\030\235\001 \001(\005\022\025\n\014iba_fillmemo\030\236\001 \001(\014"
        };
        com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
                new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
                    public com.google.protobuf.ExtensionRegistry assignDescriptors(
                            com.google.protobuf.Descriptors.FileDescriptor root) {
                        descriptor = root;
                        internal_static_sp_T_ALARM_LOG_descriptor =
                                getDescriptor().getMessageTypes().get(0);
                        internal_static_sp_T_ALARM_LOG_fieldAccessorTable = new
                                com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                                internal_static_sp_T_ALARM_LOG_descriptor,
                                new java.lang.String[]{"AlarmId", "AlarmName", "Content", "Solution", "Mail", "Phone", "SyslogIp", "RelayIp",});
                        internal_static_sp_T_AUDIT_LOG_descriptor =
                                getDescriptor().getMessageTypes().get(1);
                        internal_static_sp_T_AUDIT_LOG_fieldAccessorTable = new
                                com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                                internal_static_sp_T_AUDIT_LOG_descriptor,
                                new java.lang.String[]{"Sid", "Alarm", "Mark", "Seq", "Sessionid", "AnaPolicyId", "LogType", "AuditLogtypeid", "AuditLogtypename", "AstId", "AstIp", "AstName", "AstRegionCode", "AstRegionName", "Hgid", "Hgname", "Progkey", "AstTypeId", "AstTypeCode", "AstTypeName", "AstAdmin", "KeyAst", "EngineId", "EngineType", "EngineIp", "EngineTypeName", "LogSourceIp", "Userid", "Logname", "Uname", "Ouid", "Ouname", "LognameTypeId", "LognameType", "LognameRegionCode", "LognameRegion", "LognameStatus", "TreasuryLogType", "CoUserid", "CoUserLogname", "CoUserName", "CoUserOrgId", "CoUserOrgName", "CoUserMobile", "TreasurySceneType", "TreasurySceneId", "TreasurySceneName", "TreasuryAuthType", "AccessType", "ApplyTimeSlot", "TreasuryStatus", "SpecialServiceNum", "AuthResult", "SmsContent", "AccountId", "Account", "AppOuname", "AccountTypeId", "AccountTypeName", "AccountRegionCode", "AccountRegion", "AccountStatus", "LogtimeSec", "LogtimeMsec", "Endtime", "GatherSec", "GatherMsec", "Sip", "Smac", "Sport", "Dip", "Dmac", "Dport", "Eventid", "RiskLevel", "Operate", "ObjId", "Obj", "ObjParentId", "ObjParentName", "ObjectstationCode", "ObjectstationName", "Result", "Retcode", "Processname", "Workinfo", "Logreason", "Vdata", "Facility", "Severity", "Memo", "Hbasession", "OpTypeId", "OpType", "OpClassId", "OpClass", "OpItemId", "OpItem", "OpCode", "OpKeyId", "OpKey", "Operatetypeid", "Operatetypename", "Authtype", "Logid", "Orgname", "Recdefid", "Recdedate", "Formnum", "Jobcount", "Okcount", "Failcount", "Servnumber", "Recname", "Status", "Filluuid", "Reserved0", "Reserved1", "Reserved2", "Reserved3", "Reserved4", "Reserved5", "Reserved6", "Reserved7", "Reserved8", "Reserved9", "ResKey", "Logtable", "Functionid", "Functionname", "Direction", "Nreserved0", "Nreserved1", "Nreserved2", "Nreserved3", "Nreserved4", "AnaPolicyType", "AnaPolicyName", "BossTreaSceneType", "BossTreaSceneName", "Clientip", "Processid", "ProcStarttime", "Duration", "Protocol", "ServPort", "Flownum", "Recnum", "Clientinfo", "Serverinfo", "Logclass", "Gbasport", "IbaFillmemo",});
                        return null;
                    }
                };
        com.google.protobuf.Descriptors.FileDescriptor
                .internalBuildGeneratedFileFrom(descriptorData,
                        new com.google.protobuf.Descriptors.FileDescriptor[]{
                                sp.AuditEnum.getDescriptor(),
                        }, assigner);
    }

    // @@protoc_insertion_point(outer_class_scope)
}
