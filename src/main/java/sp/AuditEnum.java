// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: audit_enum.proto

package sp;

public final class AuditEnum {
  private AuditEnum() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code sp.DIRECTION}
   */
  public enum DIRECTION
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>REQUEST = 0;</code>
     */
    REQUEST(0, 0),
    /**
     * <code>RESPONSE = 1;</code>
     */
    RESPONSE(1, 1),
    ;

    /**
     * <code>REQUEST = 0;</code>
     */
    public static final int REQUEST_VALUE = 0;
    /**
     * <code>RESPONSE = 1;</code>
     */
    public static final int RESPONSE_VALUE = 1;


    public final int getNumber() { return value; }

    public static DIRECTION valueOf(int value) {
      switch (value) {
        case 0: return REQUEST;
        case 1: return RESPONSE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DIRECTION>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<DIRECTION>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DIRECTION>() {
            public DIRECTION findValueByNumber(int number) {
              return DIRECTION.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return AuditEnum.getDescriptor().getEnumTypes().get(0);
    }

    private static final DIRECTION[] VALUES = values();

    public static DIRECTION valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private DIRECTION(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:sp.DIRECTION)
  }

  /**
   * Protobuf enum {@code sp.LOGCLASS}
   *
   * <pre>
   ** 打包时，缓冲区的头部为 LENGTH(4BYTES) + LOGCLASS(4BYTES)
   * </pre>
   */
  public enum LOGCLASS
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>LC_USERSESSION = 1;</code>
     *
     * <pre>
     * 用户会话，t_user_session
     * </pre>
     */
    LC_USERSESSION(0, 1),
    /**
     * <code>LC_STREAM = 2;</code>
     *
     * <pre>
     * TCP会话, t_stream
     * </pre>
     */
    LC_STREAM(1, 2),
    /**
     * <code>LC_OPER = 3;</code>
     *
     * <pre>
     * 终端详细操作，t_oper
     * </pre>
     */
    LC_OPER(2, 3),
    /**
     * <code>LC_TREASURY = 4;</code>
     *
     * <pre>
     * 金库日志中除金库操作之外的所有管理类日志，t_treasury_log
     * </pre>
     */
    LC_TREASURY(3, 4),
    /**
     * <code>LC_TREAOPER = 5;</code>
     *
     * <pre>
     * 金库操作日志，t_treasury_oper
     * </pre>
     */
    LC_TREAOPER(4, 5),
    /**
     * <code>LC_HBA = 6;</code>
     *
     * <pre>
     * 系统日志，t_hba_log
     * </pre>
     */
    LC_HBA(5, 6),
    /**
     * <code>LC_CPSPROXY = 7;</code>
     *
     * <pre>
     * CPS代理日志, t_proxy_log
     * </pre>
     */
    LC_CPSPROXY(6, 7),
    /**
     * <code>LC_INCOMPLETE = 8;</code>
     *
     * <pre>
     * 不完整日志
     * </pre>
     */
    LC_INCOMPLETE(7, 8),
    /**
     * <code>LC_INVALID = 9;</code>
     *
     * <pre>
     * 不合法日志
     * </pre>
     */
    LC_INVALID(8, 9),
    /**
     * <code>LC_IAM = 20;</code>
     *
     * <pre>
     * 平台操作日志，t_iam_log
     * </pre>
     */
    LC_IAM(9, 20),
    /**
     * <code>LC_DETOUR = 21;</code>
     *
     * <pre>
     * 防绕行设备（系统）日志，t_detour_log
     * </pre>
     */
    LC_DETOUR(10, 21),
    /**
     * <code>LC_EVENT = 50;</code>
     *
     * <pre>
     * 经过筛选之后的待审计日志，eventdb.t_event_log
     * </pre>
     */
    LC_EVENT(11, 50),
    /**
     * <code>LC_KEYANA = 51;</code>
     *
     * <pre>
     * 关键字分析结果，eventdb.t_keyana_log
     * </pre>
     */
    LC_KEYANA(12, 51),
    /**
     * <code>LC_STATSANA = 52;</code>
     *
     * <pre>
     * 统计分析结果, eventdb.t_statsana_log
     * </pre>
     */
    LC_STATSANA(13, 52),
    /**
     * <code>LC_WARN = 53;</code>
     *
     * <pre>
     * 告警日志，t_warn_log
     * </pre>
     */
    LC_WARN(14, 53),
    /**
     * <code>LC_SUBJECT = 54;</code>
     *
     * <pre>
     * 分拣日志，日志中指定入库的表名
     * </pre>
     */
    LC_SUBJECT(15, 54),
    /**
     * <code>LC_DETOURANA = 55;</code>
     *
     * <pre>
     * 绕行分析结果, eventdb.t_detourana_log
     * </pre>
     */
    LC_DETOURANA(16, 55),
    /**
     * <code>LC_FORWARD_CPS = 99;</code>
     *
     * <pre>
     * 转发的CPS代理日志，仅供IBA之间同步之用
     * </pre>
     */
    LC_FORWARD_CPS(17, 99),
    ;

    /**
     * <code>LC_USERSESSION = 1;</code>
     *
     * <pre>
     * 用户会话，t_user_session
     * </pre>
     */
    public static final int LC_USERSESSION_VALUE = 1;
    /**
     * <code>LC_STREAM = 2;</code>
     *
     * <pre>
     * TCP会话, t_stream
     * </pre>
     */
    public static final int LC_STREAM_VALUE = 2;
    /**
     * <code>LC_OPER = 3;</code>
     *
     * <pre>
     * 终端详细操作，t_oper
     * </pre>
     */
    public static final int LC_OPER_VALUE = 3;
    /**
     * <code>LC_TREASURY = 4;</code>
     *
     * <pre>
     * 金库日志中除金库操作之外的所有管理类日志，t_treasury_log
     * </pre>
     */
    public static final int LC_TREASURY_VALUE = 4;
    /**
     * <code>LC_TREAOPER = 5;</code>
     *
     * <pre>
     * 金库操作日志，t_treasury_oper
     * </pre>
     */
    public static final int LC_TREAOPER_VALUE = 5;
    /**
     * <code>LC_HBA = 6;</code>
     *
     * <pre>
     * 系统日志，t_hba_log
     * </pre>
     */
    public static final int LC_HBA_VALUE = 6;
    /**
     * <code>LC_CPSPROXY = 7;</code>
     *
     * <pre>
     * CPS代理日志, t_proxy_log
     * </pre>
     */
    public static final int LC_CPSPROXY_VALUE = 7;
    /**
     * <code>LC_INCOMPLETE = 8;</code>
     *
     * <pre>
     * 不完整日志
     * </pre>
     */
    public static final int LC_INCOMPLETE_VALUE = 8;
    /**
     * <code>LC_INVALID = 9;</code>
     *
     * <pre>
     * 不合法日志
     * </pre>
     */
    public static final int LC_INVALID_VALUE = 9;
    /**
     * <code>LC_IAM = 20;</code>
     *
     * <pre>
     * 平台操作日志，t_iam_log
     * </pre>
     */
    public static final int LC_IAM_VALUE = 20;
    /**
     * <code>LC_DETOUR = 21;</code>
     *
     * <pre>
     * 防绕行设备（系统）日志，t_detour_log
     * </pre>
     */
    public static final int LC_DETOUR_VALUE = 21;
    /**
     * <code>LC_EVENT = 50;</code>
     *
     * <pre>
     * 经过筛选之后的待审计日志，eventdb.t_event_log
     * </pre>
     */
    public static final int LC_EVENT_VALUE = 50;
    /**
     * <code>LC_KEYANA = 51;</code>
     *
     * <pre>
     * 关键字分析结果，eventdb.t_keyana_log
     * </pre>
     */
    public static final int LC_KEYANA_VALUE = 51;
    /**
     * <code>LC_STATSANA = 52;</code>
     *
     * <pre>
     * 统计分析结果, eventdb.t_statsana_log
     * </pre>
     */
    public static final int LC_STATSANA_VALUE = 52;
    /**
     * <code>LC_WARN = 53;</code>
     *
     * <pre>
     * 告警日志，t_warn_log
     * </pre>
     */
    public static final int LC_WARN_VALUE = 53;
    /**
     * <code>LC_SUBJECT = 54;</code>
     *
     * <pre>
     * 分拣日志，日志中指定入库的表名
     * </pre>
     */
    public static final int LC_SUBJECT_VALUE = 54;
    /**
     * <code>LC_DETOURANA = 55;</code>
     *
     * <pre>
     * 绕行分析结果, eventdb.t_detourana_log
     * </pre>
     */
    public static final int LC_DETOURANA_VALUE = 55;
    /**
     * <code>LC_FORWARD_CPS = 99;</code>
     *
     * <pre>
     * 转发的CPS代理日志，仅供IBA之间同步之用
     * </pre>
     */
    public static final int LC_FORWARD_CPS_VALUE = 99;


    public final int getNumber() { return value; }

    public static LOGCLASS valueOf(int value) {
      switch (value) {
        case 1: return LC_USERSESSION;
        case 2: return LC_STREAM;
        case 3: return LC_OPER;
        case 4: return LC_TREASURY;
        case 5: return LC_TREAOPER;
        case 6: return LC_HBA;
        case 7: return LC_CPSPROXY;
        case 8: return LC_INCOMPLETE;
        case 9: return LC_INVALID;
        case 20: return LC_IAM;
        case 21: return LC_DETOUR;
        case 50: return LC_EVENT;
        case 51: return LC_KEYANA;
        case 52: return LC_STATSANA;
        case 53: return LC_WARN;
        case 54: return LC_SUBJECT;
        case 55: return LC_DETOURANA;
        case 99: return LC_FORWARD_CPS;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<LOGCLASS>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<LOGCLASS>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<LOGCLASS>() {
            public LOGCLASS findValueByNumber(int number) {
              return LOGCLASS.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return AuditEnum.getDescriptor().getEnumTypes().get(1);
    }

    private static final LOGCLASS[] VALUES = values();

    public static LOGCLASS valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private LOGCLASS(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:sp.LOGCLASS)
  }

  /**
   * Protobuf enum {@code sp.COMPONENT_TYPE}
   */
  public enum COMPONENT_TYPE
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ALL = 0;</code>
     */
    ALL(0, 0),
    /**
     * <code>NBA = 1;</code>
     */
    NBA(1, 1),
    /**
     * <code>SYSLOG = 2;</code>
     */
    SYSLOG(2, 2),
    /**
     * <code>FTP = 3;</code>
     */
    FTP(3, 3),
    /**
     * <code>TELNET = 4;</code>
     */
    TELNET(4, 4),
    /**
     * <code>JDBC = 5;</code>
     */
    JDBC(5, 5),
    /**
     * <code>GBA = 6;</code>
     */
    GBA(6, 6),
    /**
     * <code>CPS = 7;</code>
     */
    CPS(7, 7),
    /**
     * <code>IBA = 8;</code>
     */
    IBA(8, 8),
    /**
     * <code>FILTER = 9;</code>
     */
    FILTER(9, 9),
    /**
     * <code>NDE = 10;</code>
     */
    NDE(10, 10),
    /**
     * <code>ADMIN = 11;</code>
     */
    ADMIN(11, 11),
    /**
     * <code>_4A_ASCII = 12;</code>
     */
    _4A_ASCII(12, 12),
    /**
     * <code>IAM_SQUIRREL = 13;</code>
     */
    IAM_SQUIRREL(13, 13),
    /**
     * <code>SQUIRREL = 14;</code>
     */
    SQUIRREL(14, 14),
    /**
     * <code>GBATREASURY = 15;</code>
     */
    GBATREASURY(15, 15),
    /**
     * <code>ADMINCENTER = 16;</code>
     */
    ADMINCENTER(16, 16),
    /**
     * <code>PORTAL = 17;</code>
     */
    PORTAL(17, 17),
    /**
     * <code>LDAP = 18;</code>
     */
    LDAP(18, 18),
    /**
     * <code>LOG_MANAGER = 19;</code>
     */
    LOG_MANAGER(19, 19),
    /**
     * <code>BSB = 20;</code>
     */
    BSB(20, 20),
    /**
     * <code>POSTGRESQL = 21;</code>
     */
    POSTGRESQL(21, 21),
    /**
     * <code>ORACLE = 22;</code>
     */
    ORACLE(22, 22),
    /**
     * <code>CPS_LICENSE_SERVER = 23;</code>
     */
    CPS_LICENSE_SERVER(23, 23),
    /**
     * <code>CPS_WEB_INTERFACE = 24;</code>
     */
    CPS_WEB_INTERFACE(24, 24),
    /**
     * <code>PLAN = 25;</code>
     *
     * <pre>
     * Plan and Task
     * </pre>
     */
    PLAN(25, 25),
    /**
     * <code>CM = 26;</code>
     *
     * <pre>
     * HeGui
     * </pre>
     */
    CM(26, 26),
    /**
     * <code>IAM_REPORT = 28;</code>
     *
     * <pre>
     * Report For Iam
     * </pre>
     */
    IAM_REPORT(27, 28),
    /**
     * <code>SMS_CENTER = 29;</code>
     *
     * <pre>
     * SMS Transmitter Center
     * </pre>
     */
    SMS_CENTER(28, 29),
    /**
     * <code>HOST = 30;</code>
     *
     * <pre>
     * For Host Server, and for mba
     * </pre>
     */
    HOST(29, 30),
    /**
     * <code>DETOUR = 40;</code>
     */
    DETOUR(30, 40),
    /**
     * <code>EVENT = 41;</code>
     */
    EVENT(31, 41),
    /**
     * <code>STATS = 42;</code>
     */
    STATS(32, 42),
    ;

    /**
     * <code>ALL = 0;</code>
     */
    public static final int ALL_VALUE = 0;
    /**
     * <code>NBA = 1;</code>
     */
    public static final int NBA_VALUE = 1;
    /**
     * <code>SYSLOG = 2;</code>
     */
    public static final int SYSLOG_VALUE = 2;
    /**
     * <code>FTP = 3;</code>
     */
    public static final int FTP_VALUE = 3;
    /**
     * <code>TELNET = 4;</code>
     */
    public static final int TELNET_VALUE = 4;
    /**
     * <code>JDBC = 5;</code>
     */
    public static final int JDBC_VALUE = 5;
    /**
     * <code>GBA = 6;</code>
     */
    public static final int GBA_VALUE = 6;
    /**
     * <code>CPS = 7;</code>
     */
    public static final int CPS_VALUE = 7;
    /**
     * <code>IBA = 8;</code>
     */
    public static final int IBA_VALUE = 8;
    /**
     * <code>FILTER = 9;</code>
     */
    public static final int FILTER_VALUE = 9;
    /**
     * <code>NDE = 10;</code>
     */
    public static final int NDE_VALUE = 10;
    /**
     * <code>ADMIN = 11;</code>
     */
    public static final int ADMIN_VALUE = 11;
    /**
     * <code>_4A_ASCII = 12;</code>
     */
    public static final int _4A_ASCII_VALUE = 12;
    /**
     * <code>IAM_SQUIRREL = 13;</code>
     */
    public static final int IAM_SQUIRREL_VALUE = 13;
    /**
     * <code>SQUIRREL = 14;</code>
     */
    public static final int SQUIRREL_VALUE = 14;
    /**
     * <code>GBATREASURY = 15;</code>
     */
    public static final int GBATREASURY_VALUE = 15;
    /**
     * <code>ADMINCENTER = 16;</code>
     */
    public static final int ADMINCENTER_VALUE = 16;
    /**
     * <code>PORTAL = 17;</code>
     */
    public static final int PORTAL_VALUE = 17;
    /**
     * <code>LDAP = 18;</code>
     */
    public static final int LDAP_VALUE = 18;
    /**
     * <code>LOG_MANAGER = 19;</code>
     */
    public static final int LOG_MANAGER_VALUE = 19;
    /**
     * <code>BSB = 20;</code>
     */
    public static final int BSB_VALUE = 20;
    /**
     * <code>POSTGRESQL = 21;</code>
     */
    public static final int POSTGRESQL_VALUE = 21;
    /**
     * <code>ORACLE = 22;</code>
     */
    public static final int ORACLE_VALUE = 22;
    /**
     * <code>CPS_LICENSE_SERVER = 23;</code>
     */
    public static final int CPS_LICENSE_SERVER_VALUE = 23;
    /**
     * <code>CPS_WEB_INTERFACE = 24;</code>
     */
    public static final int CPS_WEB_INTERFACE_VALUE = 24;
    /**
     * <code>PLAN = 25;</code>
     *
     * <pre>
     * Plan and Task
     * </pre>
     */
    public static final int PLAN_VALUE = 25;
    /**
     * <code>CM = 26;</code>
     *
     * <pre>
     * HeGui
     * </pre>
     */
    public static final int CM_VALUE = 26;
    /**
     * <code>IAM_REPORT = 28;</code>
     *
     * <pre>
     * Report For Iam
     * </pre>
     */
    public static final int IAM_REPORT_VALUE = 28;
    /**
     * <code>SMS_CENTER = 29;</code>
     *
     * <pre>
     * SMS Transmitter Center
     * </pre>
     */
    public static final int SMS_CENTER_VALUE = 29;
    /**
     * <code>HOST = 30;</code>
     *
     * <pre>
     * For Host Server, and for mba
     * </pre>
     */
    public static final int HOST_VALUE = 30;
    /**
     * <code>DETOUR = 40;</code>
     */
    public static final int DETOUR_VALUE = 40;
    /**
     * <code>EVENT = 41;</code>
     */
    public static final int EVENT_VALUE = 41;
    /**
     * <code>STATS = 42;</code>
     */
    public static final int STATS_VALUE = 42;


    public final int getNumber() { return value; }

    public static COMPONENT_TYPE valueOf(int value) {
      switch (value) {
        case 0: return ALL;
        case 1: return NBA;
        case 2: return SYSLOG;
        case 3: return FTP;
        case 4: return TELNET;
        case 5: return JDBC;
        case 6: return GBA;
        case 7: return CPS;
        case 8: return IBA;
        case 9: return FILTER;
        case 10: return NDE;
        case 11: return ADMIN;
        case 12: return _4A_ASCII;
        case 13: return IAM_SQUIRREL;
        case 14: return SQUIRREL;
        case 15: return GBATREASURY;
        case 16: return ADMINCENTER;
        case 17: return PORTAL;
        case 18: return LDAP;
        case 19: return LOG_MANAGER;
        case 20: return BSB;
        case 21: return POSTGRESQL;
        case 22: return ORACLE;
        case 23: return CPS_LICENSE_SERVER;
        case 24: return CPS_WEB_INTERFACE;
        case 25: return PLAN;
        case 26: return CM;
        case 28: return IAM_REPORT;
        case 29: return SMS_CENTER;
        case 30: return HOST;
        case 40: return DETOUR;
        case 41: return EVENT;
        case 42: return STATS;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<COMPONENT_TYPE>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<COMPONENT_TYPE>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<COMPONENT_TYPE>() {
            public COMPONENT_TYPE findValueByNumber(int number) {
              return COMPONENT_TYPE.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return AuditEnum.getDescriptor().getEnumTypes().get(2);
    }

    private static final COMPONENT_TYPE[] VALUES = values();

    public static COMPONENT_TYPE valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private COMPONENT_TYPE(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:sp.COMPONENT_TYPE)
  }

  /**
   * Protobuf enum {@code sp.RISK_LEVEL}
   */
  public enum RISK_LEVEL
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>RED = 1;</code>
     */
    RED(0, 1),
    /**
     * <code>ORANGE = 2;</code>
     */
    ORANGE(1, 2),
    /**
     * <code>YELLOW = 3;</code>
     */
    YELLOW(2, 3),
    /**
     * <code>BLUE = 4;</code>
     */
    BLUE(3, 4),
    /**
     * <code>GREEN = 5;</code>
     */
    GREEN(4, 5),
    ;

    /**
     * <code>RED = 1;</code>
     */
    public static final int RED_VALUE = 1;
    /**
     * <code>ORANGE = 2;</code>
     */
    public static final int ORANGE_VALUE = 2;
    /**
     * <code>YELLOW = 3;</code>
     */
    public static final int YELLOW_VALUE = 3;
    /**
     * <code>BLUE = 4;</code>
     */
    public static final int BLUE_VALUE = 4;
    /**
     * <code>GREEN = 5;</code>
     */
    public static final int GREEN_VALUE = 5;


    public final int getNumber() { return value; }

    public static RISK_LEVEL valueOf(int value) {
      switch (value) {
        case 1: return RED;
        case 2: return ORANGE;
        case 3: return YELLOW;
        case 4: return BLUE;
        case 5: return GREEN;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<RISK_LEVEL>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<RISK_LEVEL>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<RISK_LEVEL>() {
            public RISK_LEVEL findValueByNumber(int number) {
              return RISK_LEVEL.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return AuditEnum.getDescriptor().getEnumTypes().get(3);
    }

    private static final RISK_LEVEL[] VALUES = values();

    public static RISK_LEVEL valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private RISK_LEVEL(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:sp.RISK_LEVEL)
  }

  /**
   * Protobuf enum {@code sp.ALARM_PROCESS_MODE}
   */
  public enum ALARM_PROCESS_MODE
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>REALTIME = 1;</code>
     */
    REALTIME(0, 1),
    /**
     * <code>MESSAGE = 2;</code>
     */
    MESSAGE(1, 2),
    /**
     * <code>MAIL = 3;</code>
     */
    MAIL(2, 3),
    /**
     * <code>SYSLOG_ = 4;</code>
     */
    SYSLOG_(3, 4),
    /**
     * <code>SNMPTRAP = 5;</code>
     */
    SNMPTRAP(4, 5),
    /**
     * <code>BOMC = 6;</code>
     *
     * <pre>
     * 是否发工单系统
     * </pre>
     */
    BOMC(5, 6),
    ;

    /**
     * <code>REALTIME = 1;</code>
     */
    public static final int REALTIME_VALUE = 1;
    /**
     * <code>MESSAGE = 2;</code>
     */
    public static final int MESSAGE_VALUE = 2;
    /**
     * <code>MAIL = 3;</code>
     */
    public static final int MAIL_VALUE = 3;
    /**
     * <code>SYSLOG_ = 4;</code>
     */
    public static final int SYSLOG__VALUE = 4;
    /**
     * <code>SNMPTRAP = 5;</code>
     */
    public static final int SNMPTRAP_VALUE = 5;
    /**
     * <code>BOMC = 6;</code>
     *
     * <pre>
     * 是否发工单系统
     * </pre>
     */
    public static final int BOMC_VALUE = 6;


    public final int getNumber() { return value; }

    public static ALARM_PROCESS_MODE valueOf(int value) {
      switch (value) {
        case 1: return REALTIME;
        case 2: return MESSAGE;
        case 3: return MAIL;
        case 4: return SYSLOG_;
        case 5: return SNMPTRAP;
        case 6: return BOMC;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ALARM_PROCESS_MODE>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<ALARM_PROCESS_MODE>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ALARM_PROCESS_MODE>() {
            public ALARM_PROCESS_MODE findValueByNumber(int number) {
              return ALARM_PROCESS_MODE.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return AuditEnum.getDescriptor().getEnumTypes().get(4);
    }

    private static final ALARM_PROCESS_MODE[] VALUES = values();

    public static ALARM_PROCESS_MODE valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private ALARM_PROCESS_MODE(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:sp.ALARM_PROCESS_MODE)
  }

  /**
   * Protobuf enum {@code sp.ANA_POLICY_TYPE}
   */
  public enum ANA_POLICY_TYPE
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>FILTER_POLICY = 1;</code>
     *
     * <pre>
     * filter policy
     * </pre>
     */
    FILTER_POLICY(0, 1),
    /**
     * <code>SUBJECT_POLICY = 2;</code>
     *
     * <pre>
     * subject policy
     * </pre>
     */
    SUBJECT_POLICY(1, 2),
    /**
     * <code>EVENT_POLICY = 3;</code>
     *
     * <pre>
     * event analysis policy
     * </pre>
     */
    EVENT_POLICY(2, 3),
    /**
     * <code>STATS_POLICY = 4;</code>
     *
     * <pre>
     * statistic analysis policy
     * </pre>
     */
    STATS_POLICY(3, 4),
    /**
     * <code>DETOUR_POLICY = 5;</code>
     *
     * <pre>
     * detour policy
     * </pre>
     */
    DETOUR_POLICY(4, 5),
    /**
     * <code>BUSI_SCEN_ANA_POLICY = 6;</code>
     *
     * <pre>
     * 业务场景分析策略
     * </pre>
     */
    BUSI_SCEN_ANA_POLICY(5, 6),
    /**
     * <code>FORMAT_FULL_POLICY = 7;</code>
     *
     * <pre>
     * 格式化时完整性策略
     * </pre>
     */
    FORMAT_FULL_POLICY(6, 7),
    /**
     * <code>IBA_FULL_POLICY = 8;</code>
     *
     * <pre>
     * 补全后完整性策略
     * </pre>
     */
    IBA_FULL_POLICY(7, 8),
    /**
     * <code>VALID_POLICY = 9;</code>
     *
     * <pre>
     * 合法性策略
     * </pre>
     */
    VALID_POLICY(8, 9),
    /**
     * <code>NBA_ENCODE_POLICY = 10;</code>
     */
    NBA_ENCODE_POLICY(9, 10),
    /**
     * <code>GBA_ENCODE_POLICY = 11;</code>
     */
    GBA_ENCODE_POLICY(10, 11),
    /**
     * <code>SYSLOG_ENCODE_POLICY = 12;</code>
     */
    SYSLOG_ENCODE_POLICY(11, 12),
    /**
     * <code>FTP_ENCODE_POLICY = 13;</code>
     */
    FTP_ENCODE_POLICY(12, 13),
    /**
     * <code>TELNET_ENCODE_POLICY = 14;</code>
     */
    TELNET_ENCODE_POLICY(13, 14),
    /**
     * <code>JDBC_ENCODE_POLICY = 15;</code>
     */
    JDBC_ENCODE_POLICY(14, 15),
    ;

    /**
     * <code>FILTER_POLICY = 1;</code>
     *
     * <pre>
     * filter policy
     * </pre>
     */
    public static final int FILTER_POLICY_VALUE = 1;
    /**
     * <code>SUBJECT_POLICY = 2;</code>
     *
     * <pre>
     * subject policy
     * </pre>
     */
    public static final int SUBJECT_POLICY_VALUE = 2;
    /**
     * <code>EVENT_POLICY = 3;</code>
     *
     * <pre>
     * event analysis policy
     * </pre>
     */
    public static final int EVENT_POLICY_VALUE = 3;
    /**
     * <code>STATS_POLICY = 4;</code>
     *
     * <pre>
     * statistic analysis policy
     * </pre>
     */
    public static final int STATS_POLICY_VALUE = 4;
    /**
     * <code>DETOUR_POLICY = 5;</code>
     *
     * <pre>
     * detour policy
     * </pre>
     */
    public static final int DETOUR_POLICY_VALUE = 5;
    /**
     * <code>BUSI_SCEN_ANA_POLICY = 6;</code>
     *
     * <pre>
     * 业务场景分析策略
     * </pre>
     */
    public static final int BUSI_SCEN_ANA_POLICY_VALUE = 6;
    /**
     * <code>FORMAT_FULL_POLICY = 7;</code>
     *
     * <pre>
     * 格式化时完整性策略
     * </pre>
     */
    public static final int FORMAT_FULL_POLICY_VALUE = 7;
    /**
     * <code>IBA_FULL_POLICY = 8;</code>
     *
     * <pre>
     * 补全后完整性策略
     * </pre>
     */
    public static final int IBA_FULL_POLICY_VALUE = 8;
    /**
     * <code>VALID_POLICY = 9;</code>
     *
     * <pre>
     * 合法性策略
     * </pre>
     */
    public static final int VALID_POLICY_VALUE = 9;
    /**
     * <code>NBA_ENCODE_POLICY = 10;</code>
     */
    public static final int NBA_ENCODE_POLICY_VALUE = 10;
    /**
     * <code>GBA_ENCODE_POLICY = 11;</code>
     */
    public static final int GBA_ENCODE_POLICY_VALUE = 11;
    /**
     * <code>SYSLOG_ENCODE_POLICY = 12;</code>
     */
    public static final int SYSLOG_ENCODE_POLICY_VALUE = 12;
    /**
     * <code>FTP_ENCODE_POLICY = 13;</code>
     */
    public static final int FTP_ENCODE_POLICY_VALUE = 13;
    /**
     * <code>TELNET_ENCODE_POLICY = 14;</code>
     */
    public static final int TELNET_ENCODE_POLICY_VALUE = 14;
    /**
     * <code>JDBC_ENCODE_POLICY = 15;</code>
     */
    public static final int JDBC_ENCODE_POLICY_VALUE = 15;


    public final int getNumber() { return value; }

    public static ANA_POLICY_TYPE valueOf(int value) {
      switch (value) {
        case 1: return FILTER_POLICY;
        case 2: return SUBJECT_POLICY;
        case 3: return EVENT_POLICY;
        case 4: return STATS_POLICY;
        case 5: return DETOUR_POLICY;
        case 6: return BUSI_SCEN_ANA_POLICY;
        case 7: return FORMAT_FULL_POLICY;
        case 8: return IBA_FULL_POLICY;
        case 9: return VALID_POLICY;
        case 10: return NBA_ENCODE_POLICY;
        case 11: return GBA_ENCODE_POLICY;
        case 12: return SYSLOG_ENCODE_POLICY;
        case 13: return FTP_ENCODE_POLICY;
        case 14: return TELNET_ENCODE_POLICY;
        case 15: return JDBC_ENCODE_POLICY;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ANA_POLICY_TYPE>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<ANA_POLICY_TYPE>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ANA_POLICY_TYPE>() {
            public ANA_POLICY_TYPE findValueByNumber(int number) {
              return ANA_POLICY_TYPE.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return AuditEnum.getDescriptor().getEnumTypes().get(5);
    }

    private static final ANA_POLICY_TYPE[] VALUES = values();

    public static ANA_POLICY_TYPE valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private ANA_POLICY_TYPE(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:sp.ANA_POLICY_TYPE)
  }

  /**
   * Protobuf enum {@code sp.LOG_RESULT}
   */
  public enum LOG_RESULT
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>FAILED = 0;</code>
     */
    FAILED(0, 0),
    /**
     * <code>SUCCESS = 1;</code>
     */
    SUCCESS(1, 1),
    ;

    /**
     * <code>FAILED = 0;</code>
     */
    public static final int FAILED_VALUE = 0;
    /**
     * <code>SUCCESS = 1;</code>
     */
    public static final int SUCCESS_VALUE = 1;


    public final int getNumber() { return value; }

    public static LOG_RESULT valueOf(int value) {
      switch (value) {
        case 0: return FAILED;
        case 1: return SUCCESS;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<LOG_RESULT>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<LOG_RESULT>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<LOG_RESULT>() {
            public LOG_RESULT findValueByNumber(int number) {
              return LOG_RESULT.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return AuditEnum.getDescriptor().getEnumTypes().get(6);
    }

    private static final LOG_RESULT[] VALUES = values();

    public static LOG_RESULT valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private LOG_RESULT(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:sp.LOG_RESULT)
  }

  /**
   * Protobuf enum {@code sp.HOST_TYPE}
   */
  public enum HOST_TYPE
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>UNKONWN = 0;</code>
     */
    UNKONWN(0, 0),
    /**
     * <code>APPLICATION = 1;</code>
     */
    APPLICATION(1, 1),
    /**
     * <code>DATABASE = 2;</code>
     */
    DATABASE(2, 2),
    /**
     * <code>UNIX = 3;</code>
     */
    UNIX(3, 3),
    /**
     * <code>WINDOWS = 4;</code>
     */
    WINDOWS(4, 4),
    /**
     * <code>NET_DEVICE = 5;</code>
     */
    NET_DEVICE(5, 5),
    /**
     * <code>NET_UNIT = 6;</code>
     */
    NET_UNIT(6, 6),
    ;

    /**
     * <code>UNKONWN = 0;</code>
     */
    public static final int UNKONWN_VALUE = 0;
    /**
     * <code>APPLICATION = 1;</code>
     */
    public static final int APPLICATION_VALUE = 1;
    /**
     * <code>DATABASE = 2;</code>
     */
    public static final int DATABASE_VALUE = 2;
    /**
     * <code>UNIX = 3;</code>
     */
    public static final int UNIX_VALUE = 3;
    /**
     * <code>WINDOWS = 4;</code>
     */
    public static final int WINDOWS_VALUE = 4;
    /**
     * <code>NET_DEVICE = 5;</code>
     */
    public static final int NET_DEVICE_VALUE = 5;
    /**
     * <code>NET_UNIT = 6;</code>
     */
    public static final int NET_UNIT_VALUE = 6;


    public final int getNumber() { return value; }

    public static HOST_TYPE valueOf(int value) {
      switch (value) {
        case 0: return UNKONWN;
        case 1: return APPLICATION;
        case 2: return DATABASE;
        case 3: return UNIX;
        case 4: return WINDOWS;
        case 5: return NET_DEVICE;
        case 6: return NET_UNIT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<HOST_TYPE>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<HOST_TYPE>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<HOST_TYPE>() {
            public HOST_TYPE findValueByNumber(int number) {
              return HOST_TYPE.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return AuditEnum.getDescriptor().getEnumTypes().get(7);
    }

    private static final HOST_TYPE[] VALUES = values();

    public static HOST_TYPE valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private HOST_TYPE(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:sp.HOST_TYPE)
  }

  /**
   * Protobuf enum {@code sp.LOG_TYPE}
   *
   * <pre>
   **
   * 日志类型，沿用4A 3.3、3.4版本中的定义
   * </pre>
   */
  public enum LOG_TYPE
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>LOG_UNKNOWN = 0;</code>
     *
     * <pre>
     *! for all log
     * </pre>
     */
    LOG_UNKNOWN(0, 0),
    /**
     * <code>GBA_LOGON = 1;</code>
     *
     * <pre>
     *! for GBA [1,10]
     * </pre>
     */
    GBA_LOGON(1, 1),
    /**
     * <code>GBA_OPER = 2;</code>
     */
    GBA_OPER(2, 2),
    /**
     * <code>GBA_LOGOFF = 3;</code>
     */
    GBA_LOGOFF(3, 3),
    /**
     * <code>NBA_LOGON = 11;</code>
     *
     * <pre>
     *! for NBA [11,20]
     * </pre>
     */
    NBA_LOGON(4, 11),
    /**
     * <code>NBA_OPER = 12;</code>
     */
    NBA_OPER(5, 12),
    /**
     * <code>NBA_LOGOFF = 13;</code>
     */
    NBA_LOGOFF(6, 13),
    /**
     * <code>NBA_UPDATE = 14;</code>
     */
    NBA_UPDATE(7, 14),
    /**
     * <code>FTP_LOG = 21;</code>
     *
     * <pre>
     *! for HBA [21,30]
     * </pre>
     */
    FTP_LOG(8, 21),
    /**
     * <code>TELNET_LOG = 22;</code>
     */
    TELNET_LOG(9, 22),
    /**
     * <code>JDBC_LOG = 23;</code>
     */
    JDBC_LOG(10, 23),
    /**
     * <code>SYSLOG_LOG = 24;</code>
     */
    SYSLOG_LOG(11, 24),
    /**
     * <code>SNMPTRAP_LOG = 25;</code>
     */
    SNMPTRAP_LOG(12, 25),
    /**
     * <code>CPS_LOG = 31;</code>
     *
     * <pre>
     *! for CPS [31,40]
     * </pre>
     */
    CPS_LOG(13, 31),
    /**
     * <code>USER_SESSION = 32;</code>
     */
    USER_SESSION(14, 32),
    /**
     * <code>USER_SESSION_UPDATE = 33;</code>
     */
    USER_SESSION_UPDATE(15, 33),
    /**
     * <code>LOGON = 41;</code>
     *
     * <pre>
     *! for 4A [41,159)
     * </pre>
     */
    LOGON(16, 41),
    /**
     * <code>LOGOFF = 42;</code>
     *
     * <pre>
     * 登出4A，重要
     * </pre>
     */
    LOGOFF(17, 42),
    /**
     * <code>RES_OPER_LOG = 43;</code>
     */
    RES_OPER_LOG(18, 43),
    /**
     * <code>FILL_LOG = 44;</code>
     *
     * <pre>
     * 单点登录，重要
     * </pre>
     */
    FILL_LOG(19, 44),
    /**
     * <code>ACCOUNT_OPER_LOG = 45;</code>
     */
    ACCOUNT_OPER_LOG(20, 45),
    /**
     * <code>USER_OPER_LOG = 46;</code>
     */
    USER_OPER_LOG(21, 46),
    /**
     * <code>BATCH_OPER_LOG = 47;</code>
     */
    BATCH_OPER_LOG(22, 47),
    /**
     * <code>COMMON_OPER_LOG = 48;</code>
     */
    COMMON_OPER_LOG(23, 48),
    /**
     * <code>Link_LOG = 51;</code>
     */
    Link_LOG(24, 51),
    /**
     * <code>OperAuth = 57;</code>
     */
    OperAuth(25, 57),
    /**
     * <code>AUDIT_LOG = 160;</code>
     *
     * <pre>
     *! for auditlog
     * </pre>
     */
    AUDIT_LOG(26, 160),
    /**
     * <code>FORWARD_CPS_LOG = 240;</code>
     */
    FORWARD_CPS_LOG(27, 240),
    /**
     * <code>FORWARD_LOGON = 241;</code>
     */
    FORWARD_LOGON(28, 241),
    /**
     * <code>FORWARD_LOGOFF = 242;</code>
     */
    FORWARD_LOGOFF(29, 242),
    /**
     * <code>FORWARD_FILL_LOG = 244;</code>
     */
    FORWARD_FILL_LOG(30, 244),
    /**
     * <code>TREASURY_LOG = 245;</code>
     */
    TREASURY_LOG(31, 245),
    /**
     * <code>DETOUR_LOG = 246;</code>
     */
    DETOUR_LOG(32, 246),
    /**
     * <code>FORWARD_GBA_LOGON = 299;</code>
     */
    FORWARD_GBA_LOGON(33, 299),
    ;

    /**
     * <code>LOG_UNKNOWN = 0;</code>
     *
     * <pre>
     *! for all log
     * </pre>
     */
    public static final int LOG_UNKNOWN_VALUE = 0;
    /**
     * <code>GBA_LOGON = 1;</code>
     *
     * <pre>
     *! for GBA [1,10]
     * </pre>
     */
    public static final int GBA_LOGON_VALUE = 1;
    /**
     * <code>GBA_OPER = 2;</code>
     */
    public static final int GBA_OPER_VALUE = 2;
    /**
     * <code>GBA_LOGOFF = 3;</code>
     */
    public static final int GBA_LOGOFF_VALUE = 3;
    /**
     * <code>NBA_LOGON = 11;</code>
     *
     * <pre>
     *! for NBA [11,20]
     * </pre>
     */
    public static final int NBA_LOGON_VALUE = 11;
    /**
     * <code>NBA_OPER = 12;</code>
     */
    public static final int NBA_OPER_VALUE = 12;
    /**
     * <code>NBA_LOGOFF = 13;</code>
     */
    public static final int NBA_LOGOFF_VALUE = 13;
    /**
     * <code>NBA_UPDATE = 14;</code>
     */
    public static final int NBA_UPDATE_VALUE = 14;
    /**
     * <code>FTP_LOG = 21;</code>
     *
     * <pre>
     *! for HBA [21,30]
     * </pre>
     */
    public static final int FTP_LOG_VALUE = 21;
    /**
     * <code>TELNET_LOG = 22;</code>
     */
    public static final int TELNET_LOG_VALUE = 22;
    /**
     * <code>JDBC_LOG = 23;</code>
     */
    public static final int JDBC_LOG_VALUE = 23;
    /**
     * <code>SYSLOG_LOG = 24;</code>
     */
    public static final int SYSLOG_LOG_VALUE = 24;
    /**
     * <code>SNMPTRAP_LOG = 25;</code>
     */
    public static final int SNMPTRAP_LOG_VALUE = 25;
    /**
     * <code>CPS_LOG = 31;</code>
     *
     * <pre>
     *! for CPS [31,40]
     * </pre>
     */
    public static final int CPS_LOG_VALUE = 31;
    /**
     * <code>USER_SESSION = 32;</code>
     */
    public static final int USER_SESSION_VALUE = 32;
    /**
     * <code>USER_SESSION_UPDATE = 33;</code>
     */
    public static final int USER_SESSION_UPDATE_VALUE = 33;
    /**
     * <code>LOGON = 41;</code>
     *
     * <pre>
     *! for 4A [41,159)
     * </pre>
     */
    public static final int LOGON_VALUE = 41;
    /**
     * <code>LOGOFF = 42;</code>
     *
     * <pre>
     * 登出4A，重要
     * </pre>
     */
    public static final int LOGOFF_VALUE = 42;
    /**
     * <code>RES_OPER_LOG = 43;</code>
     */
    public static final int RES_OPER_LOG_VALUE = 43;
    /**
     * <code>FILL_LOG = 44;</code>
     *
     * <pre>
     * 单点登录，重要
     * </pre>
     */
    public static final int FILL_LOG_VALUE = 44;
    /**
     * <code>ACCOUNT_OPER_LOG = 45;</code>
     */
    public static final int ACCOUNT_OPER_LOG_VALUE = 45;
    /**
     * <code>USER_OPER_LOG = 46;</code>
     */
    public static final int USER_OPER_LOG_VALUE = 46;
    /**
     * <code>BATCH_OPER_LOG = 47;</code>
     */
    public static final int BATCH_OPER_LOG_VALUE = 47;
    /**
     * <code>COMMON_OPER_LOG = 48;</code>
     */
    public static final int COMMON_OPER_LOG_VALUE = 48;
    /**
     * <code>Link_LOG = 51;</code>
     */
    public static final int Link_LOG_VALUE = 51;
    /**
     * <code>OperAuth = 57;</code>
     */
    public static final int OperAuth_VALUE = 57;
    /**
     * <code>AUDIT_LOG = 160;</code>
     *
     * <pre>
     *! for auditlog
     * </pre>
     */
    public static final int AUDIT_LOG_VALUE = 160;
    /**
     * <code>FORWARD_CPS_LOG = 240;</code>
     */
    public static final int FORWARD_CPS_LOG_VALUE = 240;
    /**
     * <code>FORWARD_LOGON = 241;</code>
     */
    public static final int FORWARD_LOGON_VALUE = 241;
    /**
     * <code>FORWARD_LOGOFF = 242;</code>
     */
    public static final int FORWARD_LOGOFF_VALUE = 242;
    /**
     * <code>FORWARD_FILL_LOG = 244;</code>
     */
    public static final int FORWARD_FILL_LOG_VALUE = 244;
    /**
     * <code>TREASURY_LOG = 245;</code>
     */
    public static final int TREASURY_LOG_VALUE = 245;
    /**
     * <code>DETOUR_LOG = 246;</code>
     */
    public static final int DETOUR_LOG_VALUE = 246;
    /**
     * <code>FORWARD_GBA_LOGON = 299;</code>
     */
    public static final int FORWARD_GBA_LOGON_VALUE = 299;


    public final int getNumber() { return value; }

    public static LOG_TYPE valueOf(int value) {
      switch (value) {
        case 0: return LOG_UNKNOWN;
        case 1: return GBA_LOGON;
        case 2: return GBA_OPER;
        case 3: return GBA_LOGOFF;
        case 11: return NBA_LOGON;
        case 12: return NBA_OPER;
        case 13: return NBA_LOGOFF;
        case 14: return NBA_UPDATE;
        case 21: return FTP_LOG;
        case 22: return TELNET_LOG;
        case 23: return JDBC_LOG;
        case 24: return SYSLOG_LOG;
        case 25: return SNMPTRAP_LOG;
        case 31: return CPS_LOG;
        case 32: return USER_SESSION;
        case 33: return USER_SESSION_UPDATE;
        case 41: return LOGON;
        case 42: return LOGOFF;
        case 43: return RES_OPER_LOG;
        case 44: return FILL_LOG;
        case 45: return ACCOUNT_OPER_LOG;
        case 46: return USER_OPER_LOG;
        case 47: return BATCH_OPER_LOG;
        case 48: return COMMON_OPER_LOG;
        case 51: return Link_LOG;
        case 57: return OperAuth;
        case 160: return AUDIT_LOG;
        case 240: return FORWARD_CPS_LOG;
        case 241: return FORWARD_LOGON;
        case 242: return FORWARD_LOGOFF;
        case 244: return FORWARD_FILL_LOG;
        case 245: return TREASURY_LOG;
        case 246: return DETOUR_LOG;
        case 299: return FORWARD_GBA_LOGON;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<LOG_TYPE>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<LOG_TYPE>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<LOG_TYPE>() {
            public LOG_TYPE findValueByNumber(int number) {
              return LOG_TYPE.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return AuditEnum.getDescriptor().getEnumTypes().get(8);
    }

    private static final LOG_TYPE[] VALUES = values();

    public static LOG_TYPE valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private LOG_TYPE(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:sp.LOG_TYPE)
  }

  /**
   * Protobuf enum {@code sp.LOG_KIND}
   *
   * <pre>
   *
   * 定义日志种类，每个种类可包含多张表日志，在分析策略中由此确定从哪些表读数据
   * </pre>
   */
  public enum LOG_KIND
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>LK_STANDARD = 1;</code>
     *
     * <pre>
     * 指标准化后的日志：t_oper、t_hba_log、t_iam_log
     * </pre>
     */
    LK_STANDARD(0, 1),
    /**
     * <code>LK_EVENT = 2;</code>
     *
     * <pre>
     * 指筛选后的日志：t_event_log
     * </pre>
     */
    LK_EVENT(1, 2),
    /**
     * <code>LK_BUSI_SCEN_ANA = 3;</code>
     *
     * <pre>
     * 业务场景分析后的日志：t_busi_scen_ana_log
     * </pre>
     */
    LK_BUSI_SCEN_ANA(2, 3),
    ;

    /**
     * <code>LK_STANDARD = 1;</code>
     *
     * <pre>
     * 指标准化后的日志：t_oper、t_hba_log、t_iam_log
     * </pre>
     */
    public static final int LK_STANDARD_VALUE = 1;
    /**
     * <code>LK_EVENT = 2;</code>
     *
     * <pre>
     * 指筛选后的日志：t_event_log
     * </pre>
     */
    public static final int LK_EVENT_VALUE = 2;
    /**
     * <code>LK_BUSI_SCEN_ANA = 3;</code>
     *
     * <pre>
     * 业务场景分析后的日志：t_busi_scen_ana_log
     * </pre>
     */
    public static final int LK_BUSI_SCEN_ANA_VALUE = 3;


    public final int getNumber() { return value; }

    public static LOG_KIND valueOf(int value) {
      switch (value) {
        case 1: return LK_STANDARD;
        case 2: return LK_EVENT;
        case 3: return LK_BUSI_SCEN_ANA;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<LOG_KIND>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<LOG_KIND>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<LOG_KIND>() {
            public LOG_KIND findValueByNumber(int number) {
              return LOG_KIND.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return AuditEnum.getDescriptor().getEnumTypes().get(9);
    }

    private static final LOG_KIND[] VALUES = values();

    public static LOG_KIND valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private LOG_KIND(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:sp.LOG_KIND)
  }

  /**
   * Protobuf enum {@code sp.CONF_TYPE}
   *
   * <pre>
   *
   * 定义全局校验的类型
   * </pre>
   */
  public enum CONF_TYPE
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>CHECK_VALID = 1;</code>
     *
     * <pre>
     * 合法性校验
     * </pre>
     */
    CHECK_VALID(0, 1),
    /**
     * <code>CHECK_COMPLETE = 2;</code>
     *
     * <pre>
     * 完整性校验
     * </pre>
     */
    CHECK_COMPLETE(1, 2),
    ;

    /**
     * <code>CHECK_VALID = 1;</code>
     *
     * <pre>
     * 合法性校验
     * </pre>
     */
    public static final int CHECK_VALID_VALUE = 1;
    /**
     * <code>CHECK_COMPLETE = 2;</code>
     *
     * <pre>
     * 完整性校验
     * </pre>
     */
    public static final int CHECK_COMPLETE_VALUE = 2;


    public final int getNumber() { return value; }

    public static CONF_TYPE valueOf(int value) {
      switch (value) {
        case 1: return CHECK_VALID;
        case 2: return CHECK_COMPLETE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CONF_TYPE>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<CONF_TYPE>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CONF_TYPE>() {
            public CONF_TYPE findValueByNumber(int number) {
              return CONF_TYPE.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return AuditEnum.getDescriptor().getEnumTypes().get(10);
    }

    private static final CONF_TYPE[] VALUES = values();

    public static CONF_TYPE valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private CONF_TYPE(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:sp.CONF_TYPE)
  }

  /**
   * Protobuf enum {@code sp.BIT_5W1H}
   *
   * <pre>
   *
   * 定义采用bit位标识5w1h
   * </pre>
   */
  public enum BIT_5W1H
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>WHO = 0;</code>
     *
     * <pre>
     * bit0
     * </pre>
     */
    WHO(0, 0),
    /**
     * <code>WHEN = 1;</code>
     *
     * <pre>
     * bit1
     * </pre>
     */
    WHEN(1, 1),
    /**
     * <code>SWHERE = 2;</code>
     *
     * <pre>
     * bit2
     * </pre>
     */
    SWHERE(2, 2),
    /**
     * <code>DWHERE = 3;</code>
     *
     * <pre>
     * bit3
     * </pre>
     */
    DWHERE(3, 3),
    /**
     * <code>HOW = 4;</code>
     *
     * <pre>
     * bit4
     * </pre>
     */
    HOW(4, 4),
    /**
     * <code>WHAT = 5;</code>
     *
     * <pre>
     * bit5
     * </pre>
     */
    WHAT(5, 5),
    /**
     * <code>WHY = 6;</code>
     *
     * <pre>
     * bit6
     * </pre>
     */
    WHY(6, 6),
    ;

    /**
     * <code>WHO = 0;</code>
     *
     * <pre>
     * bit0
     * </pre>
     */
    public static final int WHO_VALUE = 0;
    /**
     * <code>WHEN = 1;</code>
     *
     * <pre>
     * bit1
     * </pre>
     */
    public static final int WHEN_VALUE = 1;
    /**
     * <code>SWHERE = 2;</code>
     *
     * <pre>
     * bit2
     * </pre>
     */
    public static final int SWHERE_VALUE = 2;
    /**
     * <code>DWHERE = 3;</code>
     *
     * <pre>
     * bit3
     * </pre>
     */
    public static final int DWHERE_VALUE = 3;
    /**
     * <code>HOW = 4;</code>
     *
     * <pre>
     * bit4
     * </pre>
     */
    public static final int HOW_VALUE = 4;
    /**
     * <code>WHAT = 5;</code>
     *
     * <pre>
     * bit5
     * </pre>
     */
    public static final int WHAT_VALUE = 5;
    /**
     * <code>WHY = 6;</code>
     *
     * <pre>
     * bit6
     * </pre>
     */
    public static final int WHY_VALUE = 6;


    public final int getNumber() { return value; }

    public static BIT_5W1H valueOf(int value) {
      switch (value) {
        case 0: return WHO;
        case 1: return WHEN;
        case 2: return SWHERE;
        case 3: return DWHERE;
        case 4: return HOW;
        case 5: return WHAT;
        case 6: return WHY;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<BIT_5W1H>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<BIT_5W1H>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<BIT_5W1H>() {
            public BIT_5W1H findValueByNumber(int number) {
              return BIT_5W1H.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return AuditEnum.getDescriptor().getEnumTypes().get(11);
    }

    private static final BIT_5W1H[] VALUES = values();

    public static BIT_5W1H valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private BIT_5W1H(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:sp.BIT_5W1H)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    String[] descriptorData = {
      "\n\020audit_enum.proto\022\002sp*&\n\tDIRECTION\022\013\n\007R" +
      "EQUEST\020\000\022\014\n\010RESPONSE\020\001*\250\002\n\010LOGCLASS\022\022\n\016L" +
      "C_USERSESSION\020\001\022\r\n\tLC_STREAM\020\002\022\013\n\007LC_OPE" +
      "R\020\003\022\017\n\013LC_TREASURY\020\004\022\017\n\013LC_TREAOPER\020\005\022\n\n" +
      "\006LC_HBA\020\006\022\017\n\013LC_CPSPROXY\020\007\022\021\n\rLC_INCOMPL" +
      "ETE\020\010\022\016\n\nLC_INVALID\020\t\022\n\n\006LC_IAM\020\024\022\r\n\tLC_" +
      "DETOUR\020\025\022\014\n\010LC_EVENT\0202\022\r\n\tLC_KEYANA\0203\022\017\n" +
      "\013LC_STATSANA\0204\022\013\n\007LC_WARN\0205\022\016\n\nLC_SUBJEC" +
      "T\0206\022\020\n\014LC_DETOURANA\0207\022\022\n\016LC_FORWARD_CPS\020" +
      "c*\262\003\n\016COMPONENT_TYPE\022\007\n\003ALL\020\000\022\007\n\003NBA\020\001\022\n",
      "\n\006SYSLOG\020\002\022\007\n\003FTP\020\003\022\n\n\006TELNET\020\004\022\010\n\004JDBC\020" +
      "\005\022\007\n\003GBA\020\006\022\007\n\003CPS\020\007\022\007\n\003IBA\020\010\022\n\n\006FILTER\020\t" +
      "\022\007\n\003NDE\020\n\022\t\n\005ADMIN\020\013\022\r\n\t_4A_ASCII\020\014\022\020\n\014I" +
      "AM_SQUIRREL\020\r\022\014\n\010SQUIRREL\020\016\022\017\n\013GBATREASU" +
      "RY\020\017\022\017\n\013ADMINCENTER\020\020\022\n\n\006PORTAL\020\021\022\010\n\004LDA" +
      "P\020\022\022\017\n\013LOG_MANAGER\020\023\022\007\n\003BSB\020\024\022\016\n\nPOSTGRE" +
      "SQL\020\025\022\n\n\006ORACLE\020\026\022\026\n\022CPS_LICENSE_SERVER\020" +
      "\027\022\025\n\021CPS_WEB_INTERFACE\020\030\022\010\n\004PLAN\020\031\022\006\n\002CM" +
      "\020\032\022\016\n\nIAM_REPORT\020\034\022\016\n\nSMS_CENTER\020\035\022\010\n\004HO" +
      "ST\020\036\022\n\n\006DETOUR\020(\022\t\n\005EVENT\020)\022\t\n\005STATS\020**B",
      "\n\nRISK_LEVEL\022\007\n\003RED\020\001\022\n\n\006ORANGE\020\002\022\n\n\006YEL" +
      "LOW\020\003\022\010\n\004BLUE\020\004\022\t\n\005GREEN\020\005*^\n\022ALARM_PROC" +
      "ESS_MODE\022\014\n\010REALTIME\020\001\022\013\n\007MESSAGE\020\002\022\010\n\004M" +
      "AIL\020\003\022\013\n\007SYSLOG_\020\004\022\014\n\010SNMPTRAP\020\005\022\010\n\004BOMC" +
      "\020\006*\331\002\n\017ANA_POLICY_TYPE\022\021\n\rFILTER_POLICY\020" +
      "\001\022\022\n\016SUBJECT_POLICY\020\002\022\020\n\014EVENT_POLICY\020\003\022" +
      "\020\n\014STATS_POLICY\020\004\022\021\n\rDETOUR_POLICY\020\005\022\030\n\024" +
      "BUSI_SCEN_ANA_POLICY\020\006\022\026\n\022FORMAT_FULL_PO" +
      "LICY\020\007\022\023\n\017IBA_FULL_POLICY\020\010\022\020\n\014VALID_POL" +
      "ICY\020\t\022\025\n\021NBA_ENCODE_POLICY\020\n\022\025\n\021GBA_ENCO",
      "DE_POLICY\020\013\022\030\n\024SYSLOG_ENCODE_POLICY\020\014\022\025\n" +
      "\021FTP_ENCODE_POLICY\020\r\022\030\n\024TELNET_ENCODE_PO" +
      "LICY\020\016\022\026\n\022JDBC_ENCODE_POLICY\020\017*%\n\nLOG_RE" +
      "SULT\022\n\n\006FAILED\020\000\022\013\n\007SUCCESS\020\001*l\n\tHOST_TY" +
      "PE\022\013\n\007UNKONWN\020\000\022\017\n\013APPLICATION\020\001\022\014\n\010DATA" +
      "BASE\020\002\022\010\n\004UNIX\020\003\022\013\n\007WINDOWS\020\004\022\016\n\nNET_DEV" +
      "ICE\020\005\022\014\n\010NET_UNIT\020\006*\321\004\n\010LOG_TYPE\022\017\n\013LOG_" +
      "UNKNOWN\020\000\022\r\n\tGBA_LOGON\020\001\022\014\n\010GBA_OPER\020\002\022\016" +
      "\n\nGBA_LOGOFF\020\003\022\r\n\tNBA_LOGON\020\013\022\014\n\010NBA_OPE" +
      "R\020\014\022\016\n\nNBA_LOGOFF\020\r\022\016\n\nNBA_UPDATE\020\016\022\013\n\007F",
      "TP_LOG\020\025\022\016\n\nTELNET_LOG\020\026\022\014\n\010JDBC_LOG\020\027\022\016" +
      "\n\nSYSLOG_LOG\020\030\022\020\n\014SNMPTRAP_LOG\020\031\022\013\n\007CPS_" +
      "LOG\020\037\022\020\n\014USER_SESSION\020 \022\027\n\023USER_SESSION_" +
      "UPDATE\020!\022\t\n\005LOGON\020)\022\n\n\006LOGOFF\020*\022\020\n\014RES_O" +
      "PER_LOG\020+\022\014\n\010FILL_LOG\020,\022\024\n\020ACCOUNT_OPER_" +
      "LOG\020-\022\021\n\rUSER_OPER_LOG\020.\022\022\n\016BATCH_OPER_L" +
      "OG\020/\022\023\n\017COMMON_OPER_LOG\0200\022\014\n\010Link_LOG\0203\022" +
      "\014\n\010OperAuth\0209\022\016\n\tAUDIT_LOG\020\240\001\022\024\n\017FORWARD" +
      "_CPS_LOG\020\360\001\022\022\n\rFORWARD_LOGON\020\361\001\022\023\n\016FORWA" +
      "RD_LOGOFF\020\362\001\022\025\n\020FORWARD_FILL_LOG\020\364\001\022\021\n\014T",
      "REASURY_LOG\020\365\001\022\017\n\nDETOUR_LOG\020\366\001\022\026\n\021FORWA" +
      "RD_GBA_LOGON\020\253\002*?\n\010LOG_KIND\022\017\n\013LK_STANDA" +
      "RD\020\001\022\014\n\010LK_EVENT\020\002\022\024\n\020LK_BUSI_SCEN_ANA\020\003" +
      "*0\n\tCONF_TYPE\022\017\n\013CHECK_VALID\020\001\022\022\n\016CHECK_" +
      "COMPLETE\020\002*Q\n\010BIT_5W1H\022\007\n\003WHO\020\000\022\010\n\004WHEN\020" +
      "\001\022\n\n\006SWHERE\020\002\022\n\n\006DWHERE\020\003\022\007\n\003HOW\020\004\022\010\n\004WH" +
      "AT\020\005\022\007\n\003WHY\020\006"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
